
Final_Project_FCI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000389c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  0000389c  00003930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080009a  0080009a  0000396a  2**0
                  ALLOC
  3 .stab         00002fdc  00000000  00000000  0000396c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f59  00000000  00000000  00006948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000078a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000acd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000bc58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000bdd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c09a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c928  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3b       	cpi	r26, 0xB6	; 182
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 1a 	call	0x34ca	; 0x34ca <main>
      8a:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 15 1c 	jmp	0x382a	; 0x382a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 31 1c 	jmp	0x3862	; 0x3862 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 15 1c 	jmp	0x382a	; 0x382a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 31 1c 	jmp	0x3862	; 0x3862 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1d 1c 	jmp	0x383a	; 0x383a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e8       	ldi	r22, 0x82	; 130
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Button_Init>:
 *  Created on: Apr 24, 2023
 *      Author: HFCS
 */
#include "Buttons.h"

void Button_Init (void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/*Set Pins as input*/
	CLR_BIT(Button_1_DDR,Button_1_PIN_N);
     ca6:	a1 e3       	ldi	r26, 0x31	; 49
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e1 e3       	ldi	r30, 0x31	; 49
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	87 7f       	andi	r24, 0xF7	; 247
     cb2:	8c 93       	st	X, r24
	CLR_BIT(Button_2_DDR,Button_2_PIN_N);
     cb4:	a1 e3       	ldi	r26, 0x31	; 49
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e1 e3       	ldi	r30, 0x31	; 49
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8f 7d       	andi	r24, 0xDF	; 223
     cc0:	8c 93       	st	X, r24
	CLR_BIT(Button_3_DDR,Button_3_PIN_N);
     cc2:	a1 e3       	ldi	r26, 0x31	; 49
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e1 e3       	ldi	r30, 0x31	; 49
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7b       	andi	r24, 0xBF	; 191
     cce:	8c 93       	st	X, r24
	CLR_BIT(Button_4_DDR,Button_4_PIN_N);
     cd0:	a1 e3       	ldi	r26, 0x31	; 49
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e1 e3       	ldi	r30, 0x31	; 49
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 77       	andi	r24, 0x7F	; 127
     cdc:	8c 93       	st	X, r24

    /*Enable pull up*/
	SET_BIT(Button_1_PORT,Button_1_PIN_N);
     cde:	a2 e3       	ldi	r26, 0x32	; 50
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e2 e3       	ldi	r30, 0x32	; 50
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	88 60       	ori	r24, 0x08	; 8
     cea:	8c 93       	st	X, r24
	SET_BIT(Button_2_PORT,Button_2_PIN_N);
     cec:	a2 e3       	ldi	r26, 0x32	; 50
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e2 e3       	ldi	r30, 0x32	; 50
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 62       	ori	r24, 0x20	; 32
     cf8:	8c 93       	st	X, r24
	SET_BIT(Button_3_PORT,Button_3_PIN_N);
     cfa:	a2 e3       	ldi	r26, 0x32	; 50
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e2 e3       	ldi	r30, 0x32	; 50
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 64       	ori	r24, 0x40	; 64
     d06:	8c 93       	st	X, r24
	SET_BIT(Button_4_PORT,Button_4_PIN_N);
     d08:	a2 e3       	ldi	r26, 0x32	; 50
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e2 e3       	ldi	r30, 0x32	; 50
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <Button_get_value>:
uint8 Button_get_value(){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	e9 97       	sbiw	r28, 0x39	; 57
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
	uint8 ans=INVALID_PRESS;
     d30:	8f ef       	ldi	r24, 0xFF	; 255
     d32:	89 af       	std	Y+57, r24	; 0x39

    if(GET_BIT(Button_1_PIN,Button_1_PIN_N)==0){
     d34:	e0 e3       	ldi	r30, 0x30	; 48
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	86 95       	lsr	r24
     d3c:	86 95       	lsr	r24
     d3e:	86 95       	lsr	r24
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	81 70       	andi	r24, 0x01	; 1
     d46:	90 70       	andi	r25, 0x00	; 0
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	09 f0       	breq	.+2      	; 0xd4e <Button_get_value+0x32>
     d4c:	82 c0       	rjmp	.+260    	; 0xe52 <Button_get_value+0x136>
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	a6 e1       	ldi	r26, 0x16	; 22
     d54:	b3 e4       	ldi	r27, 0x43	; 67
     d56:	8d ab       	std	Y+53, r24	; 0x35
     d58:	9e ab       	std	Y+54, r25	; 0x36
     d5a:	af ab       	std	Y+55, r26	; 0x37
     d5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d5e:	6d a9       	ldd	r22, Y+53	; 0x35
     d60:	7e a9       	ldd	r23, Y+54	; 0x36
     d62:	8f a9       	ldd	r24, Y+55	; 0x37
     d64:	98 ad       	ldd	r25, Y+56	; 0x38
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	4a e7       	ldi	r20, 0x7A	; 122
     d6c:	55 e4       	ldi	r21, 0x45	; 69
     d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	89 ab       	std	Y+49, r24	; 0x31
     d78:	9a ab       	std	Y+50, r25	; 0x32
     d7a:	ab ab       	std	Y+51, r26	; 0x33
     d7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d7e:	69 a9       	ldd	r22, Y+49	; 0x31
     d80:	7a a9       	ldd	r23, Y+50	; 0x32
     d82:	8b a9       	ldd	r24, Y+51	; 0x33
     d84:	9c a9       	ldd	r25, Y+52	; 0x34
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e8       	ldi	r20, 0x80	; 128
     d8c:	5f e3       	ldi	r21, 0x3F	; 63
     d8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d92:	88 23       	and	r24, r24
     d94:	2c f4       	brge	.+10     	; 0xda0 <Button_get_value+0x84>
		__ticks = 1;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	98 ab       	std	Y+48, r25	; 0x30
     d9c:	8f a7       	std	Y+47, r24	; 0x2f
     d9e:	3f c0       	rjmp	.+126    	; 0xe1e <Button_get_value+0x102>
	else if (__tmp > 65535)
     da0:	69 a9       	ldd	r22, Y+49	; 0x31
     da2:	7a a9       	ldd	r23, Y+50	; 0x32
     da4:	8b a9       	ldd	r24, Y+51	; 0x33
     da6:	9c a9       	ldd	r25, Y+52	; 0x34
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	3f ef       	ldi	r19, 0xFF	; 255
     dac:	4f e7       	ldi	r20, 0x7F	; 127
     dae:	57 e4       	ldi	r21, 0x47	; 71
     db0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     db4:	18 16       	cp	r1, r24
     db6:	4c f5       	brge	.+82     	; 0xe0a <Button_get_value+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db8:	6d a9       	ldd	r22, Y+53	; 0x35
     dba:	7e a9       	ldd	r23, Y+54	; 0x36
     dbc:	8f a9       	ldd	r24, Y+55	; 0x37
     dbe:	98 ad       	ldd	r25, Y+56	; 0x38
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e2       	ldi	r20, 0x20	; 32
     dc6:	51 e4       	ldi	r21, 0x41	; 65
     dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	bc 01       	movw	r22, r24
     dd2:	cd 01       	movw	r24, r26
     dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	98 ab       	std	Y+48, r25	; 0x30
     dde:	8f a7       	std	Y+47, r24	; 0x2f
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <Button_get_value+0xe4>
     de2:	80 e9       	ldi	r24, 0x90	; 144
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	9e a7       	std	Y+46, r25	; 0x2e
     de8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dea:	8d a5       	ldd	r24, Y+45	; 0x2d
     dec:	9e a5       	ldd	r25, Y+46	; 0x2e
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <Button_get_value+0xd2>
     df2:	9e a7       	std	Y+46, r25	; 0x2e
     df4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df6:	8f a5       	ldd	r24, Y+47	; 0x2f
     df8:	98 a9       	ldd	r25, Y+48	; 0x30
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	98 ab       	std	Y+48, r25	; 0x30
     dfe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e00:	8f a5       	ldd	r24, Y+47	; 0x2f
     e02:	98 a9       	ldd	r25, Y+48	; 0x30
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	69 f7       	brne	.-38     	; 0xde2 <Button_get_value+0xc6>
     e08:	14 c0       	rjmp	.+40     	; 0xe32 <Button_get_value+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0a:	69 a9       	ldd	r22, Y+49	; 0x31
     e0c:	7a a9       	ldd	r23, Y+50	; 0x32
     e0e:	8b a9       	ldd	r24, Y+51	; 0x33
     e10:	9c a9       	ldd	r25, Y+52	; 0x34
     e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	98 ab       	std	Y+48, r25	; 0x30
     e1c:	8f a7       	std	Y+47, r24	; 0x2f
     e1e:	8f a5       	ldd	r24, Y+47	; 0x2f
     e20:	98 a9       	ldd	r25, Y+48	; 0x30
     e22:	9c a7       	std	Y+44, r25	; 0x2c
     e24:	8b a7       	std	Y+43, r24	; 0x2b
     e26:	8b a5       	ldd	r24, Y+43	; 0x2b
     e28:	9c a5       	ldd	r25, Y+44	; 0x2c
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <Button_get_value+0x10e>
     e2e:	9c a7       	std	Y+44, r25	; 0x2c
     e30:	8b a7       	std	Y+43, r24	; 0x2b
    	  _delay_ms(150);
    	  if(GET_BIT(Button_1_PIN,Button_1_PIN_N)==0)
     e32:	e0 e3       	ldi	r30, 0x30	; 48
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	86 95       	lsr	r24
     e3a:	86 95       	lsr	r24
     e3c:	86 95       	lsr	r24
     e3e:	88 2f       	mov	r24, r24
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	81 70       	andi	r24, 0x01	; 1
     e44:	90 70       	andi	r25, 0x00	; 0
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	09 f0       	breq	.+2      	; 0xe4c <Button_get_value+0x130>
     e4a:	a2 c1       	rjmp	.+836    	; 0x1190 <Button_get_value+0x474>
    		  ans=1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	89 af       	std	Y+57, r24	; 0x39
     e50:	9f c1       	rjmp	.+830    	; 0x1190 <Button_get_value+0x474>
    }
    else if(GET_BIT(Button_2_PIN,Button_2_PIN_N)==0){
     e52:	e0 e3       	ldi	r30, 0x30	; 48
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	82 95       	swap	r24
     e5a:	86 95       	lsr	r24
     e5c:	87 70       	andi	r24, 0x07	; 7
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	81 70       	andi	r24, 0x01	; 1
     e64:	90 70       	andi	r25, 0x00	; 0
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	09 f0       	breq	.+2      	; 0xe6c <Button_get_value+0x150>
     e6a:	82 c0       	rjmp	.+260    	; 0xf70 <Button_get_value+0x254>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a6 e1       	ldi	r26, 0x16	; 22
     e72:	b3 e4       	ldi	r27, 0x43	; 67
     e74:	8f a3       	std	Y+39, r24	; 0x27
     e76:	98 a7       	std	Y+40, r25	; 0x28
     e78:	a9 a7       	std	Y+41, r26	; 0x29
     e7a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7c:	6f a1       	ldd	r22, Y+39	; 0x27
     e7e:	78 a5       	ldd	r23, Y+40	; 0x28
     e80:	89 a5       	ldd	r24, Y+41	; 0x29
     e82:	9a a5       	ldd	r25, Y+42	; 0x2a
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	4a e7       	ldi	r20, 0x7A	; 122
     e8a:	55 e4       	ldi	r21, 0x45	; 69
     e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	8b a3       	std	Y+35, r24	; 0x23
     e96:	9c a3       	std	Y+36, r25	; 0x24
     e98:	ad a3       	std	Y+37, r26	; 0x25
     e9a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e9c:	6b a1       	ldd	r22, Y+35	; 0x23
     e9e:	7c a1       	ldd	r23, Y+36	; 0x24
     ea0:	8d a1       	ldd	r24, Y+37	; 0x25
     ea2:	9e a1       	ldd	r25, Y+38	; 0x26
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	40 e8       	ldi	r20, 0x80	; 128
     eaa:	5f e3       	ldi	r21, 0x3F	; 63
     eac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     eb0:	88 23       	and	r24, r24
     eb2:	2c f4       	brge	.+10     	; 0xebe <Button_get_value+0x1a2>
		__ticks = 1;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	9a a3       	std	Y+34, r25	; 0x22
     eba:	89 a3       	std	Y+33, r24	; 0x21
     ebc:	3f c0       	rjmp	.+126    	; 0xf3c <Button_get_value+0x220>
	else if (__tmp > 65535)
     ebe:	6b a1       	ldd	r22, Y+35	; 0x23
     ec0:	7c a1       	ldd	r23, Y+36	; 0x24
     ec2:	8d a1       	ldd	r24, Y+37	; 0x25
     ec4:	9e a1       	ldd	r25, Y+38	; 0x26
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	3f ef       	ldi	r19, 0xFF	; 255
     eca:	4f e7       	ldi	r20, 0x7F	; 127
     ecc:	57 e4       	ldi	r21, 0x47	; 71
     ece:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ed2:	18 16       	cp	r1, r24
     ed4:	4c f5       	brge	.+82     	; 0xf28 <Button_get_value+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed6:	6f a1       	ldd	r22, Y+39	; 0x27
     ed8:	78 a5       	ldd	r23, Y+40	; 0x28
     eda:	89 a5       	ldd	r24, Y+41	; 0x29
     edc:	9a a5       	ldd	r25, Y+42	; 0x2a
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e2       	ldi	r20, 0x20	; 32
     ee4:	51 e4       	ldi	r21, 0x41	; 65
     ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	bc 01       	movw	r22, r24
     ef0:	cd 01       	movw	r24, r26
     ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	9a a3       	std	Y+34, r25	; 0x22
     efc:	89 a3       	std	Y+33, r24	; 0x21
     efe:	0f c0       	rjmp	.+30     	; 0xf1e <Button_get_value+0x202>
     f00:	80 e9       	ldi	r24, 0x90	; 144
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	98 a3       	std	Y+32, r25	; 0x20
     f06:	8f 8f       	std	Y+31, r24	; 0x1f
     f08:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f0a:	98 a1       	ldd	r25, Y+32	; 0x20
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <Button_get_value+0x1f0>
     f10:	98 a3       	std	Y+32, r25	; 0x20
     f12:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f14:	89 a1       	ldd	r24, Y+33	; 0x21
     f16:	9a a1       	ldd	r25, Y+34	; 0x22
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	9a a3       	std	Y+34, r25	; 0x22
     f1c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1e:	89 a1       	ldd	r24, Y+33	; 0x21
     f20:	9a a1       	ldd	r25, Y+34	; 0x22
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	69 f7       	brne	.-38     	; 0xf00 <Button_get_value+0x1e4>
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <Button_get_value+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f28:	6b a1       	ldd	r22, Y+35	; 0x23
     f2a:	7c a1       	ldd	r23, Y+36	; 0x24
     f2c:	8d a1       	ldd	r24, Y+37	; 0x25
     f2e:	9e a1       	ldd	r25, Y+38	; 0x26
     f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	9a a3       	std	Y+34, r25	; 0x22
     f3a:	89 a3       	std	Y+33, r24	; 0x21
     f3c:	89 a1       	ldd	r24, Y+33	; 0x21
     f3e:	9a a1       	ldd	r25, Y+34	; 0x22
     f40:	9e 8f       	std	Y+30, r25	; 0x1e
     f42:	8d 8f       	std	Y+29, r24	; 0x1d
     f44:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f46:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <Button_get_value+0x22c>
     f4c:	9e 8f       	std	Y+30, r25	; 0x1e
     f4e:	8d 8f       	std	Y+29, r24	; 0x1d
  	  _delay_ms(150);
  	  if(GET_BIT(Button_2_PIN,Button_2_PIN_N)==0)
     f50:	e0 e3       	ldi	r30, 0x30	; 48
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	82 95       	swap	r24
     f58:	86 95       	lsr	r24
     f5a:	87 70       	andi	r24, 0x07	; 7
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	81 70       	andi	r24, 0x01	; 1
     f62:	90 70       	andi	r25, 0x00	; 0
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	09 f0       	breq	.+2      	; 0xf6a <Button_get_value+0x24e>
     f68:	13 c1       	rjmp	.+550    	; 0x1190 <Button_get_value+0x474>
  		  ans=2;
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	89 af       	std	Y+57, r24	; 0x39
     f6e:	10 c1       	rjmp	.+544    	; 0x1190 <Button_get_value+0x474>
    }
    else if(GET_BIT(Button_3_PIN,Button_3_PIN_N)==0){
     f70:	e0 e3       	ldi	r30, 0x30	; 48
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	82 95       	swap	r24
     f78:	86 95       	lsr	r24
     f7a:	86 95       	lsr	r24
     f7c:	83 70       	andi	r24, 0x03	; 3
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	81 70       	andi	r24, 0x01	; 1
     f84:	90 70       	andi	r25, 0x00	; 0
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	09 f0       	breq	.+2      	; 0xf8c <Button_get_value+0x270>
     f8a:	83 c0       	rjmp	.+262    	; 0x1092 <Button_get_value+0x376>
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	a6 e1       	ldi	r26, 0x16	; 22
     f92:	b3 e4       	ldi	r27, 0x43	; 67
     f94:	89 8f       	std	Y+25, r24	; 0x19
     f96:	9a 8f       	std	Y+26, r25	; 0x1a
     f98:	ab 8f       	std	Y+27, r26	; 0x1b
     f9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9c:	69 8d       	ldd	r22, Y+25	; 0x19
     f9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	4a e7       	ldi	r20, 0x7A	; 122
     faa:	55 e4       	ldi	r21, 0x45	; 69
     fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	8d 8b       	std	Y+21, r24	; 0x15
     fb6:	9e 8b       	std	Y+22, r25	; 0x16
     fb8:	af 8b       	std	Y+23, r26	; 0x17
     fba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fbc:	6d 89       	ldd	r22, Y+21	; 0x15
     fbe:	7e 89       	ldd	r23, Y+22	; 0x16
     fc0:	8f 89       	ldd	r24, Y+23	; 0x17
     fc2:	98 8d       	ldd	r25, Y+24	; 0x18
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e8       	ldi	r20, 0x80	; 128
     fca:	5f e3       	ldi	r21, 0x3F	; 63
     fcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fd0:	88 23       	and	r24, r24
     fd2:	2c f4       	brge	.+10     	; 0xfde <Button_get_value+0x2c2>
		__ticks = 1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	9c 8b       	std	Y+20, r25	; 0x14
     fda:	8b 8b       	std	Y+19, r24	; 0x13
     fdc:	3f c0       	rjmp	.+126    	; 0x105c <Button_get_value+0x340>
	else if (__tmp > 65535)
     fde:	6d 89       	ldd	r22, Y+21	; 0x15
     fe0:	7e 89       	ldd	r23, Y+22	; 0x16
     fe2:	8f 89       	ldd	r24, Y+23	; 0x17
     fe4:	98 8d       	ldd	r25, Y+24	; 0x18
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	3f ef       	ldi	r19, 0xFF	; 255
     fea:	4f e7       	ldi	r20, 0x7F	; 127
     fec:	57 e4       	ldi	r21, 0x47	; 71
     fee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ff2:	18 16       	cp	r1, r24
     ff4:	4c f5       	brge	.+82     	; 0x1048 <Button_get_value+0x32c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff6:	69 8d       	ldd	r22, Y+25	; 0x19
     ff8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ffa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ffc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e2       	ldi	r20, 0x20	; 32
    1004:	51 e4       	ldi	r21, 0x41	; 65
    1006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
    101e:	0f c0       	rjmp	.+30     	; 0x103e <Button_get_value+0x322>
    1020:	80 e9       	ldi	r24, 0x90	; 144
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	9a 8b       	std	Y+18, r25	; 0x12
    1026:	89 8b       	std	Y+17, r24	; 0x11
    1028:	89 89       	ldd	r24, Y+17	; 0x11
    102a:	9a 89       	ldd	r25, Y+18	; 0x12
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <Button_get_value+0x310>
    1030:	9a 8b       	std	Y+18, r25	; 0x12
    1032:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1034:	8b 89       	ldd	r24, Y+19	; 0x13
    1036:	9c 89       	ldd	r25, Y+20	; 0x14
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	9c 8b       	std	Y+20, r25	; 0x14
    103c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103e:	8b 89       	ldd	r24, Y+19	; 0x13
    1040:	9c 89       	ldd	r25, Y+20	; 0x14
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	69 f7       	brne	.-38     	; 0x1020 <Button_get_value+0x304>
    1046:	14 c0       	rjmp	.+40     	; 0x1070 <Button_get_value+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1048:	6d 89       	ldd	r22, Y+21	; 0x15
    104a:	7e 89       	ldd	r23, Y+22	; 0x16
    104c:	8f 89       	ldd	r24, Y+23	; 0x17
    104e:	98 8d       	ldd	r25, Y+24	; 0x18
    1050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9c 8b       	std	Y+20, r25	; 0x14
    105a:	8b 8b       	std	Y+19, r24	; 0x13
    105c:	8b 89       	ldd	r24, Y+19	; 0x13
    105e:	9c 89       	ldd	r25, Y+20	; 0x14
    1060:	98 8b       	std	Y+16, r25	; 0x10
    1062:	8f 87       	std	Y+15, r24	; 0x0f
    1064:	8f 85       	ldd	r24, Y+15	; 0x0f
    1066:	98 89       	ldd	r25, Y+16	; 0x10
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <Button_get_value+0x34c>
    106c:	98 8b       	std	Y+16, r25	; 0x10
    106e:	8f 87       	std	Y+15, r24	; 0x0f
  	  _delay_ms(150);
  	  if(GET_BIT(Button_3_PIN,Button_3_PIN_N)==0)
    1070:	e0 e3       	ldi	r30, 0x30	; 48
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	82 95       	swap	r24
    1078:	86 95       	lsr	r24
    107a:	86 95       	lsr	r24
    107c:	83 70       	andi	r24, 0x03	; 3
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	81 70       	andi	r24, 0x01	; 1
    1084:	90 70       	andi	r25, 0x00	; 0
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	09 f0       	breq	.+2      	; 0x108c <Button_get_value+0x370>
    108a:	82 c0       	rjmp	.+260    	; 0x1190 <Button_get_value+0x474>
  		  ans=3;
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	89 af       	std	Y+57, r24	; 0x39
    1090:	7f c0       	rjmp	.+254    	; 0x1190 <Button_get_value+0x474>
    }
    else if(GET_BIT(Button_4_PIN,Button_4_PIN_N)==0){
    1092:	e0 e3       	ldi	r30, 0x30	; 48
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	88 23       	and	r24, r24
    109a:	0c f4       	brge	.+2      	; 0x109e <Button_get_value+0x382>
    109c:	79 c0       	rjmp	.+242    	; 0x1190 <Button_get_value+0x474>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	a6 e1       	ldi	r26, 0x16	; 22
    10a4:	b3 e4       	ldi	r27, 0x43	; 67
    10a6:	8b 87       	std	Y+11, r24	; 0x0b
    10a8:	9c 87       	std	Y+12, r25	; 0x0c
    10aa:	ad 87       	std	Y+13, r26	; 0x0d
    10ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	4a e7       	ldi	r20, 0x7A	; 122
    10bc:	55 e4       	ldi	r21, 0x45	; 69
    10be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	8f 83       	std	Y+7, r24	; 0x07
    10c8:	98 87       	std	Y+8, r25	; 0x08
    10ca:	a9 87       	std	Y+9, r26	; 0x09
    10cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ce:	6f 81       	ldd	r22, Y+7	; 0x07
    10d0:	78 85       	ldd	r23, Y+8	; 0x08
    10d2:	89 85       	ldd	r24, Y+9	; 0x09
    10d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e8       	ldi	r20, 0x80	; 128
    10dc:	5f e3       	ldi	r21, 0x3F	; 63
    10de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10e2:	88 23       	and	r24, r24
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <Button_get_value+0x3d4>
		__ticks = 1;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
    10ee:	3f c0       	rjmp	.+126    	; 0x116e <Button_get_value+0x452>
	else if (__tmp > 65535)
    10f0:	6f 81       	ldd	r22, Y+7	; 0x07
    10f2:	78 85       	ldd	r23, Y+8	; 0x08
    10f4:	89 85       	ldd	r24, Y+9	; 0x09
    10f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	3f ef       	ldi	r19, 0xFF	; 255
    10fc:	4f e7       	ldi	r20, 0x7F	; 127
    10fe:	57 e4       	ldi	r21, 0x47	; 71
    1100:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1104:	18 16       	cp	r1, r24
    1106:	4c f5       	brge	.+82     	; 0x115a <Button_get_value+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1108:	6b 85       	ldd	r22, Y+11	; 0x0b
    110a:	7c 85       	ldd	r23, Y+12	; 0x0c
    110c:	8d 85       	ldd	r24, Y+13	; 0x0d
    110e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e2       	ldi	r20, 0x20	; 32
    1116:	51 e4       	ldi	r21, 0x41	; 65
    1118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	9e 83       	std	Y+6, r25	; 0x06
    112e:	8d 83       	std	Y+5, r24	; 0x05
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <Button_get_value+0x434>
    1132:	80 e9       	ldi	r24, 0x90	; 144
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	9c 83       	std	Y+4, r25	; 0x04
    1138:	8b 83       	std	Y+3, r24	; 0x03
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <Button_get_value+0x422>
    1142:	9c 83       	std	Y+4, r25	; 0x04
    1144:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	9e 81       	ldd	r25, Y+6	; 0x06
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	69 f7       	brne	.-38     	; 0x1132 <Button_get_value+0x416>
    1158:	14 c0       	rjmp	.+40     	; 0x1182 <Button_get_value+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115a:	6f 81       	ldd	r22, Y+7	; 0x07
    115c:	78 85       	ldd	r23, Y+8	; 0x08
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	9a 85       	ldd	r25, Y+10	; 0x0a
    1162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	9e 83       	std	Y+6, r25	; 0x06
    116c:	8d 83       	std	Y+5, r24	; 0x05
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <Button_get_value+0x45e>
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
  	  _delay_ms(150);
  	  if(GET_BIT(Button_4_PIN,Button_4_PIN_N)==0)
    1182:	e0 e3       	ldi	r30, 0x30	; 48
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	88 23       	and	r24, r24
    118a:	14 f0       	brlt	.+4      	; 0x1190 <Button_get_value+0x474>
  		  ans=4;
    118c:	84 e0       	ldi	r24, 0x04	; 4
    118e:	89 af       	std	Y+57, r24	; 0x39
    }

return ans;
    1190:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1192:	e9 96       	adiw	r28, 0x39	; 57
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <__vector_2>:
#define ISC10 2
#define INT1  7*/

void (*g_CallBackPtr)(void)=NULL_PTR;

ISR (INT1_vect){
    11a4:	1f 92       	push	r1
    11a6:	0f 92       	push	r0
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	0f 92       	push	r0
    11ac:	11 24       	eor	r1, r1
    11ae:	2f 93       	push	r18
    11b0:	3f 93       	push	r19
    11b2:	4f 93       	push	r20
    11b4:	5f 93       	push	r21
    11b6:	6f 93       	push	r22
    11b8:	7f 93       	push	r23
    11ba:	8f 93       	push	r24
    11bc:	9f 93       	push	r25
    11be:	af 93       	push	r26
    11c0:	bf 93       	push	r27
    11c2:	ef 93       	push	r30
    11c4:	ff 93       	push	r31
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr!= NULL_PTR){
    11ce:	80 91 9a 00 	lds	r24, 0x009A
    11d2:	90 91 9b 00 	lds	r25, 0x009B
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	29 f0       	breq	.+10     	; 0x11e4 <__vector_2+0x40>
		(*g_CallBackPtr)();
    11da:	e0 91 9a 00 	lds	r30, 0x009A
    11de:	f0 91 9b 00 	lds	r31, 0x009B
    11e2:	09 95       	icall
	}
}
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	ff 91       	pop	r31
    11ea:	ef 91       	pop	r30
    11ec:	bf 91       	pop	r27
    11ee:	af 91       	pop	r26
    11f0:	9f 91       	pop	r25
    11f2:	8f 91       	pop	r24
    11f4:	7f 91       	pop	r23
    11f6:	6f 91       	pop	r22
    11f8:	5f 91       	pop	r21
    11fa:	4f 91       	pop	r20
    11fc:	3f 91       	pop	r19
    11fe:	2f 91       	pop	r18
    1200:	0f 90       	pop	r0
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	0f 90       	pop	r0
    1206:	1f 90       	pop	r1
    1208:	18 95       	reti

0000120a <INT_Iint>:

void INT_Iint(void){
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , I_BIT);
    1212:	af e5       	ldi	r26, 0x5F	; 95
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	ef e5       	ldi	r30, 0x5F	; 95
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	8f 77       	andi	r24, 0x7F	; 127
    121e:	8c 93       	st	X, r24
	CLR_BIT(DDRD , 3);
    1220:	a1 e3       	ldi	r26, 0x31	; 49
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e1 e3       	ldi	r30, 0x31	; 49
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	87 7f       	andi	r24, 0xF7	; 247
    122c:	8c 93       	st	X, r24
	SET_BIT(PORTD ,3);
    122e:	a2 e3       	ldi	r26, 0x32	; 50
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e2 e3       	ldi	r30, 0x32	; 50
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	88 60       	ori	r24, 0x08	; 8
    123a:	8c 93       	st	X, r24
	SET_BIT(GICR , INT1);
    123c:	ab e5       	ldi	r26, 0x5B	; 91
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	eb e5       	ldi	r30, 0x5B	; 91
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	80 68       	ori	r24, 0x80	; 128
    1248:	8c 93       	st	X, r24
	SET_BIT(MCUCR , ISC11);
    124a:	a5 e5       	ldi	r26, 0x55	; 85
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e5 e5       	ldi	r30, 0x55	; 85
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	88 60       	ori	r24, 0x08	; 8
    1256:	8c 93       	st	X, r24
	CLR_BIT(MCUCR , ISC10);
    1258:	a5 e5       	ldi	r26, 0x55	; 85
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e5 e5       	ldi	r30, 0x55	; 85
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	8b 7f       	andi	r24, 0xFB	; 251
    1264:	8c 93       	st	X, r24
	SET_BIT(SREG , I_BIT);
    1266:	af e5       	ldi	r26, 0x5F	; 95
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	ef e5       	ldi	r30, 0x5F	; 95
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	80 68       	ori	r24, 0x80	; 128
    1272:	8c 93       	st	X, r24
}
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <INT_SET_CallBack>:

void INT_SET_CallBack(void(*a_ptr)(void)){
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <INT_SET_CallBack+0x6>
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	9a 83       	std	Y+2, r25	; 0x02
    1286:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr = a_ptr;
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	90 93 9b 00 	sts	0x009B, r25
    1290:	80 93 9a 00 	sts	0x009A, r24
}
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <keypad_init>:
                               {8,9,10,11},
							   {12,13,14,15}};


void keypad_init()
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(DDRD,7);
    12a6:	a1 e3       	ldi	r26, 0x31	; 49
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e1 e3       	ldi	r30, 0x31	; 49
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 77       	andi	r24, 0x7F	; 127
    12b2:	8c 93       	st	X, r24
	CLR_BIT(DDRD,6);
    12b4:	a1 e3       	ldi	r26, 0x31	; 49
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e1 e3       	ldi	r30, 0x31	; 49
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8f 7b       	andi	r24, 0xBF	; 191
    12c0:	8c 93       	st	X, r24
	CLR_BIT(DDRD,5);
    12c2:	a1 e3       	ldi	r26, 0x31	; 49
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e1 e3       	ldi	r30, 0x31	; 49
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8f 7d       	andi	r24, 0xDF	; 223
    12ce:	8c 93       	st	X, r24
	CLR_BIT(DDRD,3);
    12d0:	a1 e3       	ldi	r26, 0x31	; 49
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e1 e3       	ldi	r30, 0x31	; 49
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	87 7f       	andi	r24, 0xF7	; 247
    12dc:	8c 93       	st	X, r24

	SET_BIT(DDRC,5);
    12de:	a4 e3       	ldi	r26, 0x34	; 52
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e4 e3       	ldi	r30, 0x34	; 52
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	80 62       	ori	r24, 0x20	; 32
    12ea:	8c 93       	st	X, r24
	SET_BIT(DDRC,4);
    12ec:	a4 e3       	ldi	r26, 0x34	; 52
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e4 e3       	ldi	r30, 0x34	; 52
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	80 61       	ori	r24, 0x10	; 16
    12f8:	8c 93       	st	X, r24
	SET_BIT(DDRC,3);
    12fa:	a4 e3       	ldi	r26, 0x34	; 52
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e4 e3       	ldi	r30, 0x34	; 52
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	88 60       	ori	r24, 0x08	; 8
    1306:	8c 93       	st	X, r24
	SET_BIT(DDRC,2);
    1308:	a4 e3       	ldi	r26, 0x34	; 52
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e4 e3       	ldi	r30, 0x34	; 52
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	84 60       	ori	r24, 0x04	; 4
    1314:	8c 93       	st	X, r24

	SET_BIT(PORTD,7);
    1316:	a2 e3       	ldi	r26, 0x32	; 50
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e2 e3       	ldi	r30, 0x32	; 50
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	80 68       	ori	r24, 0x80	; 128
    1322:	8c 93       	st	X, r24
	SET_BIT(PORTD,6);
    1324:	a2 e3       	ldi	r26, 0x32	; 50
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e2 e3       	ldi	r30, 0x32	; 50
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	80 64       	ori	r24, 0x40	; 64
    1330:	8c 93       	st	X, r24
	SET_BIT(PORTD,5);
    1332:	a2 e3       	ldi	r26, 0x32	; 50
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e2 e3       	ldi	r30, 0x32	; 50
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	80 62       	ori	r24, 0x20	; 32
    133e:	8c 93       	st	X, r24
	SET_BIT(PORTD,3);
    1340:	a2 e3       	ldi	r26, 0x32	; 50
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e2 e3       	ldi	r30, 0x32	; 50
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	88 60       	ori	r24, 0x08	; 8
    134c:	8c 93       	st	X, r24

}
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <keypad_get_value>:

unsigned char keypad_get_value()
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	6f 97       	sbiw	r28, 0x1f	; 31
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
	unsigned char col,row,ans=INVALID_KEYPAD_PRESS;
    1368:	8f ef       	ldi	r24, 0xFF	; 255
    136a:	8d 8f       	std	Y+29, r24	; 0x1d

 for(row=5;row>=2;row--){
    136c:	85 e0       	ldi	r24, 0x05	; 5
    136e:	8e 8f       	std	Y+30, r24	; 0x1e
    1370:	07 c1       	rjmp	.+526    	; 0x1580 <keypad_get_value+0x22c>

     PORTC |= 0b00111100;
    1372:	a5 e3       	ldi	r26, 0x35	; 53
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e5 e3       	ldi	r30, 0x35	; 53
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	8c 63       	ori	r24, 0x3C	; 60
    137e:	8c 93       	st	X, r24
     CLR_BIT(PORTC,row);
    1380:	a5 e3       	ldi	r26, 0x35	; 53
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e5 e3       	ldi	r30, 0x35	; 53
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <keypad_get_value+0x4a>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <keypad_get_value+0x46>
    13a2:	80 95       	com	r24
    13a4:	84 23       	and	r24, r20
    13a6:	8c 93       	st	X, r24
     for(col=7;col>=3;col--){
    13a8:	87 e0       	ldi	r24, 0x07	; 7
    13aa:	8f 8f       	std	Y+31, r24	; 0x1f
    13ac:	e2 c0       	rjmp	.+452    	; 0x1572 <keypad_get_value+0x21e>
      if(col==4)
    13ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13b0:	84 30       	cpi	r24, 0x04	; 4
    13b2:	19 f4       	brne	.+6      	; 0x13ba <keypad_get_value+0x66>
      col--;
    13b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13b6:	81 50       	subi	r24, 0x01	; 1
    13b8:	8f 8f       	std	Y+31, r24	; 0x1f
      if(GET_BIT(PIND,col)==0){
    13ba:	e0 e3       	ldi	r30, 0x30	; 48
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a9 01       	movw	r20, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <keypad_get_value+0x7e>
    13ce:	55 95       	asr	r21
    13d0:	47 95       	ror	r20
    13d2:	8a 95       	dec	r24
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <keypad_get_value+0x7a>
    13d6:	ca 01       	movw	r24, r20
    13d8:	81 70       	andi	r24, 0x01	; 1
    13da:	90 70       	andi	r25, 0x00	; 0
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	09 f0       	breq	.+2      	; 0x13e2 <keypad_get_value+0x8e>
    13e0:	c5 c0       	rjmp	.+394    	; 0x156c <keypad_get_value+0x218>
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	a6 e1       	ldi	r26, 0x16	; 22
    13e8:	b3 e4       	ldi	r27, 0x43	; 67
    13ea:	89 8f       	std	Y+25, r24	; 0x19
    13ec:	9a 8f       	std	Y+26, r25	; 0x1a
    13ee:	ab 8f       	std	Y+27, r26	; 0x1b
    13f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f2:	69 8d       	ldd	r22, Y+25	; 0x19
    13f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	4a e7       	ldi	r20, 0x7A	; 122
    1400:	55 e4       	ldi	r21, 0x45	; 69
    1402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	8d 8b       	std	Y+21, r24	; 0x15
    140c:	9e 8b       	std	Y+22, r25	; 0x16
    140e:	af 8b       	std	Y+23, r26	; 0x17
    1410:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1412:	6d 89       	ldd	r22, Y+21	; 0x15
    1414:	7e 89       	ldd	r23, Y+22	; 0x16
    1416:	8f 89       	ldd	r24, Y+23	; 0x17
    1418:	98 8d       	ldd	r25, Y+24	; 0x18
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e8       	ldi	r20, 0x80	; 128
    1420:	5f e3       	ldi	r21, 0x3F	; 63
    1422:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1426:	88 23       	and	r24, r24
    1428:	2c f4       	brge	.+10     	; 0x1434 <keypad_get_value+0xe0>
		__ticks = 1;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	9c 8b       	std	Y+20, r25	; 0x14
    1430:	8b 8b       	std	Y+19, r24	; 0x13
    1432:	3f c0       	rjmp	.+126    	; 0x14b2 <keypad_get_value+0x15e>
	else if (__tmp > 65535)
    1434:	6d 89       	ldd	r22, Y+21	; 0x15
    1436:	7e 89       	ldd	r23, Y+22	; 0x16
    1438:	8f 89       	ldd	r24, Y+23	; 0x17
    143a:	98 8d       	ldd	r25, Y+24	; 0x18
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	3f ef       	ldi	r19, 0xFF	; 255
    1440:	4f e7       	ldi	r20, 0x7F	; 127
    1442:	57 e4       	ldi	r21, 0x47	; 71
    1444:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1448:	18 16       	cp	r1, r24
    144a:	4c f5       	brge	.+82     	; 0x149e <keypad_get_value+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144c:	69 8d       	ldd	r22, Y+25	; 0x19
    144e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1450:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1452:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e2       	ldi	r20, 0x20	; 32
    145a:	51 e4       	ldi	r21, 0x41	; 65
    145c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	bc 01       	movw	r22, r24
    1466:	cd 01       	movw	r24, r26
    1468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	9c 8b       	std	Y+20, r25	; 0x14
    1472:	8b 8b       	std	Y+19, r24	; 0x13
    1474:	0f c0       	rjmp	.+30     	; 0x1494 <keypad_get_value+0x140>
    1476:	80 e9       	ldi	r24, 0x90	; 144
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	9a 8b       	std	Y+18, r25	; 0x12
    147c:	89 8b       	std	Y+17, r24	; 0x11
    147e:	89 89       	ldd	r24, Y+17	; 0x11
    1480:	9a 89       	ldd	r25, Y+18	; 0x12
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <keypad_get_value+0x12e>
    1486:	9a 8b       	std	Y+18, r25	; 0x12
    1488:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148a:	8b 89       	ldd	r24, Y+19	; 0x13
    148c:	9c 89       	ldd	r25, Y+20	; 0x14
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	9c 8b       	std	Y+20, r25	; 0x14
    1492:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1494:	8b 89       	ldd	r24, Y+19	; 0x13
    1496:	9c 89       	ldd	r25, Y+20	; 0x14
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	69 f7       	brne	.-38     	; 0x1476 <keypad_get_value+0x122>
    149c:	14 c0       	rjmp	.+40     	; 0x14c6 <keypad_get_value+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149e:	6d 89       	ldd	r22, Y+21	; 0x15
    14a0:	7e 89       	ldd	r23, Y+22	; 0x16
    14a2:	8f 89       	ldd	r24, Y+23	; 0x17
    14a4:	98 8d       	ldd	r25, Y+24	; 0x18
    14a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	9c 8b       	std	Y+20, r25	; 0x14
    14b0:	8b 8b       	std	Y+19, r24	; 0x13
    14b2:	8b 89       	ldd	r24, Y+19	; 0x13
    14b4:	9c 89       	ldd	r25, Y+20	; 0x14
    14b6:	98 8b       	std	Y+16, r25	; 0x10
    14b8:	8f 87       	std	Y+15, r24	; 0x0f
    14ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    14bc:	98 89       	ldd	r25, Y+16	; 0x10
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	f1 f7       	brne	.-4      	; 0x14be <keypad_get_value+0x16a>
    14c2:	98 8b       	std	Y+16, r25	; 0x10
    14c4:	8f 87       	std	Y+15, r24	; 0x0f
    	  _delay_ms(150);
    	  if(GET_BIT(PIND,col)==0){
    14c6:	e0 e3       	ldi	r30, 0x30	; 48
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	b9 01       	movw	r22, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <keypad_get_value+0x18a>
    14da:	75 95       	asr	r23
    14dc:	67 95       	ror	r22
    14de:	8a 95       	dec	r24
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <keypad_get_value+0x186>
    14e2:	cb 01       	movw	r24, r22
    14e4:	81 70       	andi	r24, 0x01	; 1
    14e6:	90 70       	andi	r25, 0x00	; 0
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	09 f0       	breq	.+2      	; 0x14ee <keypad_get_value+0x19a>
    14ec:	3f c0       	rjmp	.+126    	; 0x156c <keypad_get_value+0x218>
    		  if(col==3){
    14ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14f0:	83 30       	cpi	r24, 0x03	; 3
    14f2:	f1 f4       	brne	.+60     	; 0x1530 <keypad_get_value+0x1dc>
    			  ans=arr[5-row][7-col-1];
    14f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	85 e0       	ldi	r24, 0x05	; 5
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	ac 01       	movw	r20, r24
    1500:	42 1b       	sub	r20, r18
    1502:	53 0b       	sbc	r21, r19
    1504:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	86 e0       	ldi	r24, 0x06	; 6
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	bc 01       	movw	r22, r24
    1510:	62 1b       	sub	r22, r18
    1512:	73 0b       	sbc	r23, r19
    1514:	9b 01       	movw	r18, r22
    1516:	ca 01       	movw	r24, r20
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	82 0f       	add	r24, r18
    1522:	93 1f       	adc	r25, r19
    1524:	fc 01       	movw	r30, r24
    1526:	e6 57       	subi	r30, 0x76	; 118
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	80 81       	ld	r24, Z
    152c:	8d 8f       	std	Y+29, r24	; 0x1d
    152e:	25 c0       	rjmp	.+74     	; 0x157a <keypad_get_value+0x226>
    			  break;
    		  }
    		  else{
    			  ans=arr[5-row][7-col];
    1530:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	85 e0       	ldi	r24, 0x05	; 5
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	ac 01       	movw	r20, r24
    153c:	42 1b       	sub	r20, r18
    153e:	53 0b       	sbc	r21, r19
    1540:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	87 e0       	ldi	r24, 0x07	; 7
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	bc 01       	movw	r22, r24
    154c:	62 1b       	sub	r22, r18
    154e:	73 0b       	sbc	r23, r19
    1550:	9b 01       	movw	r18, r22
    1552:	ca 01       	movw	r24, r20
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	82 0f       	add	r24, r18
    155e:	93 1f       	adc	r25, r19
    1560:	fc 01       	movw	r30, r24
    1562:	e6 57       	subi	r30, 0x76	; 118
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	80 81       	ld	r24, Z
    1568:	8d 8f       	std	Y+29, r24	; 0x1d
    156a:	07 c0       	rjmp	.+14     	; 0x157a <keypad_get_value+0x226>

 for(row=5;row>=2;row--){

     PORTC |= 0b00111100;
     CLR_BIT(PORTC,row);
     for(col=7;col>=3;col--){
    156c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    156e:	81 50       	subi	r24, 0x01	; 1
    1570:	8f 8f       	std	Y+31, r24	; 0x1f
    1572:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	08 f0       	brcs	.+2      	; 0x157a <keypad_get_value+0x226>
    1578:	1a cf       	rjmp	.-460    	; 0x13ae <keypad_get_value+0x5a>

unsigned char keypad_get_value()
{
	unsigned char col,row,ans=INVALID_KEYPAD_PRESS;

 for(row=5;row>=2;row--){
    157a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    157c:	81 50       	subi	r24, 0x01	; 1
    157e:	8e 8f       	std	Y+30, r24	; 0x1e
    1580:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1582:	82 30       	cpi	r24, 0x02	; 2
    1584:	08 f0       	brcs	.+2      	; 0x1588 <keypad_get_value+0x234>
    1586:	f5 ce       	rjmp	.-534    	; 0x1372 <keypad_get_value+0x1e>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a8 ec       	ldi	r26, 0xC8	; 200
    158e:	b2 e4       	ldi	r27, 0x42	; 66
    1590:	8b 87       	std	Y+11, r24	; 0x0b
    1592:	9c 87       	std	Y+12, r25	; 0x0c
    1594:	ad 87       	std	Y+13, r26	; 0x0d
    1596:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1598:	6b 85       	ldd	r22, Y+11	; 0x0b
    159a:	7c 85       	ldd	r23, Y+12	; 0x0c
    159c:	8d 85       	ldd	r24, Y+13	; 0x0d
    159e:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	4a e7       	ldi	r20, 0x7A	; 122
    15a6:	55 e4       	ldi	r21, 0x45	; 69
    15a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	8f 83       	std	Y+7, r24	; 0x07
    15b2:	98 87       	std	Y+8, r25	; 0x08
    15b4:	a9 87       	std	Y+9, r26	; 0x09
    15b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15b8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ba:	78 85       	ldd	r23, Y+8	; 0x08
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	2c f4       	brge	.+10     	; 0x15da <keypad_get_value+0x286>
		__ticks = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	9e 83       	std	Y+6, r25	; 0x06
    15d6:	8d 83       	std	Y+5, r24	; 0x05
    15d8:	3f c0       	rjmp	.+126    	; 0x1658 <keypad_get_value+0x304>
	else if (__tmp > 65535)
    15da:	6f 81       	ldd	r22, Y+7	; 0x07
    15dc:	78 85       	ldd	r23, Y+8	; 0x08
    15de:	89 85       	ldd	r24, Y+9	; 0x09
    15e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	3f ef       	ldi	r19, 0xFF	; 255
    15e6:	4f e7       	ldi	r20, 0x7F	; 127
    15e8:	57 e4       	ldi	r21, 0x47	; 71
    15ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	4c f5       	brge	.+82     	; 0x1644 <keypad_get_value+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e2       	ldi	r20, 0x20	; 32
    1600:	51 e4       	ldi	r21, 0x41	; 65
    1602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	0f c0       	rjmp	.+30     	; 0x163a <keypad_get_value+0x2e6>
    161c:	80 e9       	ldi	r24, 0x90	; 144
    161e:	91 e0       	ldi	r25, 0x01	; 1
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	8b 83       	std	Y+3, r24	; 0x03
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <keypad_get_value+0x2d4>
    162c:	9c 83       	std	Y+4, r25	; 0x04
    162e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	9e 81       	ldd	r25, Y+6	; 0x06
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	9e 83       	std	Y+6, r25	; 0x06
    1638:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	69 f7       	brne	.-38     	; 0x161c <keypad_get_value+0x2c8>
    1642:	14 c0       	rjmp	.+40     	; 0x166c <keypad_get_value+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1644:	6f 81       	ldd	r22, Y+7	; 0x07
    1646:	78 85       	ldd	r23, Y+8	; 0x08
    1648:	89 85       	ldd	r24, Y+9	; 0x09
    164a:	9a 85       	ldd	r25, Y+10	; 0x0a
    164c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	9e 83       	std	Y+6, r25	; 0x06
    1656:	8d 83       	std	Y+5, r24	; 0x05
    1658:	8d 81       	ldd	r24, Y+5	; 0x05
    165a:	9e 81       	ldd	r25, Y+6	; 0x06
    165c:	9a 83       	std	Y+2, r25	; 0x02
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	9a 81       	ldd	r25, Y+2	; 0x02
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <keypad_get_value+0x310>
    1668:	9a 83       	std	Y+2, r25	; 0x02
    166a:	89 83       	std	Y+1, r24	; 0x01
      }
     }
}
}
  _delay_ms(100);
return ans;
    166c:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    166e:	6f 96       	adiw	r28, 0x1f	; 31
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <LCD_Init>:
 */ 

#include "LCD.h"
#define SET_CURSOR_LOCATION (0X80)

void LCD_Init (void){
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	2e 97       	sbiw	r28, 0x0e	; 14
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
	LCD_Data_Dir |= 0b00010111;
    1694:	a7 e3       	ldi	r26, 0x37	; 55
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e7 e3       	ldi	r30, 0x37	; 55
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	87 61       	ori	r24, 0x17	; 23
    16a0:	8c 93       	st	X, r24
	LCD_Command_Dir |= (1<< RS) | (1<< EN);
    16a2:	aa e3       	ldi	r26, 0x3A	; 58
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	ea e3       	ldi	r30, 0x3A	; 58
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	8c 60       	ori	r24, 0x0C	; 12
    16ae:	8c 93       	st	X, r24
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	a0 e7       	ldi	r26, 0x70	; 112
    16b6:	b1 e4       	ldi	r27, 0x41	; 65
    16b8:	8b 87       	std	Y+11, r24	; 0x0b
    16ba:	9c 87       	std	Y+12, r25	; 0x0c
    16bc:	ad 87       	std	Y+13, r26	; 0x0d
    16be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	4a e7       	ldi	r20, 0x7A	; 122
    16ce:	55 e4       	ldi	r21, 0x45	; 69
    16d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	8f 83       	std	Y+7, r24	; 0x07
    16da:	98 87       	std	Y+8, r25	; 0x08
    16dc:	a9 87       	std	Y+9, r26	; 0x09
    16de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16e0:	6f 81       	ldd	r22, Y+7	; 0x07
    16e2:	78 85       	ldd	r23, Y+8	; 0x08
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e8       	ldi	r20, 0x80	; 128
    16ee:	5f e3       	ldi	r21, 0x3F	; 63
    16f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16f4:	88 23       	and	r24, r24
    16f6:	2c f4       	brge	.+10     	; 0x1702 <LCD_Init+0x82>
		__ticks = 1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	3f c0       	rjmp	.+126    	; 0x1780 <LCD_Init+0x100>
	else if (__tmp > 65535)
    1702:	6f 81       	ldd	r22, Y+7	; 0x07
    1704:	78 85       	ldd	r23, Y+8	; 0x08
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	9a 85       	ldd	r25, Y+10	; 0x0a
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	3f ef       	ldi	r19, 0xFF	; 255
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	57 e4       	ldi	r21, 0x47	; 71
    1712:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1716:	18 16       	cp	r1, r24
    1718:	4c f5       	brge	.+82     	; 0x176c <LCD_Init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171a:	6b 85       	ldd	r22, Y+11	; 0x0b
    171c:	7c 85       	ldd	r23, Y+12	; 0x0c
    171e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1720:	9e 85       	ldd	r25, Y+14	; 0x0e
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e2       	ldi	r20, 0x20	; 32
    1728:	51 e4       	ldi	r21, 0x41	; 65
    172a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	0f c0       	rjmp	.+30     	; 0x1762 <LCD_Init+0xe2>
    1744:	80 e9       	ldi	r24, 0x90	; 144
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	9c 83       	std	Y+4, r25	; 0x04
    174a:	8b 83       	std	Y+3, r24	; 0x03
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <LCD_Init+0xd0>
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	9e 81       	ldd	r25, Y+6	; 0x06
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	69 f7       	brne	.-38     	; 0x1744 <LCD_Init+0xc4>
    176a:	14 c0       	rjmp	.+40     	; 0x1794 <LCD_Init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176c:	6f 81       	ldd	r22, Y+7	; 0x07
    176e:	78 85       	ldd	r23, Y+8	; 0x08
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	9a 85       	ldd	r25, Y+10	; 0x0a
    1774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	9e 83       	std	Y+6, r25	; 0x06
    177e:	8d 83       	std	Y+5, r24	; 0x05
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	9a 81       	ldd	r25, Y+2	; 0x02
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <LCD_Init+0x10c>
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(15);
	LCD_Command(0x02);
    1794:	82 e0       	ldi	r24, 0x02	; 2
    1796:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_Command>
	LCD_Command(0x28);
    179a:	88 e2       	ldi	r24, 0x28	; 40
    179c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_Command>
	LCD_Command(0x0C);
    17a0:	8c e0       	ldi	r24, 0x0C	; 12
    17a2:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_Command>
	LCD_Command(0x06);
    17a6:	86 e0       	ldi	r24, 0x06	; 6
    17a8:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_Command>
	LCD_Command(0x01);
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_Command>
	LCD_Command(0x80);
    17b2:	80 e8       	ldi	r24, 0x80	; 128
    17b4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_Command>
}
    17b8:	2e 96       	adiw	r28, 0x0e	; 14
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <LCD_Command>:

void LCD_Command(unsigned char cmd)
{
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	cd 54       	subi	r28, 0x4D	; 77
    17d8:	d0 40       	sbci	r29, 0x00	; 0
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	fe 01       	movw	r30, r28
    17e6:	e3 5b       	subi	r30, 0xB3	; 179
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	80 83       	st	Z, r24
	PORTB &= 0b11101000;
    17ec:	a8 e3       	ldi	r26, 0x38	; 56
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e8 e3       	ldi	r30, 0x38	; 56
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	88 7e       	andi	r24, 0xE8	; 232
    17f8:	8c 93       	st	X, r24
	PORTB |= (((((cmd&0xF0) >> 4) & 0b00001000) << 1) | (((cmd&0xF0) >> 4) & 0b00000111));
    17fa:	a8 e3       	ldi	r26, 0x38	; 56
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e8 e3       	ldi	r30, 0x38	; 56
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	28 2f       	mov	r18, r24
    1806:	fe 01       	movw	r30, r28
    1808:	e3 5b       	subi	r30, 0xB3	; 179
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	80 81       	ld	r24, Z
    180e:	82 95       	swap	r24
    1810:	8f 70       	andi	r24, 0x0F	; 15
    1812:	88 2f       	mov	r24, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	88 70       	andi	r24, 0x08	; 8
    1818:	90 70       	andi	r25, 0x00	; 0
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	98 2f       	mov	r25, r24
    1820:	fe 01       	movw	r30, r28
    1822:	e3 5b       	subi	r30, 0xB3	; 179
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	80 81       	ld	r24, Z
    1828:	82 95       	swap	r24
    182a:	8f 70       	andi	r24, 0x0F	; 15
    182c:	87 70       	andi	r24, 0x07	; 7
    182e:	89 2b       	or	r24, r25
    1830:	82 2b       	or	r24, r18
    1832:	8c 93       	st	X, r24
	CLR_BIT(LCD_Command_Port , RS);
    1834:	ab e3       	ldi	r26, 0x3B	; 59
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	eb e3       	ldi	r30, 0x3B	; 59
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	87 7f       	andi	r24, 0xF7	; 247
    1840:	8c 93       	st	X, r24
	SET_BIT(LCD_Command_Port , EN);
    1842:	ab e3       	ldi	r26, 0x3B	; 59
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	eb e3       	ldi	r30, 0x3B	; 59
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	84 60       	ori	r24, 0x04	; 4
    184e:	8c 93       	st	X, r24
    1850:	fe 01       	movw	r30, r28
    1852:	e7 5b       	subi	r30, 0xB7	; 183
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	a0 e8       	ldi	r26, 0x80	; 128
    185c:	bf e3       	ldi	r27, 0x3F	; 63
    185e:	80 83       	st	Z, r24
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	a2 83       	std	Z+2, r26	; 0x02
    1864:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1866:	8e 01       	movw	r16, r28
    1868:	0b 5b       	subi	r16, 0xBB	; 187
    186a:	1f 4f       	sbci	r17, 0xFF	; 255
    186c:	fe 01       	movw	r30, r28
    186e:	e7 5b       	subi	r30, 0xB7	; 183
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	60 81       	ld	r22, Z
    1874:	71 81       	ldd	r23, Z+1	; 0x01
    1876:	82 81       	ldd	r24, Z+2	; 0x02
    1878:	93 81       	ldd	r25, Z+3	; 0x03
    187a:	2b ea       	ldi	r18, 0xAB	; 171
    187c:	3a ea       	ldi	r19, 0xAA	; 170
    187e:	4a ea       	ldi	r20, 0xAA	; 170
    1880:	50 e4       	ldi	r21, 0x40	; 64
    1882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	f8 01       	movw	r30, r16
    188c:	80 83       	st	Z, r24
    188e:	91 83       	std	Z+1, r25	; 0x01
    1890:	a2 83       	std	Z+2, r26	; 0x02
    1892:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1894:	fe 01       	movw	r30, r28
    1896:	eb 5b       	subi	r30, 0xBB	; 187
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	60 81       	ld	r22, Z
    189c:	71 81       	ldd	r23, Z+1	; 0x01
    189e:	82 81       	ldd	r24, Z+2	; 0x02
    18a0:	93 81       	ldd	r25, Z+3	; 0x03
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e8       	ldi	r20, 0x80	; 128
    18a8:	5f e3       	ldi	r21, 0x3F	; 63
    18aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ae:	88 23       	and	r24, r24
    18b0:	34 f4       	brge	.+12     	; 0x18be <LCD_Command+0xf4>
		__ticks = 1;
    18b2:	fe 01       	movw	r30, r28
    18b4:	ec 5b       	subi	r30, 0xBC	; 188
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	80 83       	st	Z, r24
    18bc:	a7 c0       	rjmp	.+334    	; 0x1a0c <LCD_Command+0x242>
	else if (__tmp > 255)
    18be:	fe 01       	movw	r30, r28
    18c0:	eb 5b       	subi	r30, 0xBB	; 187
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	60 81       	ld	r22, Z
    18c6:	71 81       	ldd	r23, Z+1	; 0x01
    18c8:	82 81       	ldd	r24, Z+2	; 0x02
    18ca:	93 81       	ldd	r25, Z+3	; 0x03
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	4f e7       	ldi	r20, 0x7F	; 127
    18d2:	53 e4       	ldi	r21, 0x43	; 67
    18d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18d8:	18 16       	cp	r1, r24
    18da:	0c f0       	brlt	.+2      	; 0x18de <LCD_Command+0x114>
    18dc:	87 c0       	rjmp	.+270    	; 0x19ec <LCD_Command+0x222>
	{
		_delay_ms(__us / 1000.0);
    18de:	fe 01       	movw	r30, r28
    18e0:	e7 5b       	subi	r30, 0xB7	; 183
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	60 81       	ld	r22, Z
    18e6:	71 81       	ldd	r23, Z+1	; 0x01
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	4a e7       	ldi	r20, 0x7A	; 122
    18f2:	54 e4       	ldi	r21, 0x44	; 68
    18f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	fe 01       	movw	r30, r28
    18fe:	e0 5c       	subi	r30, 0xC0	; 192
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	80 83       	st	Z, r24
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	a2 83       	std	Z+2, r26	; 0x02
    1908:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190a:	fe 01       	movw	r30, r28
    190c:	e0 5c       	subi	r30, 0xC0	; 192
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	4a e7       	ldi	r20, 0x7A	; 122
    191e:	55 e4       	ldi	r21, 0x45	; 69
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	8c af       	std	Y+60, r24	; 0x3c
    192a:	9d af       	std	Y+61, r25	; 0x3d
    192c:	ae af       	std	Y+62, r26	; 0x3e
    192e:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    1930:	6c ad       	ldd	r22, Y+60	; 0x3c
    1932:	7d ad       	ldd	r23, Y+61	; 0x3d
    1934:	8e ad       	ldd	r24, Y+62	; 0x3e
    1936:	9f ad       	ldd	r25, Y+63	; 0x3f
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e8       	ldi	r20, 0x80	; 128
    193e:	5f e3       	ldi	r21, 0x3F	; 63
    1940:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1944:	88 23       	and	r24, r24
    1946:	2c f4       	brge	.+10     	; 0x1952 <LCD_Command+0x188>
		__ticks = 1;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9b af       	std	Y+59, r25	; 0x3b
    194e:	8a af       	std	Y+58, r24	; 0x3a
    1950:	42 c0       	rjmp	.+132    	; 0x19d6 <LCD_Command+0x20c>
	else if (__tmp > 65535)
    1952:	6c ad       	ldd	r22, Y+60	; 0x3c
    1954:	7d ad       	ldd	r23, Y+61	; 0x3d
    1956:	8e ad       	ldd	r24, Y+62	; 0x3e
    1958:	9f ad       	ldd	r25, Y+63	; 0x3f
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	3f ef       	ldi	r19, 0xFF	; 255
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	57 e4       	ldi	r21, 0x47	; 71
    1962:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1966:	18 16       	cp	r1, r24
    1968:	64 f5       	brge	.+88     	; 0x19c2 <LCD_Command+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196a:	fe 01       	movw	r30, r28
    196c:	e0 5c       	subi	r30, 0xC0	; 192
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e2       	ldi	r20, 0x20	; 32
    197e:	51 e4       	ldi	r21, 0x41	; 65
    1980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	bc 01       	movw	r22, r24
    198a:	cd 01       	movw	r24, r26
    198c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	9b af       	std	Y+59, r25	; 0x3b
    1996:	8a af       	std	Y+58, r24	; 0x3a
    1998:	0f c0       	rjmp	.+30     	; 0x19b8 <LCD_Command+0x1ee>
    199a:	80 e9       	ldi	r24, 0x90	; 144
    199c:	91 e0       	ldi	r25, 0x01	; 1
    199e:	99 af       	std	Y+57, r25	; 0x39
    19a0:	88 af       	std	Y+56, r24	; 0x38
    19a2:	88 ad       	ldd	r24, Y+56	; 0x38
    19a4:	99 ad       	ldd	r25, Y+57	; 0x39
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <LCD_Command+0x1dc>
    19aa:	99 af       	std	Y+57, r25	; 0x39
    19ac:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ae:	8a ad       	ldd	r24, Y+58	; 0x3a
    19b0:	9b ad       	ldd	r25, Y+59	; 0x3b
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	9b af       	std	Y+59, r25	; 0x3b
    19b6:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b8:	8a ad       	ldd	r24, Y+58	; 0x3a
    19ba:	9b ad       	ldd	r25, Y+59	; 0x3b
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	69 f7       	brne	.-38     	; 0x199a <LCD_Command+0x1d0>
    19c0:	2e c0       	rjmp	.+92     	; 0x1a1e <LCD_Command+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c2:	6c ad       	ldd	r22, Y+60	; 0x3c
    19c4:	7d ad       	ldd	r23, Y+61	; 0x3d
    19c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    19c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    19ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	9b af       	std	Y+59, r25	; 0x3b
    19d4:	8a af       	std	Y+58, r24	; 0x3a
    19d6:	8a ad       	ldd	r24, Y+58	; 0x3a
    19d8:	9b ad       	ldd	r25, Y+59	; 0x3b
    19da:	9f ab       	std	Y+55, r25	; 0x37
    19dc:	8e ab       	std	Y+54, r24	; 0x36
    19de:	8e a9       	ldd	r24, Y+54	; 0x36
    19e0:	9f a9       	ldd	r25, Y+55	; 0x37
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <LCD_Command+0x218>
    19e6:	9f ab       	std	Y+55, r25	; 0x37
    19e8:	8e ab       	std	Y+54, r24	; 0x36
    19ea:	19 c0       	rjmp	.+50     	; 0x1a1e <LCD_Command+0x254>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19ec:	8e 01       	movw	r16, r28
    19ee:	0c 5b       	subi	r16, 0xBC	; 188
    19f0:	1f 4f       	sbci	r17, 0xFF	; 255
    19f2:	fe 01       	movw	r30, r28
    19f4:	eb 5b       	subi	r30, 0xBB	; 187
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	60 81       	ld	r22, Z
    19fa:	71 81       	ldd	r23, Z+1	; 0x01
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	93 81       	ldd	r25, Z+3	; 0x03
    1a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	f8 01       	movw	r30, r16
    1a0a:	80 83       	st	Z, r24
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	ec 5b       	subi	r30, 0xBC	; 188
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a16:	8d a9       	ldd	r24, Y+53	; 0x35
    1a18:	8a 95       	dec	r24
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <LCD_Command+0x24e>
    1a1c:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(1);
	CLR_BIT(LCD_Command_Port , EN);
    1a1e:	ab e3       	ldi	r26, 0x3B	; 59
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	eb e3       	ldi	r30, 0x3B	; 59
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	8b 7f       	andi	r24, 0xFB	; 251
    1a2a:	8c 93       	st	X, r24
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a0 e0       	ldi	r26, 0x00	; 0
    1a32:	b0 e4       	ldi	r27, 0x40	; 64
    1a34:	89 ab       	std	Y+49, r24	; 0x31
    1a36:	9a ab       	std	Y+50, r25	; 0x32
    1a38:	ab ab       	std	Y+51, r26	; 0x33
    1a3a:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a40:	8b a9       	ldd	r24, Y+51	; 0x33
    1a42:	9c a9       	ldd	r25, Y+52	; 0x34
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	4a e7       	ldi	r20, 0x7A	; 122
    1a4a:	55 e4       	ldi	r21, 0x45	; 69
    1a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	8d a7       	std	Y+45, r24	; 0x2d
    1a56:	9e a7       	std	Y+46, r25	; 0x2e
    1a58:	af a7       	std	Y+47, r26	; 0x2f
    1a5a:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1a5c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a5e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a62:	98 a9       	ldd	r25, Y+48	; 0x30
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e8       	ldi	r20, 0x80	; 128
    1a6a:	5f e3       	ldi	r21, 0x3F	; 63
    1a6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a70:	88 23       	and	r24, r24
    1a72:	2c f4       	brge	.+10     	; 0x1a7e <LCD_Command+0x2b4>
		__ticks = 1;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	9c a7       	std	Y+44, r25	; 0x2c
    1a7a:	8b a7       	std	Y+43, r24	; 0x2b
    1a7c:	3f c0       	rjmp	.+126    	; 0x1afc <LCD_Command+0x332>
	else if (__tmp > 65535)
    1a7e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a80:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a84:	98 a9       	ldd	r25, Y+48	; 0x30
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	3f ef       	ldi	r19, 0xFF	; 255
    1a8a:	4f e7       	ldi	r20, 0x7F	; 127
    1a8c:	57 e4       	ldi	r21, 0x47	; 71
    1a8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a92:	18 16       	cp	r1, r24
    1a94:	4c f5       	brge	.+82     	; 0x1ae8 <LCD_Command+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a96:	69 a9       	ldd	r22, Y+49	; 0x31
    1a98:	7a a9       	ldd	r23, Y+50	; 0x32
    1a9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e2       	ldi	r20, 0x20	; 32
    1aa4:	51 e4       	ldi	r21, 0x41	; 65
    1aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	bc 01       	movw	r22, r24
    1ab0:	cd 01       	movw	r24, r26
    1ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	9c a7       	std	Y+44, r25	; 0x2c
    1abc:	8b a7       	std	Y+43, r24	; 0x2b
    1abe:	0f c0       	rjmp	.+30     	; 0x1ade <LCD_Command+0x314>
    1ac0:	80 e9       	ldi	r24, 0x90	; 144
    1ac2:	91 e0       	ldi	r25, 0x01	; 1
    1ac4:	9a a7       	std	Y+42, r25	; 0x2a
    1ac6:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ac8:	89 a5       	ldd	r24, Y+41	; 0x29
    1aca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <LCD_Command+0x302>
    1ad0:	9a a7       	std	Y+42, r25	; 0x2a
    1ad2:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ad6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	9c a7       	std	Y+44, r25	; 0x2c
    1adc:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ade:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ae0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	69 f7       	brne	.-38     	; 0x1ac0 <LCD_Command+0x2f6>
    1ae6:	14 c0       	rjmp	.+40     	; 0x1b10 <LCD_Command+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1aea:	7e a5       	ldd	r23, Y+46	; 0x2e
    1aec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aee:	98 a9       	ldd	r25, Y+48	; 0x30
    1af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	9c a7       	std	Y+44, r25	; 0x2c
    1afa:	8b a7       	std	Y+43, r24	; 0x2b
    1afc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1afe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b00:	98 a7       	std	Y+40, r25	; 0x28
    1b02:	8f a3       	std	Y+39, r24	; 0x27
    1b04:	8f a1       	ldd	r24, Y+39	; 0x27
    1b06:	98 a5       	ldd	r25, Y+40	; 0x28
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <LCD_Command+0x33e>
    1b0c:	98 a7       	std	Y+40, r25	; 0x28
    1b0e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(2);
	
	PORTB &= 0b11101000;
    1b10:	a8 e3       	ldi	r26, 0x38	; 56
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e8 e3       	ldi	r30, 0x38	; 56
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	88 7e       	andi	r24, 0xE8	; 232
    1b1c:	8c 93       	st	X, r24
	PORTB |= ((((cmd & 0x0F) & 0b00001000) << 1) | ((cmd & 0x0F) & 0b00000111));
    1b1e:	a8 e3       	ldi	r26, 0x38	; 56
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e8 e3       	ldi	r30, 0x38	; 56
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	28 2f       	mov	r18, r24
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e3 5b       	subi	r30, 0xB3	; 179
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 81       	ld	r24, Z
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	88 70       	andi	r24, 0x08	; 8
    1b38:	90 70       	andi	r25, 0x00	; 0
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	98 2f       	mov	r25, r24
    1b40:	fe 01       	movw	r30, r28
    1b42:	e3 5b       	subi	r30, 0xB3	; 179
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	87 70       	andi	r24, 0x07	; 7
    1b4a:	89 2b       	or	r24, r25
    1b4c:	82 2b       	or	r24, r18
    1b4e:	8c 93       	st	X, r24
	SET_BIT(LCD_Command_Port , EN);
    1b50:	ab e3       	ldi	r26, 0x3B	; 59
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	eb e3       	ldi	r30, 0x3B	; 59
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	84 60       	ori	r24, 0x04	; 4
    1b5c:	8c 93       	st	X, r24
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	a0 e8       	ldi	r26, 0x80	; 128
    1b64:	bf e3       	ldi	r27, 0x3F	; 63
    1b66:	8b a3       	std	Y+35, r24	; 0x23
    1b68:	9c a3       	std	Y+36, r25	; 0x24
    1b6a:	ad a3       	std	Y+37, r26	; 0x25
    1b6c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b70:	7c a1       	ldd	r23, Y+36	; 0x24
    1b72:	8d a1       	ldd	r24, Y+37	; 0x25
    1b74:	9e a1       	ldd	r25, Y+38	; 0x26
    1b76:	2b ea       	ldi	r18, 0xAB	; 171
    1b78:	3a ea       	ldi	r19, 0xAA	; 170
    1b7a:	4a ea       	ldi	r20, 0xAA	; 170
    1b7c:	50 e4       	ldi	r21, 0x40	; 64
    1b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	8f 8f       	std	Y+31, r24	; 0x1f
    1b88:	98 a3       	std	Y+32, r25	; 0x20
    1b8a:	a9 a3       	std	Y+33, r26	; 0x21
    1b8c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b8e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b90:	78 a1       	ldd	r23, Y+32	; 0x20
    1b92:	89 a1       	ldd	r24, Y+33	; 0x21
    1b94:	9a a1       	ldd	r25, Y+34	; 0x22
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e8       	ldi	r20, 0x80	; 128
    1b9c:	5f e3       	ldi	r21, 0x3F	; 63
    1b9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ba2:	88 23       	and	r24, r24
    1ba4:	1c f4       	brge	.+6      	; 0x1bac <LCD_Command+0x3e2>
		__ticks = 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	8e 8f       	std	Y+30, r24	; 0x1e
    1baa:	91 c0       	rjmp	.+290    	; 0x1cce <LCD_Command+0x504>
	else if (__tmp > 255)
    1bac:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bae:	78 a1       	ldd	r23, Y+32	; 0x20
    1bb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4f e7       	ldi	r20, 0x7F	; 127
    1bba:	53 e4       	ldi	r21, 0x43	; 67
    1bbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bc0:	18 16       	cp	r1, r24
    1bc2:	0c f0       	brlt	.+2      	; 0x1bc6 <LCD_Command+0x3fc>
    1bc4:	7b c0       	rjmp	.+246    	; 0x1cbc <LCD_Command+0x4f2>
	{
		_delay_ms(__us / 1000.0);
    1bc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bca:	8d a1       	ldd	r24, Y+37	; 0x25
    1bcc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	4a e7       	ldi	r20, 0x7A	; 122
    1bd4:	54 e4       	ldi	r21, 0x44	; 68
    1bd6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	8a 8f       	std	Y+26, r24	; 0x1a
    1be0:	9b 8f       	std	Y+27, r25	; 0x1b
    1be2:	ac 8f       	std	Y+28, r26	; 0x1c
    1be4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1be8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a e7       	ldi	r20, 0x7A	; 122
    1bf4:	55 e4       	ldi	r21, 0x45	; 69
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8e 8b       	std	Y+22, r24	; 0x16
    1c00:	9f 8b       	std	Y+23, r25	; 0x17
    1c02:	a8 8f       	std	Y+24, r26	; 0x18
    1c04:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c06:	6e 89       	ldd	r22, Y+22	; 0x16
    1c08:	7f 89       	ldd	r23, Y+23	; 0x17
    1c0a:	88 8d       	ldd	r24, Y+24	; 0x18
    1c0c:	99 8d       	ldd	r25, Y+25	; 0x19
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <LCD_Command+0x45e>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9d 8b       	std	Y+21, r25	; 0x15
    1c24:	8c 8b       	std	Y+20, r24	; 0x14
    1c26:	3f c0       	rjmp	.+126    	; 0x1ca6 <LCD_Command+0x4dc>
	else if (__tmp > 65535)
    1c28:	6e 89       	ldd	r22, Y+22	; 0x16
    1c2a:	7f 89       	ldd	r23, Y+23	; 0x17
    1c2c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c2e:	99 8d       	ldd	r25, Y+25	; 0x19
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	4c f5       	brge	.+82     	; 0x1c92 <LCD_Command+0x4c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c42:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c44:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c46:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9d 8b       	std	Y+21, r25	; 0x15
    1c66:	8c 8b       	std	Y+20, r24	; 0x14
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <LCD_Command+0x4be>
    1c6a:	80 e9       	ldi	r24, 0x90	; 144
    1c6c:	91 e0       	ldi	r25, 0x01	; 1
    1c6e:	9b 8b       	std	Y+19, r25	; 0x13
    1c70:	8a 8b       	std	Y+18, r24	; 0x12
    1c72:	8a 89       	ldd	r24, Y+18	; 0x12
    1c74:	9b 89       	ldd	r25, Y+19	; 0x13
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <LCD_Command+0x4ac>
    1c7a:	9b 8b       	std	Y+19, r25	; 0x13
    1c7c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	8c 89       	ldd	r24, Y+20	; 0x14
    1c80:	9d 89       	ldd	r25, Y+21	; 0x15
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	9d 8b       	std	Y+21, r25	; 0x15
    1c86:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	8c 89       	ldd	r24, Y+20	; 0x14
    1c8a:	9d 89       	ldd	r25, Y+21	; 0x15
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <LCD_Command+0x4a0>
    1c90:	24 c0       	rjmp	.+72     	; 0x1cda <LCD_Command+0x510>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	6e 89       	ldd	r22, Y+22	; 0x16
    1c94:	7f 89       	ldd	r23, Y+23	; 0x17
    1c96:	88 8d       	ldd	r24, Y+24	; 0x18
    1c98:	99 8d       	ldd	r25, Y+25	; 0x19
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9d 8b       	std	Y+21, r25	; 0x15
    1ca4:	8c 8b       	std	Y+20, r24	; 0x14
    1ca6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ca8:	9d 89       	ldd	r25, Y+21	; 0x15
    1caa:	99 8b       	std	Y+17, r25	; 0x11
    1cac:	88 8b       	std	Y+16, r24	; 0x10
    1cae:	88 89       	ldd	r24, Y+16	; 0x10
    1cb0:	99 89       	ldd	r25, Y+17	; 0x11
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <LCD_Command+0x4e8>
    1cb6:	99 8b       	std	Y+17, r25	; 0x11
    1cb8:	88 8b       	std	Y+16, r24	; 0x10
    1cba:	0f c0       	rjmp	.+30     	; 0x1cda <LCD_Command+0x510>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cbc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cbe:	78 a1       	ldd	r23, Y+32	; 0x20
    1cc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	8e 8f       	std	Y+30, r24	; 0x1e
    1cce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cd0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd4:	8a 95       	dec	r24
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <LCD_Command+0x50a>
    1cd8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	CLR_BIT(LCD_Command_Port , EN);
    1cda:	ab e3       	ldi	r26, 0x3B	; 59
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	eb e3       	ldi	r30, 0x3B	; 59
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8b 7f       	andi	r24, 0xFB	; 251
    1ce6:	8c 93       	st	X, r24
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	a0 e0       	ldi	r26, 0x00	; 0
    1cee:	b0 e4       	ldi	r27, 0x40	; 64
    1cf0:	8b 87       	std	Y+11, r24	; 0x0b
    1cf2:	9c 87       	std	Y+12, r25	; 0x0c
    1cf4:	ad 87       	std	Y+13, r26	; 0x0d
    1cf6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	4a e7       	ldi	r20, 0x7A	; 122
    1d06:	55 e4       	ldi	r21, 0x45	; 69
    1d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	8f 83       	std	Y+7, r24	; 0x07
    1d12:	98 87       	std	Y+8, r25	; 0x08
    1d14:	a9 87       	std	Y+9, r26	; 0x09
    1d16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d18:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1a:	78 85       	ldd	r23, Y+8	; 0x08
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e8       	ldi	r20, 0x80	; 128
    1d26:	5f e3       	ldi	r21, 0x3F	; 63
    1d28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d2c:	88 23       	and	r24, r24
    1d2e:	2c f4       	brge	.+10     	; 0x1d3a <LCD_Command+0x570>
		__ticks = 1;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	9e 83       	std	Y+6, r25	; 0x06
    1d36:	8d 83       	std	Y+5, r24	; 0x05
    1d38:	3f c0       	rjmp	.+126    	; 0x1db8 <LCD_Command+0x5ee>
	else if (__tmp > 65535)
    1d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3c:	78 85       	ldd	r23, Y+8	; 0x08
    1d3e:	89 85       	ldd	r24, Y+9	; 0x09
    1d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	3f ef       	ldi	r19, 0xFF	; 255
    1d46:	4f e7       	ldi	r20, 0x7F	; 127
    1d48:	57 e4       	ldi	r21, 0x47	; 71
    1d4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4e:	18 16       	cp	r1, r24
    1d50:	4c f5       	brge	.+82     	; 0x1da4 <LCD_Command+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e2       	ldi	r20, 0x20	; 32
    1d60:	51 e4       	ldi	r21, 0x41	; 65
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9e 83       	std	Y+6, r25	; 0x06
    1d78:	8d 83       	std	Y+5, r24	; 0x05
    1d7a:	0f c0       	rjmp	.+30     	; 0x1d9a <LCD_Command+0x5d0>
    1d7c:	80 e9       	ldi	r24, 0x90	; 144
    1d7e:	91 e0       	ldi	r25, 0x01	; 1
    1d80:	9c 83       	std	Y+4, r25	; 0x04
    1d82:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <LCD_Command+0x5be>
    1d8c:	9c 83       	std	Y+4, r25	; 0x04
    1d8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	9e 83       	std	Y+6, r25	; 0x06
    1d98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	69 f7       	brne	.-38     	; 0x1d7c <LCD_Command+0x5b2>
    1da2:	14 c0       	rjmp	.+40     	; 0x1dcc <LCD_Command+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da4:	6f 81       	ldd	r22, Y+7	; 0x07
    1da6:	78 85       	ldd	r23, Y+8	; 0x08
    1da8:	89 85       	ldd	r24, Y+9	; 0x09
    1daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbc:	9a 83       	std	Y+2, r25	; 0x02
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCD_Command+0x5fa>
    1dc8:	9a 83       	std	Y+2, r25	; 0x02
    1dca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1dcc:	c3 5b       	subi	r28, 0xB3	; 179
    1dce:	df 4f       	sbci	r29, 0xFF	; 255
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	08 95       	ret

00001de4 <LCD_Char>:

void LCD_Char (unsigned char char_data){
    1de4:	0f 93       	push	r16
    1de6:	1f 93       	push	r17
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	c1 56       	subi	r28, 0x61	; 97
    1df2:	d0 40       	sbci	r29, 0x00	; 0
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	fe 01       	movw	r30, r28
    1e00:	ef 59       	subi	r30, 0x9F	; 159
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	80 83       	st	Z, r24
	PORTB &= 0b11101000;
    1e06:	a8 e3       	ldi	r26, 0x38	; 56
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e8 e3       	ldi	r30, 0x38	; 56
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	88 7e       	andi	r24, 0xE8	; 232
    1e12:	8c 93       	st	X, r24
	PORTB |= (((((char_data & 0xF0) >> 4) & 0b00001000) << 1) | (((char_data & 0xF0) >> 4) & 0b00000111));
    1e14:	a8 e3       	ldi	r26, 0x38	; 56
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e8 e3       	ldi	r30, 0x38	; 56
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	28 2f       	mov	r18, r24
    1e20:	fe 01       	movw	r30, r28
    1e22:	ef 59       	subi	r30, 0x9F	; 159
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	80 81       	ld	r24, Z
    1e28:	82 95       	swap	r24
    1e2a:	8f 70       	andi	r24, 0x0F	; 15
    1e2c:	88 2f       	mov	r24, r24
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	88 70       	andi	r24, 0x08	; 8
    1e32:	90 70       	andi	r25, 0x00	; 0
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	98 2f       	mov	r25, r24
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	ef 59       	subi	r30, 0x9F	; 159
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	80 81       	ld	r24, Z
    1e42:	82 95       	swap	r24
    1e44:	8f 70       	andi	r24, 0x0F	; 15
    1e46:	87 70       	andi	r24, 0x07	; 7
    1e48:	89 2b       	or	r24, r25
    1e4a:	82 2b       	or	r24, r18
    1e4c:	8c 93       	st	X, r24
	SET_BIT(LCD_Command_Port , RS);
    1e4e:	ab e3       	ldi	r26, 0x3B	; 59
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	eb e3       	ldi	r30, 0x3B	; 59
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	88 60       	ori	r24, 0x08	; 8
    1e5a:	8c 93       	st	X, r24
	SET_BIT(LCD_Command_Port , EN);
    1e5c:	ab e3       	ldi	r26, 0x3B	; 59
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	eb e3       	ldi	r30, 0x3B	; 59
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	84 60       	ori	r24, 0x04	; 4
    1e68:	8c 93       	st	X, r24
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e3 5a       	subi	r30, 0xA3	; 163
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	a0 e8       	ldi	r26, 0x80	; 128
    1e76:	bf e3       	ldi	r27, 0x3F	; 63
    1e78:	80 83       	st	Z, r24
    1e7a:	91 83       	std	Z+1, r25	; 0x01
    1e7c:	a2 83       	std	Z+2, r26	; 0x02
    1e7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e80:	8e 01       	movw	r16, r28
    1e82:	07 5a       	subi	r16, 0xA7	; 167
    1e84:	1f 4f       	sbci	r17, 0xFF	; 255
    1e86:	fe 01       	movw	r30, r28
    1e88:	e3 5a       	subi	r30, 0xA3	; 163
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	60 81       	ld	r22, Z
    1e8e:	71 81       	ldd	r23, Z+1	; 0x01
    1e90:	82 81       	ldd	r24, Z+2	; 0x02
    1e92:	93 81       	ldd	r25, Z+3	; 0x03
    1e94:	2b ea       	ldi	r18, 0xAB	; 171
    1e96:	3a ea       	ldi	r19, 0xAA	; 170
    1e98:	4a ea       	ldi	r20, 0xAA	; 170
    1e9a:	50 e4       	ldi	r21, 0x40	; 64
    1e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	f8 01       	movw	r30, r16
    1ea6:	80 83       	st	Z, r24
    1ea8:	91 83       	std	Z+1, r25	; 0x01
    1eaa:	a2 83       	std	Z+2, r26	; 0x02
    1eac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e7 5a       	subi	r30, 0xA7	; 167
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	60 81       	ld	r22, Z
    1eb6:	71 81       	ldd	r23, Z+1	; 0x01
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	93 81       	ldd	r25, Z+3	; 0x03
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e8       	ldi	r20, 0x80	; 128
    1ec2:	5f e3       	ldi	r21, 0x3F	; 63
    1ec4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec8:	88 23       	and	r24, r24
    1eca:	34 f4       	brge	.+12     	; 0x1ed8 <LCD_Char+0xf4>
		__ticks = 1;
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e8 5a       	subi	r30, 0xA8	; 168
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	80 83       	st	Z, r24
    1ed6:	e0 c0       	rjmp	.+448    	; 0x2098 <LCD_Char+0x2b4>
	else if (__tmp > 255)
    1ed8:	fe 01       	movw	r30, r28
    1eda:	e7 5a       	subi	r30, 0xA7	; 167
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	60 81       	ld	r22, Z
    1ee0:	71 81       	ldd	r23, Z+1	; 0x01
    1ee2:	82 81       	ldd	r24, Z+2	; 0x02
    1ee4:	93 81       	ldd	r25, Z+3	; 0x03
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	4f e7       	ldi	r20, 0x7F	; 127
    1eec:	53 e4       	ldi	r21, 0x43	; 67
    1eee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef2:	18 16       	cp	r1, r24
    1ef4:	0c f0       	brlt	.+2      	; 0x1ef8 <LCD_Char+0x114>
    1ef6:	c0 c0       	rjmp	.+384    	; 0x2078 <LCD_Char+0x294>
	{
		_delay_ms(__us / 1000.0);
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e3 5a       	subi	r30, 0xA3	; 163
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	60 81       	ld	r22, Z
    1f00:	71 81       	ldd	r23, Z+1	; 0x01
    1f02:	82 81       	ldd	r24, Z+2	; 0x02
    1f04:	93 81       	ldd	r25, Z+3	; 0x03
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	4a e7       	ldi	r20, 0x7A	; 122
    1f0c:	54 e4       	ldi	r21, 0x44	; 68
    1f0e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	fe 01       	movw	r30, r28
    1f18:	ec 5a       	subi	r30, 0xAC	; 172
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	80 83       	st	Z, r24
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	a2 83       	std	Z+2, r26	; 0x02
    1f22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f24:	8e 01       	movw	r16, r28
    1f26:	00 5b       	subi	r16, 0xB0	; 176
    1f28:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ec 5a       	subi	r30, 0xAC	; 172
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	60 81       	ld	r22, Z
    1f32:	71 81       	ldd	r23, Z+1	; 0x01
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	93 81       	ldd	r25, Z+3	; 0x03
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	4a e7       	ldi	r20, 0x7A	; 122
    1f3e:	55 e4       	ldi	r21, 0x45	; 69
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	f8 01       	movw	r30, r16
    1f4a:	80 83       	st	Z, r24
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	a2 83       	std	Z+2, r26	; 0x02
    1f50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f52:	fe 01       	movw	r30, r28
    1f54:	e0 5b       	subi	r30, 0xB0	; 176
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	60 81       	ld	r22, Z
    1f5a:	71 81       	ldd	r23, Z+1	; 0x01
    1f5c:	82 81       	ldd	r24, Z+2	; 0x02
    1f5e:	93 81       	ldd	r25, Z+3	; 0x03
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e8       	ldi	r20, 0x80	; 128
    1f66:	5f e3       	ldi	r21, 0x3F	; 63
    1f68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f6c:	88 23       	and	r24, r24
    1f6e:	44 f4       	brge	.+16     	; 0x1f80 <LCD_Char+0x19c>
		__ticks = 1;
    1f70:	fe 01       	movw	r30, r28
    1f72:	e2 5b       	subi	r30, 0xB2	; 178
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	80 83       	st	Z, r24
    1f7e:	64 c0       	rjmp	.+200    	; 0x2048 <LCD_Char+0x264>
	else if (__tmp > 65535)
    1f80:	fe 01       	movw	r30, r28
    1f82:	e0 5b       	subi	r30, 0xB0	; 176
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	60 81       	ld	r22, Z
    1f88:	71 81       	ldd	r23, Z+1	; 0x01
    1f8a:	82 81       	ldd	r24, Z+2	; 0x02
    1f8c:	93 81       	ldd	r25, Z+3	; 0x03
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	3f ef       	ldi	r19, 0xFF	; 255
    1f92:	4f e7       	ldi	r20, 0x7F	; 127
    1f94:	57 e4       	ldi	r21, 0x47	; 71
    1f96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f9a:	18 16       	cp	r1, r24
    1f9c:	0c f0       	brlt	.+2      	; 0x1fa0 <LCD_Char+0x1bc>
    1f9e:	43 c0       	rjmp	.+134    	; 0x2026 <LCD_Char+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	ec 5a       	subi	r30, 0xAC	; 172
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	60 81       	ld	r22, Z
    1fa8:	71 81       	ldd	r23, Z+1	; 0x01
    1faa:	82 81       	ldd	r24, Z+2	; 0x02
    1fac:	93 81       	ldd	r25, Z+3	; 0x03
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e2       	ldi	r20, 0x20	; 32
    1fb4:	51 e4       	ldi	r21, 0x41	; 65
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	8e 01       	movw	r16, r28
    1fc0:	02 5b       	subi	r16, 0xB2	; 178
    1fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	f8 01       	movw	r30, r16
    1fd2:	91 83       	std	Z+1, r25	; 0x01
    1fd4:	80 83       	st	Z, r24
    1fd6:	1f c0       	rjmp	.+62     	; 0x2016 <LCD_Char+0x232>
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e4 5b       	subi	r30, 0xB4	; 180
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 e9       	ldi	r24, 0x90	; 144
    1fe0:	91 e0       	ldi	r25, 0x01	; 1
    1fe2:	91 83       	std	Z+1, r25	; 0x01
    1fe4:	80 83       	st	Z, r24
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	e4 5b       	subi	r30, 0xB4	; 180
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	80 81       	ld	r24, Z
    1fee:	91 81       	ldd	r25, Z+1	; 0x01
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <LCD_Char+0x20c>
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e4 5b       	subi	r30, 0xB4	; 180
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	91 83       	std	Z+1, r25	; 0x01
    1ffc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffe:	de 01       	movw	r26, r28
    2000:	a2 5b       	subi	r26, 0xB2	; 178
    2002:	bf 4f       	sbci	r27, 0xFF	; 255
    2004:	fe 01       	movw	r30, r28
    2006:	e2 5b       	subi	r30, 0xB2	; 178
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	80 81       	ld	r24, Z
    200c:	91 81       	ldd	r25, Z+1	; 0x01
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	11 96       	adiw	r26, 0x01	; 1
    2012:	9c 93       	st	X, r25
    2014:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2016:	fe 01       	movw	r30, r28
    2018:	e2 5b       	subi	r30, 0xB2	; 178
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	80 81       	ld	r24, Z
    201e:	91 81       	ldd	r25, Z+1	; 0x01
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	d1 f6       	brne	.-76     	; 0x1fd8 <LCD_Char+0x1f4>
    2024:	4b c0       	rjmp	.+150    	; 0x20bc <LCD_Char+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2026:	8e 01       	movw	r16, r28
    2028:	02 5b       	subi	r16, 0xB2	; 178
    202a:	1f 4f       	sbci	r17, 0xFF	; 255
    202c:	fe 01       	movw	r30, r28
    202e:	e0 5b       	subi	r30, 0xB0	; 176
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	60 81       	ld	r22, Z
    2034:	71 81       	ldd	r23, Z+1	; 0x01
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	f8 01       	movw	r30, r16
    2044:	91 83       	std	Z+1, r25	; 0x01
    2046:	80 83       	st	Z, r24
    2048:	de 01       	movw	r26, r28
    204a:	a6 5b       	subi	r26, 0xB6	; 182
    204c:	bf 4f       	sbci	r27, 0xFF	; 255
    204e:	fe 01       	movw	r30, r28
    2050:	e2 5b       	subi	r30, 0xB2	; 178
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	80 81       	ld	r24, Z
    2056:	91 81       	ldd	r25, Z+1	; 0x01
    2058:	11 96       	adiw	r26, 0x01	; 1
    205a:	9c 93       	st	X, r25
    205c:	8e 93       	st	-X, r24
    205e:	fe 01       	movw	r30, r28
    2060:	e6 5b       	subi	r30, 0xB6	; 182
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	91 81       	ldd	r25, Z+1	; 0x01
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <LCD_Char+0x284>
    206c:	fe 01       	movw	r30, r28
    206e:	e6 5b       	subi	r30, 0xB6	; 182
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	80 83       	st	Z, r24
    2076:	22 c0       	rjmp	.+68     	; 0x20bc <LCD_Char+0x2d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2078:	8e 01       	movw	r16, r28
    207a:	08 5a       	subi	r16, 0xA8	; 168
    207c:	1f 4f       	sbci	r17, 0xFF	; 255
    207e:	fe 01       	movw	r30, r28
    2080:	e7 5a       	subi	r30, 0xA7	; 167
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	60 81       	ld	r22, Z
    2086:	71 81       	ldd	r23, Z+1	; 0x01
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	f8 01       	movw	r30, r16
    2096:	80 83       	st	Z, r24
    2098:	de 01       	movw	r26, r28
    209a:	a7 5b       	subi	r26, 0xB7	; 183
    209c:	bf 4f       	sbci	r27, 0xFF	; 255
    209e:	fe 01       	movw	r30, r28
    20a0:	e8 5a       	subi	r30, 0xA8	; 168
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	80 81       	ld	r24, Z
    20a6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20a8:	fe 01       	movw	r30, r28
    20aa:	e7 5b       	subi	r30, 0xB7	; 183
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	80 81       	ld	r24, Z
    20b0:	8a 95       	dec	r24
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_Char+0x2cc>
    20b4:	fe 01       	movw	r30, r28
    20b6:	e7 5b       	subi	r30, 0xB7	; 183
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	80 83       	st	Z, r24
	_delay_us(1);
	CLR_BIT(LCD_Command_Port , EN);
    20bc:	ab e3       	ldi	r26, 0x3B	; 59
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	eb e3       	ldi	r30, 0x3B	; 59
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	8b 7f       	andi	r24, 0xFB	; 251
    20c8:	8c 93       	st	X, r24
    20ca:	fe 01       	movw	r30, r28
    20cc:	eb 5b       	subi	r30, 0xBB	; 187
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	a8 ec       	ldi	r26, 0xC8	; 200
    20d6:	b2 e4       	ldi	r27, 0x42	; 66
    20d8:	80 83       	st	Z, r24
    20da:	91 83       	std	Z+1, r25	; 0x01
    20dc:	a2 83       	std	Z+2, r26	; 0x02
    20de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20e0:	8e 01       	movw	r16, r28
    20e2:	0f 5b       	subi	r16, 0xBF	; 191
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	fe 01       	movw	r30, r28
    20e8:	eb 5b       	subi	r30, 0xBB	; 187
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	60 81       	ld	r22, Z
    20ee:	71 81       	ldd	r23, Z+1	; 0x01
    20f0:	82 81       	ldd	r24, Z+2	; 0x02
    20f2:	93 81       	ldd	r25, Z+3	; 0x03
    20f4:	2b ea       	ldi	r18, 0xAB	; 171
    20f6:	3a ea       	ldi	r19, 0xAA	; 170
    20f8:	4a ea       	ldi	r20, 0xAA	; 170
    20fa:	50 e4       	ldi	r21, 0x40	; 64
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	f8 01       	movw	r30, r16
    2106:	80 83       	st	Z, r24
    2108:	91 83       	std	Z+1, r25	; 0x01
    210a:	a2 83       	std	Z+2, r26	; 0x02
    210c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    210e:	fe 01       	movw	r30, r28
    2110:	ef 5b       	subi	r30, 0xBF	; 191
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	60 81       	ld	r22, Z
    2116:	71 81       	ldd	r23, Z+1	; 0x01
    2118:	82 81       	ldd	r24, Z+2	; 0x02
    211a:	93 81       	ldd	r25, Z+3	; 0x03
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 e8       	ldi	r20, 0x80	; 128
    2122:	5f e3       	ldi	r21, 0x3F	; 63
    2124:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2128:	88 23       	and	r24, r24
    212a:	34 f4       	brge	.+12     	; 0x2138 <LCD_Char+0x354>
		__ticks = 1;
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	fe 01       	movw	r30, r28
    2130:	e0 5c       	subi	r30, 0xC0	; 192
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 83       	st	Z, r24
    2136:	9d c0       	rjmp	.+314    	; 0x2272 <LCD_Char+0x48e>
	else if (__tmp > 255)
    2138:	fe 01       	movw	r30, r28
    213a:	ef 5b       	subi	r30, 0xBF	; 191
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	60 81       	ld	r22, Z
    2140:	71 81       	ldd	r23, Z+1	; 0x01
    2142:	82 81       	ldd	r24, Z+2	; 0x02
    2144:	93 81       	ldd	r25, Z+3	; 0x03
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4f e7       	ldi	r20, 0x7F	; 127
    214c:	53 e4       	ldi	r21, 0x43	; 67
    214e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2152:	18 16       	cp	r1, r24
    2154:	0c f0       	brlt	.+2      	; 0x2158 <LCD_Char+0x374>
    2156:	7e c0       	rjmp	.+252    	; 0x2254 <LCD_Char+0x470>
	{
		_delay_ms(__us / 1000.0);
    2158:	fe 01       	movw	r30, r28
    215a:	eb 5b       	subi	r30, 0xBB	; 187
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	60 81       	ld	r22, Z
    2160:	71 81       	ldd	r23, Z+1	; 0x01
    2162:	82 81       	ldd	r24, Z+2	; 0x02
    2164:	93 81       	ldd	r25, Z+3	; 0x03
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	4a e7       	ldi	r20, 0x7A	; 122
    216c:	54 e4       	ldi	r21, 0x44	; 68
    216e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	8c af       	std	Y+60, r24	; 0x3c
    2178:	9d af       	std	Y+61, r25	; 0x3d
    217a:	ae af       	std	Y+62, r26	; 0x3e
    217c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2180:	7d ad       	ldd	r23, Y+61	; 0x3d
    2182:	8e ad       	ldd	r24, Y+62	; 0x3e
    2184:	9f ad       	ldd	r25, Y+63	; 0x3f
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	4a e7       	ldi	r20, 0x7A	; 122
    218c:	55 e4       	ldi	r21, 0x45	; 69
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	88 af       	std	Y+56, r24	; 0x38
    2198:	99 af       	std	Y+57, r25	; 0x39
    219a:	aa af       	std	Y+58, r26	; 0x3a
    219c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    219e:	68 ad       	ldd	r22, Y+56	; 0x38
    21a0:	79 ad       	ldd	r23, Y+57	; 0x39
    21a2:	8a ad       	ldd	r24, Y+58	; 0x3a
    21a4:	9b ad       	ldd	r25, Y+59	; 0x3b
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e8       	ldi	r20, 0x80	; 128
    21ac:	5f e3       	ldi	r21, 0x3F	; 63
    21ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b2:	88 23       	and	r24, r24
    21b4:	2c f4       	brge	.+10     	; 0x21c0 <LCD_Char+0x3dc>
		__ticks = 1;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	9f ab       	std	Y+55, r25	; 0x37
    21bc:	8e ab       	std	Y+54, r24	; 0x36
    21be:	3f c0       	rjmp	.+126    	; 0x223e <LCD_Char+0x45a>
	else if (__tmp > 65535)
    21c0:	68 ad       	ldd	r22, Y+56	; 0x38
    21c2:	79 ad       	ldd	r23, Y+57	; 0x39
    21c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    21c6:	9b ad       	ldd	r25, Y+59	; 0x3b
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	3f ef       	ldi	r19, 0xFF	; 255
    21cc:	4f e7       	ldi	r20, 0x7F	; 127
    21ce:	57 e4       	ldi	r21, 0x47	; 71
    21d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d4:	18 16       	cp	r1, r24
    21d6:	4c f5       	brge	.+82     	; 0x222a <LCD_Char+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d8:	6c ad       	ldd	r22, Y+60	; 0x3c
    21da:	7d ad       	ldd	r23, Y+61	; 0x3d
    21dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    21de:	9f ad       	ldd	r25, Y+63	; 0x3f
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e2       	ldi	r20, 0x20	; 32
    21e6:	51 e4       	ldi	r21, 0x41	; 65
    21e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	bc 01       	movw	r22, r24
    21f2:	cd 01       	movw	r24, r26
    21f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	9f ab       	std	Y+55, r25	; 0x37
    21fe:	8e ab       	std	Y+54, r24	; 0x36
    2200:	0f c0       	rjmp	.+30     	; 0x2220 <LCD_Char+0x43c>
    2202:	80 e9       	ldi	r24, 0x90	; 144
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	9d ab       	std	Y+53, r25	; 0x35
    2208:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    220a:	8c a9       	ldd	r24, Y+52	; 0x34
    220c:	9d a9       	ldd	r25, Y+53	; 0x35
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <LCD_Char+0x42a>
    2212:	9d ab       	std	Y+53, r25	; 0x35
    2214:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2216:	8e a9       	ldd	r24, Y+54	; 0x36
    2218:	9f a9       	ldd	r25, Y+55	; 0x37
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	9f ab       	std	Y+55, r25	; 0x37
    221e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2220:	8e a9       	ldd	r24, Y+54	; 0x36
    2222:	9f a9       	ldd	r25, Y+55	; 0x37
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	69 f7       	brne	.-38     	; 0x2202 <LCD_Char+0x41e>
    2228:	2d c0       	rjmp	.+90     	; 0x2284 <LCD_Char+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222a:	68 ad       	ldd	r22, Y+56	; 0x38
    222c:	79 ad       	ldd	r23, Y+57	; 0x39
    222e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2230:	9b ad       	ldd	r25, Y+59	; 0x3b
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	9f ab       	std	Y+55, r25	; 0x37
    223c:	8e ab       	std	Y+54, r24	; 0x36
    223e:	8e a9       	ldd	r24, Y+54	; 0x36
    2240:	9f a9       	ldd	r25, Y+55	; 0x37
    2242:	9b ab       	std	Y+51, r25	; 0x33
    2244:	8a ab       	std	Y+50, r24	; 0x32
    2246:	8a a9       	ldd	r24, Y+50	; 0x32
    2248:	9b a9       	ldd	r25, Y+51	; 0x33
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <LCD_Char+0x466>
    224e:	9b ab       	std	Y+51, r25	; 0x33
    2250:	8a ab       	std	Y+50, r24	; 0x32
    2252:	18 c0       	rjmp	.+48     	; 0x2284 <LCD_Char+0x4a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2254:	fe 01       	movw	r30, r28
    2256:	ef 5b       	subi	r30, 0xBF	; 191
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	60 81       	ld	r22, Z
    225c:	71 81       	ldd	r23, Z+1	; 0x01
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	93 81       	ldd	r25, Z+3	; 0x03
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	fe 01       	movw	r30, r28
    226c:	e0 5c       	subi	r30, 0xC0	; 192
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 83       	st	Z, r24
    2272:	fe 01       	movw	r30, r28
    2274:	e0 5c       	subi	r30, 0xC0	; 192
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    227c:	89 a9       	ldd	r24, Y+49	; 0x31
    227e:	8a 95       	dec	r24
    2280:	f1 f7       	brne	.-4      	; 0x227e <LCD_Char+0x49a>
    2282:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);
	
	PORTB &= 0b11101000;
    2284:	a8 e3       	ldi	r26, 0x38	; 56
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e8 e3       	ldi	r30, 0x38	; 56
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	88 7e       	andi	r24, 0xE8	; 232
    2290:	8c 93       	st	X, r24
	PORTB |= ((((char_data & 0x0F) & 0b00001000) << 1) | ((char_data & 0x0F) & 0b00000111));
    2292:	a8 e3       	ldi	r26, 0x38	; 56
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e8 e3       	ldi	r30, 0x38	; 56
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	28 2f       	mov	r18, r24
    229e:	fe 01       	movw	r30, r28
    22a0:	ef 59       	subi	r30, 0x9F	; 159
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	88 2f       	mov	r24, r24
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	88 70       	andi	r24, 0x08	; 8
    22ac:	90 70       	andi	r25, 0x00	; 0
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	98 2f       	mov	r25, r24
    22b4:	fe 01       	movw	r30, r28
    22b6:	ef 59       	subi	r30, 0x9F	; 159
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	80 81       	ld	r24, Z
    22bc:	87 70       	andi	r24, 0x07	; 7
    22be:	89 2b       	or	r24, r25
    22c0:	82 2b       	or	r24, r18
    22c2:	8c 93       	st	X, r24
    SET_BIT(LCD_Command_Port , EN);
    22c4:	ab e3       	ldi	r26, 0x3B	; 59
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	eb e3       	ldi	r30, 0x3B	; 59
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	84 60       	ori	r24, 0x04	; 4
    22d0:	8c 93       	st	X, r24
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a0 e8       	ldi	r26, 0x80	; 128
    22d8:	bf e3       	ldi	r27, 0x3F	; 63
    22da:	8d a7       	std	Y+45, r24	; 0x2d
    22dc:	9e a7       	std	Y+46, r25	; 0x2e
    22de:	af a7       	std	Y+47, r26	; 0x2f
    22e0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    22e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    22e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e8:	98 a9       	ldd	r25, Y+48	; 0x30
    22ea:	2b ea       	ldi	r18, 0xAB	; 171
    22ec:	3a ea       	ldi	r19, 0xAA	; 170
    22ee:	4a ea       	ldi	r20, 0xAA	; 170
    22f0:	50 e4       	ldi	r21, 0x40	; 64
    22f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	89 a7       	std	Y+41, r24	; 0x29
    22fc:	9a a7       	std	Y+42, r25	; 0x2a
    22fe:	ab a7       	std	Y+43, r26	; 0x2b
    2300:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2302:	69 a5       	ldd	r22, Y+41	; 0x29
    2304:	7a a5       	ldd	r23, Y+42	; 0x2a
    2306:	8b a5       	ldd	r24, Y+43	; 0x2b
    2308:	9c a5       	ldd	r25, Y+44	; 0x2c
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e8       	ldi	r20, 0x80	; 128
    2310:	5f e3       	ldi	r21, 0x3F	; 63
    2312:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2316:	88 23       	and	r24, r24
    2318:	1c f4       	brge	.+6      	; 0x2320 <LCD_Char+0x53c>
		__ticks = 1;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	88 a7       	std	Y+40, r24	; 0x28
    231e:	91 c0       	rjmp	.+290    	; 0x2442 <LCD_Char+0x65e>
	else if (__tmp > 255)
    2320:	69 a5       	ldd	r22, Y+41	; 0x29
    2322:	7a a5       	ldd	r23, Y+42	; 0x2a
    2324:	8b a5       	ldd	r24, Y+43	; 0x2b
    2326:	9c a5       	ldd	r25, Y+44	; 0x2c
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	4f e7       	ldi	r20, 0x7F	; 127
    232e:	53 e4       	ldi	r21, 0x43	; 67
    2330:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2334:	18 16       	cp	r1, r24
    2336:	0c f0       	brlt	.+2      	; 0x233a <LCD_Char+0x556>
    2338:	7b c0       	rjmp	.+246    	; 0x2430 <LCD_Char+0x64c>
	{
		_delay_ms(__us / 1000.0);
    233a:	6d a5       	ldd	r22, Y+45	; 0x2d
    233c:	7e a5       	ldd	r23, Y+46	; 0x2e
    233e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2340:	98 a9       	ldd	r25, Y+48	; 0x30
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	4a e7       	ldi	r20, 0x7A	; 122
    2348:	54 e4       	ldi	r21, 0x44	; 68
    234a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	8c a3       	std	Y+36, r24	; 0x24
    2354:	9d a3       	std	Y+37, r25	; 0x25
    2356:	ae a3       	std	Y+38, r26	; 0x26
    2358:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235a:	6c a1       	ldd	r22, Y+36	; 0x24
    235c:	7d a1       	ldd	r23, Y+37	; 0x25
    235e:	8e a1       	ldd	r24, Y+38	; 0x26
    2360:	9f a1       	ldd	r25, Y+39	; 0x27
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a e7       	ldi	r20, 0x7A	; 122
    2368:	55 e4       	ldi	r21, 0x45	; 69
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	88 a3       	std	Y+32, r24	; 0x20
    2374:	99 a3       	std	Y+33, r25	; 0x21
    2376:	aa a3       	std	Y+34, r26	; 0x22
    2378:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    237a:	68 a1       	ldd	r22, Y+32	; 0x20
    237c:	79 a1       	ldd	r23, Y+33	; 0x21
    237e:	8a a1       	ldd	r24, Y+34	; 0x22
    2380:	9b a1       	ldd	r25, Y+35	; 0x23
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	2c f4       	brge	.+10     	; 0x239c <LCD_Char+0x5b8>
		__ticks = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9f 8f       	std	Y+31, r25	; 0x1f
    2398:	8e 8f       	std	Y+30, r24	; 0x1e
    239a:	3f c0       	rjmp	.+126    	; 0x241a <LCD_Char+0x636>
	else if (__tmp > 65535)
    239c:	68 a1       	ldd	r22, Y+32	; 0x20
    239e:	79 a1       	ldd	r23, Y+33	; 0x21
    23a0:	8a a1       	ldd	r24, Y+34	; 0x22
    23a2:	9b a1       	ldd	r25, Y+35	; 0x23
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	57 e4       	ldi	r21, 0x47	; 71
    23ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23b0:	18 16       	cp	r1, r24
    23b2:	4c f5       	brge	.+82     	; 0x2406 <LCD_Char+0x622>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b4:	6c a1       	ldd	r22, Y+36	; 0x24
    23b6:	7d a1       	ldd	r23, Y+37	; 0x25
    23b8:	8e a1       	ldd	r24, Y+38	; 0x26
    23ba:	9f a1       	ldd	r25, Y+39	; 0x27
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	51 e4       	ldi	r21, 0x41	; 65
    23c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9f 8f       	std	Y+31, r25	; 0x1f
    23da:	8e 8f       	std	Y+30, r24	; 0x1e
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <LCD_Char+0x618>
    23de:	80 e9       	ldi	r24, 0x90	; 144
    23e0:	91 e0       	ldi	r25, 0x01	; 1
    23e2:	9d 8f       	std	Y+29, r25	; 0x1d
    23e4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_Char+0x606>
    23ee:	9d 8f       	std	Y+29, r25	; 0x1d
    23f0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23f4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	9f 8f       	std	Y+31, r25	; 0x1f
    23fa:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23fe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	69 f7       	brne	.-38     	; 0x23de <LCD_Char+0x5fa>
    2404:	24 c0       	rjmp	.+72     	; 0x244e <LCD_Char+0x66a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2406:	68 a1       	ldd	r22, Y+32	; 0x20
    2408:	79 a1       	ldd	r23, Y+33	; 0x21
    240a:	8a a1       	ldd	r24, Y+34	; 0x22
    240c:	9b a1       	ldd	r25, Y+35	; 0x23
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9f 8f       	std	Y+31, r25	; 0x1f
    2418:	8e 8f       	std	Y+30, r24	; 0x1e
    241a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    241c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    241e:	9b 8f       	std	Y+27, r25	; 0x1b
    2420:	8a 8f       	std	Y+26, r24	; 0x1a
    2422:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2424:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_Char+0x642>
    242a:	9b 8f       	std	Y+27, r25	; 0x1b
    242c:	8a 8f       	std	Y+26, r24	; 0x1a
    242e:	0f c0       	rjmp	.+30     	; 0x244e <LCD_Char+0x66a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2430:	69 a5       	ldd	r22, Y+41	; 0x29
    2432:	7a a5       	ldd	r23, Y+42	; 0x2a
    2434:	8b a5       	ldd	r24, Y+43	; 0x2b
    2436:	9c a5       	ldd	r25, Y+44	; 0x2c
    2438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	88 a7       	std	Y+40, r24	; 0x28
    2442:	88 a5       	ldd	r24, Y+40	; 0x28
    2444:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2446:	89 8d       	ldd	r24, Y+25	; 0x19
    2448:	8a 95       	dec	r24
    244a:	f1 f7       	brne	.-4      	; 0x2448 <LCD_Char+0x664>
    244c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	CLR_BIT(LCD_Command_Port , EN);
    244e:	ab e3       	ldi	r26, 0x3B	; 59
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	eb e3       	ldi	r30, 0x3B	; 59
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	8b 7f       	andi	r24, 0xFB	; 251
    245a:	8c 93       	st	X, r24
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	a8 ec       	ldi	r26, 0xC8	; 200
    2462:	b2 e4       	ldi	r27, 0x42	; 66
    2464:	8d 8b       	std	Y+21, r24	; 0x15
    2466:	9e 8b       	std	Y+22, r25	; 0x16
    2468:	af 8b       	std	Y+23, r26	; 0x17
    246a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    246c:	6d 89       	ldd	r22, Y+21	; 0x15
    246e:	7e 89       	ldd	r23, Y+22	; 0x16
    2470:	8f 89       	ldd	r24, Y+23	; 0x17
    2472:	98 8d       	ldd	r25, Y+24	; 0x18
    2474:	2b ea       	ldi	r18, 0xAB	; 171
    2476:	3a ea       	ldi	r19, 0xAA	; 170
    2478:	4a ea       	ldi	r20, 0xAA	; 170
    247a:	50 e4       	ldi	r21, 0x40	; 64
    247c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	89 8b       	std	Y+17, r24	; 0x11
    2486:	9a 8b       	std	Y+18, r25	; 0x12
    2488:	ab 8b       	std	Y+19, r26	; 0x13
    248a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    248c:	69 89       	ldd	r22, Y+17	; 0x11
    248e:	7a 89       	ldd	r23, Y+18	; 0x12
    2490:	8b 89       	ldd	r24, Y+19	; 0x13
    2492:	9c 89       	ldd	r25, Y+20	; 0x14
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	40 e8       	ldi	r20, 0x80	; 128
    249a:	5f e3       	ldi	r21, 0x3F	; 63
    249c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a0:	88 23       	and	r24, r24
    24a2:	1c f4       	brge	.+6      	; 0x24aa <LCD_Char+0x6c6>
		__ticks = 1;
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	88 8b       	std	Y+16, r24	; 0x10
    24a8:	91 c0       	rjmp	.+290    	; 0x25cc <LCD_Char+0x7e8>
	else if (__tmp > 255)
    24aa:	69 89       	ldd	r22, Y+17	; 0x11
    24ac:	7a 89       	ldd	r23, Y+18	; 0x12
    24ae:	8b 89       	ldd	r24, Y+19	; 0x13
    24b0:	9c 89       	ldd	r25, Y+20	; 0x14
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	4f e7       	ldi	r20, 0x7F	; 127
    24b8:	53 e4       	ldi	r21, 0x43	; 67
    24ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24be:	18 16       	cp	r1, r24
    24c0:	0c f0       	brlt	.+2      	; 0x24c4 <LCD_Char+0x6e0>
    24c2:	7b c0       	rjmp	.+246    	; 0x25ba <LCD_Char+0x7d6>
	{
		_delay_ms(__us / 1000.0);
    24c4:	6d 89       	ldd	r22, Y+21	; 0x15
    24c6:	7e 89       	ldd	r23, Y+22	; 0x16
    24c8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ca:	98 8d       	ldd	r25, Y+24	; 0x18
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	4a e7       	ldi	r20, 0x7A	; 122
    24d2:	54 e4       	ldi	r21, 0x44	; 68
    24d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	8c 87       	std	Y+12, r24	; 0x0c
    24de:	9d 87       	std	Y+13, r25	; 0x0d
    24e0:	ae 87       	std	Y+14, r26	; 0x0e
    24e2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    24e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    24e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    24ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	4a e7       	ldi	r20, 0x7A	; 122
    24f2:	55 e4       	ldi	r21, 0x45	; 69
    24f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	88 87       	std	Y+8, r24	; 0x08
    24fe:	99 87       	std	Y+9, r25	; 0x09
    2500:	aa 87       	std	Y+10, r26	; 0x0a
    2502:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2504:	68 85       	ldd	r22, Y+8	; 0x08
    2506:	79 85       	ldd	r23, Y+9	; 0x09
    2508:	8a 85       	ldd	r24, Y+10	; 0x0a
    250a:	9b 85       	ldd	r25, Y+11	; 0x0b
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e8       	ldi	r20, 0x80	; 128
    2512:	5f e3       	ldi	r21, 0x3F	; 63
    2514:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2518:	88 23       	and	r24, r24
    251a:	2c f4       	brge	.+10     	; 0x2526 <LCD_Char+0x742>
		__ticks = 1;
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	9f 83       	std	Y+7, r25	; 0x07
    2522:	8e 83       	std	Y+6, r24	; 0x06
    2524:	3f c0       	rjmp	.+126    	; 0x25a4 <LCD_Char+0x7c0>
	else if (__tmp > 65535)
    2526:	68 85       	ldd	r22, Y+8	; 0x08
    2528:	79 85       	ldd	r23, Y+9	; 0x09
    252a:	8a 85       	ldd	r24, Y+10	; 0x0a
    252c:	9b 85       	ldd	r25, Y+11	; 0x0b
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	3f ef       	ldi	r19, 0xFF	; 255
    2532:	4f e7       	ldi	r20, 0x7F	; 127
    2534:	57 e4       	ldi	r21, 0x47	; 71
    2536:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    253a:	18 16       	cp	r1, r24
    253c:	4c f5       	brge	.+82     	; 0x2590 <LCD_Char+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2540:	7d 85       	ldd	r23, Y+13	; 0x0d
    2542:	8e 85       	ldd	r24, Y+14	; 0x0e
    2544:	9f 85       	ldd	r25, Y+15	; 0x0f
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e2       	ldi	r20, 0x20	; 32
    254c:	51 e4       	ldi	r21, 0x41	; 65
    254e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	bc 01       	movw	r22, r24
    2558:	cd 01       	movw	r24, r26
    255a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9f 83       	std	Y+7, r25	; 0x07
    2564:	8e 83       	std	Y+6, r24	; 0x06
    2566:	0f c0       	rjmp	.+30     	; 0x2586 <LCD_Char+0x7a2>
    2568:	80 e9       	ldi	r24, 0x90	; 144
    256a:	91 e0       	ldi	r25, 0x01	; 1
    256c:	9d 83       	std	Y+5, r25	; 0x05
    256e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2570:	8c 81       	ldd	r24, Y+4	; 0x04
    2572:	9d 81       	ldd	r25, Y+5	; 0x05
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <LCD_Char+0x790>
    2578:	9d 83       	std	Y+5, r25	; 0x05
    257a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257c:	8e 81       	ldd	r24, Y+6	; 0x06
    257e:	9f 81       	ldd	r25, Y+7	; 0x07
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	9f 83       	std	Y+7, r25	; 0x07
    2584:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2586:	8e 81       	ldd	r24, Y+6	; 0x06
    2588:	9f 81       	ldd	r25, Y+7	; 0x07
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	69 f7       	brne	.-38     	; 0x2568 <LCD_Char+0x784>
    258e:	24 c0       	rjmp	.+72     	; 0x25d8 <LCD_Char+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2590:	68 85       	ldd	r22, Y+8	; 0x08
    2592:	79 85       	ldd	r23, Y+9	; 0x09
    2594:	8a 85       	ldd	r24, Y+10	; 0x0a
    2596:	9b 85       	ldd	r25, Y+11	; 0x0b
    2598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	9f 83       	std	Y+7, r25	; 0x07
    25a2:	8e 83       	std	Y+6, r24	; 0x06
    25a4:	8e 81       	ldd	r24, Y+6	; 0x06
    25a6:	9f 81       	ldd	r25, Y+7	; 0x07
    25a8:	9b 83       	std	Y+3, r25	; 0x03
    25aa:	8a 83       	std	Y+2, r24	; 0x02
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	9b 81       	ldd	r25, Y+3	; 0x03
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <LCD_Char+0x7cc>
    25b4:	9b 83       	std	Y+3, r25	; 0x03
    25b6:	8a 83       	std	Y+2, r24	; 0x02
    25b8:	0f c0       	rjmp	.+30     	; 0x25d8 <LCD_Char+0x7f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25ba:	69 89       	ldd	r22, Y+17	; 0x11
    25bc:	7a 89       	ldd	r23, Y+18	; 0x12
    25be:	8b 89       	ldd	r24, Y+19	; 0x13
    25c0:	9c 89       	ldd	r25, Y+20	; 0x14
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	88 8b       	std	Y+16, r24	; 0x10
    25cc:	88 89       	ldd	r24, Y+16	; 0x10
    25ce:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	8a 95       	dec	r24
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <LCD_Char+0x7ee>
    25d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);	
}
    25d8:	cf 59       	subi	r28, 0x9F	; 159
    25da:	df 4f       	sbci	r29, 0xFF	; 255
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	1f 91       	pop	r17
    25ec:	0f 91       	pop	r16
    25ee:	08 95       	ret

000025f0 <LCD_String>:

void LCD_String (char *str){
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <LCD_String+0x6>
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <LCD_String+0x8>
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	9c 83       	std	Y+4, r25	; 0x04
    25fe:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for (i=0;str[i]!=0;i++){
    2600:	1a 82       	std	Y+2, r1	; 0x02
    2602:	19 82       	std	Y+1, r1	; 0x01
    2604:	0f c0       	rjmp	.+30     	; 0x2624 <LCD_String+0x34>
		LCD_Char(str[i]);
    2606:	29 81       	ldd	r18, Y+1	; 0x01
    2608:	3a 81       	ldd	r19, Y+2	; 0x02
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	9c 81       	ldd	r25, Y+4	; 0x04
    260e:	fc 01       	movw	r30, r24
    2610:	e2 0f       	add	r30, r18
    2612:	f3 1f       	adc	r31, r19
    2614:	80 81       	ld	r24, Z
    2616:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <LCD_Char>
	_delay_us(100);	
}

void LCD_String (char *str){
	int i;
	for (i=0;str[i]!=0;i++){
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	9a 81       	ldd	r25, Y+2	; 0x02
    261e:	01 96       	adiw	r24, 0x01	; 1
    2620:	9a 83       	std	Y+2, r25	; 0x02
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	29 81       	ldd	r18, Y+1	; 0x01
    2626:	3a 81       	ldd	r19, Y+2	; 0x02
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	9c 81       	ldd	r25, Y+4	; 0x04
    262c:	fc 01       	movw	r30, r24
    262e:	e2 0f       	add	r30, r18
    2630:	f3 1f       	adc	r31, r19
    2632:	80 81       	ld	r24, Z
    2634:	88 23       	and	r24, r24
    2636:	39 f7       	brne	.-50     	; 0x2606 <LCD_String+0x16>
		LCD_Char(str[i]);
	}
}
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <LCD_goToRowCol>:

void LCD_goToRowCol(unsigned char row , unsigned char col){
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	00 d0       	rcall	.+0      	; 0x264c <LCD_goToRowCol+0x6>
    264c:	00 d0       	rcall	.+0      	; 0x264e <LCD_goToRowCol+0x8>
    264e:	0f 92       	push	r0
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	8a 83       	std	Y+2, r24	; 0x02
    2656:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char Address =0;
    2658:	19 82       	std	Y+1, r1	; 0x01
	switch(row){
    265a:	8a 81       	ldd	r24, Y+2	; 0x02
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	3d 83       	std	Y+5, r19	; 0x05
    2662:	2c 83       	std	Y+4, r18	; 0x04
    2664:	8c 81       	ldd	r24, Y+4	; 0x04
    2666:	9d 81       	ldd	r25, Y+5	; 0x05
    2668:	81 30       	cpi	r24, 0x01	; 1
    266a:	91 05       	cpc	r25, r1
    266c:	c1 f0       	breq	.+48     	; 0x269e <LCD_goToRowCol+0x58>
    266e:	2c 81       	ldd	r18, Y+4	; 0x04
    2670:	3d 81       	ldd	r19, Y+5	; 0x05
    2672:	22 30       	cpi	r18, 0x02	; 2
    2674:	31 05       	cpc	r19, r1
    2676:	2c f4       	brge	.+10     	; 0x2682 <LCD_goToRowCol+0x3c>
    2678:	8c 81       	ldd	r24, Y+4	; 0x04
    267a:	9d 81       	ldd	r25, Y+5	; 0x05
    267c:	00 97       	sbiw	r24, 0x00	; 0
    267e:	61 f0       	breq	.+24     	; 0x2698 <LCD_goToRowCol+0x52>
    2680:	19 c0       	rjmp	.+50     	; 0x26b4 <LCD_goToRowCol+0x6e>
    2682:	2c 81       	ldd	r18, Y+4	; 0x04
    2684:	3d 81       	ldd	r19, Y+5	; 0x05
    2686:	22 30       	cpi	r18, 0x02	; 2
    2688:	31 05       	cpc	r19, r1
    268a:	69 f0       	breq	.+26     	; 0x26a6 <LCD_goToRowCol+0x60>
    268c:	8c 81       	ldd	r24, Y+4	; 0x04
    268e:	9d 81       	ldd	r25, Y+5	; 0x05
    2690:	83 30       	cpi	r24, 0x03	; 3
    2692:	91 05       	cpc	r25, r1
    2694:	61 f0       	breq	.+24     	; 0x26ae <LCD_goToRowCol+0x68>
    2696:	0e c0       	rjmp	.+28     	; 0x26b4 <LCD_goToRowCol+0x6e>
		case 0:
			Address = col;
    2698:	8b 81       	ldd	r24, Y+3	; 0x03
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	0b c0       	rjmp	.+22     	; 0x26b4 <LCD_goToRowCol+0x6e>
			break;
		case 1:
			Address = col+0x40;
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	80 5c       	subi	r24, 0xC0	; 192
    26a2:	89 83       	std	Y+1, r24	; 0x01
    26a4:	07 c0       	rjmp	.+14     	; 0x26b4 <LCD_goToRowCol+0x6e>
			break;
		case 2:
			Address = col+0x14;
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	8c 5e       	subi	r24, 0xEC	; 236
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	03 c0       	rjmp	.+6      	; 0x26b4 <LCD_goToRowCol+0x6e>
			break;
		case 3:
			Address = col+0x54;
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	8c 5a       	subi	r24, 0xAC	; 172
    26b2:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_Command(Address | SET_CURSOR_LOCATION);
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	80 68       	ori	r24, 0x80	; 128
    26b8:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_Command>
}
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <LCD_Clear>:

void LCD_Clear(void)
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
	LCD_Command(0x01);
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_Command>
}
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <Leds_Init>:
 */

#include "std_types.h"
#include "Leds.h"

void Leds_Init (void){
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
	/*Set Pins as output*/
SET_BIT(LED_GREEN_DDR,LED_GREEN_PIN_N);
    26e8:	aa e3       	ldi	r26, 0x3A	; 58
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	ea e3       	ldi	r30, 0x3A	; 58
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	80 61       	ori	r24, 0x10	; 16
    26f4:	8c 93       	st	X, r24
SET_BIT(LED_BLUE_DDR,LED_BLUE_PIN_N);
    26f6:	aa e3       	ldi	r26, 0x3A	; 58
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	ea e3       	ldi	r30, 0x3A	; 58
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	80 62       	ori	r24, 0x20	; 32
    2702:	8c 93       	st	X, r24
SET_BIT(LED_YELLOW_DDR,LED_YELLOW_PIN_N);
    2704:	aa e3       	ldi	r26, 0x3A	; 58
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	ea e3       	ldi	r30, 0x3A	; 58
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	80 64       	ori	r24, 0x40	; 64
    2710:	8c 93       	st	X, r24
SET_BIT(LED_RED_DDR,LED_RED_PIN_N);
    2712:	a7 e3       	ldi	r26, 0x37	; 55
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	e7 e3       	ldi	r30, 0x37	; 55
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	80 68       	ori	r24, 0x80	; 128
    271e:	8c 93       	st	X, r24
}
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <Leds_TurnOn>:


void Leds_TurnOn (uint8 col){
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	00 d0       	rcall	.+0      	; 0x272c <Leds_TurnOn+0x6>
    272c:	0f 92       	push	r0
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	89 83       	std	Y+1, r24	; 0x01
    switch(col){
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	28 2f       	mov	r18, r24
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	3b 83       	std	Y+3, r19	; 0x03
    273c:	2a 83       	std	Y+2, r18	; 0x02
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	9b 81       	ldd	r25, Y+3	; 0x03
    2742:	87 34       	cpi	r24, 0x47	; 71
    2744:	91 05       	cpc	r25, r1
    2746:	b1 f0       	breq	.+44     	; 0x2774 <Leds_TurnOn+0x4e>
    2748:	2a 81       	ldd	r18, Y+2	; 0x02
    274a:	3b 81       	ldd	r19, Y+3	; 0x03
    274c:	28 34       	cpi	r18, 0x48	; 72
    274e:	31 05       	cpc	r19, r1
    2750:	34 f4       	brge	.+12     	; 0x275e <Leds_TurnOn+0x38>
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	9b 81       	ldd	r25, Y+3	; 0x03
    2756:	82 34       	cpi	r24, 0x42	; 66
    2758:	91 05       	cpc	r25, r1
    275a:	a1 f0       	breq	.+40     	; 0x2784 <Leds_TurnOn+0x5e>
    275c:	2b c0       	rjmp	.+86     	; 0x27b4 <Leds_TurnOn+0x8e>
    275e:	2a 81       	ldd	r18, Y+2	; 0x02
    2760:	3b 81       	ldd	r19, Y+3	; 0x03
    2762:	22 35       	cpi	r18, 0x52	; 82
    2764:	31 05       	cpc	r19, r1
    2766:	f1 f0       	breq	.+60     	; 0x27a4 <Leds_TurnOn+0x7e>
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	9b 81       	ldd	r25, Y+3	; 0x03
    276c:	89 35       	cpi	r24, 0x59	; 89
    276e:	91 05       	cpc	r25, r1
    2770:	89 f0       	breq	.+34     	; 0x2794 <Leds_TurnOn+0x6e>
    2772:	20 c0       	rjmp	.+64     	; 0x27b4 <Leds_TurnOn+0x8e>
    case 'G':
    	SET_BIT(LED_GREEN_PORT,LED_GREEN_PIN_N);
    2774:	ab e3       	ldi	r26, 0x3B	; 59
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	eb e3       	ldi	r30, 0x3B	; 59
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	80 61       	ori	r24, 0x10	; 16
    2780:	8c 93       	st	X, r24
    2782:	34 c0       	rjmp	.+104    	; 0x27ec <Leds_TurnOn+0xc6>
    	break;
    case 'B':
    	SET_BIT(LED_BLUE_PORT,LED_BLUE_PIN_N);
    2784:	ab e3       	ldi	r26, 0x3B	; 59
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	eb e3       	ldi	r30, 0x3B	; 59
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	80 62       	ori	r24, 0x20	; 32
    2790:	8c 93       	st	X, r24
    2792:	2c c0       	rjmp	.+88     	; 0x27ec <Leds_TurnOn+0xc6>
    	break;
    case 'Y':
    	SET_BIT(LED_YELLOW_PORT,LED_YELLOW_PIN_N);
    2794:	ab e3       	ldi	r26, 0x3B	; 59
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	eb e3       	ldi	r30, 0x3B	; 59
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	80 64       	ori	r24, 0x40	; 64
    27a0:	8c 93       	st	X, r24
    27a2:	24 c0       	rjmp	.+72     	; 0x27ec <Leds_TurnOn+0xc6>
    	break;
    case 'R':
    	SET_BIT(LED_RED_PORT,LED_RED_PIN_N);
    27a4:	a8 e3       	ldi	r26, 0x38	; 56
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e8 e3       	ldi	r30, 0x38	; 56
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	80 68       	ori	r24, 0x80	; 128
    27b0:	8c 93       	st	X, r24
    27b2:	1c c0       	rjmp	.+56     	; 0x27ec <Leds_TurnOn+0xc6>
    	break;
    default:
    	SET_BIT(LED_GREEN_PORT,LED_GREEN_PIN_N);
    27b4:	ab e3       	ldi	r26, 0x3B	; 59
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	eb e3       	ldi	r30, 0x3B	; 59
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	80 61       	ori	r24, 0x10	; 16
    27c0:	8c 93       	st	X, r24
    	SET_BIT(LED_BLUE_PORT,LED_BLUE_PIN_N);
    27c2:	ab e3       	ldi	r26, 0x3B	; 59
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	eb e3       	ldi	r30, 0x3B	; 59
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	80 62       	ori	r24, 0x20	; 32
    27ce:	8c 93       	st	X, r24
    	SET_BIT(LED_YELLOW_PORT,LED_YELLOW_PIN_N);
    27d0:	ab e3       	ldi	r26, 0x3B	; 59
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	eb e3       	ldi	r30, 0x3B	; 59
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	80 64       	ori	r24, 0x40	; 64
    27dc:	8c 93       	st	X, r24
    	SET_BIT(LED_RED_PORT,LED_RED_PIN_N);
    27de:	a8 e3       	ldi	r26, 0x38	; 56
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e8 e3       	ldi	r30, 0x38	; 56
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	80 68       	ori	r24, 0x80	; 128
    27ea:	8c 93       	st	X, r24
    	break;

   }
}
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	08 95       	ret

000027f8 <Leds_TurnOff>:


void Leds_TurnOff (uint8 col){
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <Leds_TurnOff+0x6>
    27fe:	0f 92       	push	r0
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	89 83       	std	Y+1, r24	; 0x01
    switch(col){
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	28 2f       	mov	r18, r24
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	3b 83       	std	Y+3, r19	; 0x03
    280e:	2a 83       	std	Y+2, r18	; 0x02
    2810:	8a 81       	ldd	r24, Y+2	; 0x02
    2812:	9b 81       	ldd	r25, Y+3	; 0x03
    2814:	87 34       	cpi	r24, 0x47	; 71
    2816:	91 05       	cpc	r25, r1
    2818:	b1 f0       	breq	.+44     	; 0x2846 <Leds_TurnOff+0x4e>
    281a:	2a 81       	ldd	r18, Y+2	; 0x02
    281c:	3b 81       	ldd	r19, Y+3	; 0x03
    281e:	28 34       	cpi	r18, 0x48	; 72
    2820:	31 05       	cpc	r19, r1
    2822:	34 f4       	brge	.+12     	; 0x2830 <Leds_TurnOff+0x38>
    2824:	8a 81       	ldd	r24, Y+2	; 0x02
    2826:	9b 81       	ldd	r25, Y+3	; 0x03
    2828:	82 34       	cpi	r24, 0x42	; 66
    282a:	91 05       	cpc	r25, r1
    282c:	a1 f0       	breq	.+40     	; 0x2856 <Leds_TurnOff+0x5e>
    282e:	2b c0       	rjmp	.+86     	; 0x2886 <Leds_TurnOff+0x8e>
    2830:	2a 81       	ldd	r18, Y+2	; 0x02
    2832:	3b 81       	ldd	r19, Y+3	; 0x03
    2834:	22 35       	cpi	r18, 0x52	; 82
    2836:	31 05       	cpc	r19, r1
    2838:	f1 f0       	breq	.+60     	; 0x2876 <Leds_TurnOff+0x7e>
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	9b 81       	ldd	r25, Y+3	; 0x03
    283e:	89 35       	cpi	r24, 0x59	; 89
    2840:	91 05       	cpc	r25, r1
    2842:	89 f0       	breq	.+34     	; 0x2866 <Leds_TurnOff+0x6e>
    2844:	20 c0       	rjmp	.+64     	; 0x2886 <Leds_TurnOff+0x8e>
    case 'G':
    	CLR_BIT(LED_GREEN_PORT,LED_GREEN_PIN_N);
    2846:	ab e3       	ldi	r26, 0x3B	; 59
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	eb e3       	ldi	r30, 0x3B	; 59
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	8f 7e       	andi	r24, 0xEF	; 239
    2852:	8c 93       	st	X, r24
    2854:	34 c0       	rjmp	.+104    	; 0x28be <Leds_TurnOff+0xc6>
    	break;
    case 'B':
    	CLR_BIT(LED_BLUE_PORT,LED_BLUE_PIN_N);
    2856:	ab e3       	ldi	r26, 0x3B	; 59
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	eb e3       	ldi	r30, 0x3B	; 59
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	8f 7d       	andi	r24, 0xDF	; 223
    2862:	8c 93       	st	X, r24
    2864:	2c c0       	rjmp	.+88     	; 0x28be <Leds_TurnOff+0xc6>
    	break;
    case 'Y':
    	CLR_BIT(LED_YELLOW_PORT,LED_YELLOW_PIN_N);
    2866:	ab e3       	ldi	r26, 0x3B	; 59
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	eb e3       	ldi	r30, 0x3B	; 59
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	8f 7b       	andi	r24, 0xBF	; 191
    2872:	8c 93       	st	X, r24
    2874:	24 c0       	rjmp	.+72     	; 0x28be <Leds_TurnOff+0xc6>
    	break;
    case 'R':
    	CLR_BIT(LED_RED_PORT,LED_RED_PIN_N);
    2876:	a8 e3       	ldi	r26, 0x38	; 56
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	e8 e3       	ldi	r30, 0x38	; 56
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	8f 77       	andi	r24, 0x7F	; 127
    2882:	8c 93       	st	X, r24
    2884:	1c c0       	rjmp	.+56     	; 0x28be <Leds_TurnOff+0xc6>
    	break;
    default:
    	CLR_BIT(LED_GREEN_PORT,LED_GREEN_PIN_N);
    2886:	ab e3       	ldi	r26, 0x3B	; 59
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	eb e3       	ldi	r30, 0x3B	; 59
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	8f 7e       	andi	r24, 0xEF	; 239
    2892:	8c 93       	st	X, r24
    	CLR_BIT(LED_BLUE_PORT,LED_BLUE_PIN_N);
    2894:	ab e3       	ldi	r26, 0x3B	; 59
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	eb e3       	ldi	r30, 0x3B	; 59
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	8f 7d       	andi	r24, 0xDF	; 223
    28a0:	8c 93       	st	X, r24
    	CLR_BIT(LED_YELLOW_PORT,LED_YELLOW_PIN_N);
    28a2:	ab e3       	ldi	r26, 0x3B	; 59
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	eb e3       	ldi	r30, 0x3B	; 59
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	8f 7b       	andi	r24, 0xBF	; 191
    28ae:	8c 93       	st	X, r24
    	CLR_BIT(LED_RED_PORT,LED_RED_PIN_N);
    28b0:	a8 e3       	ldi	r26, 0x38	; 56
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	e8 e3       	ldi	r30, 0x38	; 56
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	8f 77       	andi	r24, 0x7F	; 127
    28bc:	8c 93       	st	X, r24
    	break;

   }
}
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	08 95       	ret

000028ca <Leds_TurnTog>:

void Leds_TurnTog (uint8 col){
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <Leds_TurnTog+0x6>
    28d0:	0f 92       	push	r0
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	89 83       	std	Y+1, r24	; 0x01
    switch(col){
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	3b 83       	std	Y+3, r19	; 0x03
    28e0:	2a 83       	std	Y+2, r18	; 0x02
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	9b 81       	ldd	r25, Y+3	; 0x03
    28e6:	87 34       	cpi	r24, 0x47	; 71
    28e8:	91 05       	cpc	r25, r1
    28ea:	b1 f0       	breq	.+44     	; 0x2918 <Leds_TurnTog+0x4e>
    28ec:	2a 81       	ldd	r18, Y+2	; 0x02
    28ee:	3b 81       	ldd	r19, Y+3	; 0x03
    28f0:	28 34       	cpi	r18, 0x48	; 72
    28f2:	31 05       	cpc	r19, r1
    28f4:	34 f4       	brge	.+12     	; 0x2902 <Leds_TurnTog+0x38>
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	9b 81       	ldd	r25, Y+3	; 0x03
    28fa:	82 34       	cpi	r24, 0x42	; 66
    28fc:	91 05       	cpc	r25, r1
    28fe:	a9 f0       	breq	.+42     	; 0x292a <Leds_TurnTog+0x60>
    2900:	2f c0       	rjmp	.+94     	; 0x2960 <Leds_TurnTog+0x96>
    2902:	2a 81       	ldd	r18, Y+2	; 0x02
    2904:	3b 81       	ldd	r19, Y+3	; 0x03
    2906:	22 35       	cpi	r18, 0x52	; 82
    2908:	31 05       	cpc	r19, r1
    290a:	09 f1       	breq	.+66     	; 0x294e <Leds_TurnTog+0x84>
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	9b 81       	ldd	r25, Y+3	; 0x03
    2910:	89 35       	cpi	r24, 0x59	; 89
    2912:	91 05       	cpc	r25, r1
    2914:	99 f0       	breq	.+38     	; 0x293c <Leds_TurnTog+0x72>
    2916:	24 c0       	rjmp	.+72     	; 0x2960 <Leds_TurnTog+0x96>
    case 'G':
    	TOGGLE_BIT(LED_GREEN_PORT,LED_GREEN_PIN_N);
    2918:	ab e3       	ldi	r26, 0x3B	; 59
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	eb e3       	ldi	r30, 0x3B	; 59
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	90 81       	ld	r25, Z
    2922:	80 e1       	ldi	r24, 0x10	; 16
    2924:	89 27       	eor	r24, r25
    2926:	8c 93       	st	X, r24
    2928:	3b c0       	rjmp	.+118    	; 0x29a0 <Leds_TurnTog+0xd6>
    	break;
    case 'B':
    	TOGGLE_BIT(LED_BLUE_PORT,LED_BLUE_PIN_N);
    292a:	ab e3       	ldi	r26, 0x3B	; 59
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	eb e3       	ldi	r30, 0x3B	; 59
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	90 81       	ld	r25, Z
    2934:	80 e2       	ldi	r24, 0x20	; 32
    2936:	89 27       	eor	r24, r25
    2938:	8c 93       	st	X, r24
    293a:	32 c0       	rjmp	.+100    	; 0x29a0 <Leds_TurnTog+0xd6>
    	break;
    case 'Y':
    	TOGGLE_BIT(LED_YELLOW_PORT,LED_YELLOW_PIN_N);
    293c:	ab e3       	ldi	r26, 0x3B	; 59
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	eb e3       	ldi	r30, 0x3B	; 59
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	90 81       	ld	r25, Z
    2946:	80 e4       	ldi	r24, 0x40	; 64
    2948:	89 27       	eor	r24, r25
    294a:	8c 93       	st	X, r24
    294c:	29 c0       	rjmp	.+82     	; 0x29a0 <Leds_TurnTog+0xd6>
    	break;
    case 'R':
    	TOGGLE_BIT(LED_RED_PORT,LED_RED_PIN_N);
    294e:	a8 e3       	ldi	r26, 0x38	; 56
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	e8 e3       	ldi	r30, 0x38	; 56
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	90 81       	ld	r25, Z
    2958:	80 e8       	ldi	r24, 0x80	; 128
    295a:	89 27       	eor	r24, r25
    295c:	8c 93       	st	X, r24
    295e:	20 c0       	rjmp	.+64     	; 0x29a0 <Leds_TurnTog+0xd6>
    	break;
    default:
    	TOGGLE_BIT(LED_GREEN_PORT,LED_GREEN_PIN_N);
    2960:	ab e3       	ldi	r26, 0x3B	; 59
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	eb e3       	ldi	r30, 0x3B	; 59
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	90 81       	ld	r25, Z
    296a:	80 e1       	ldi	r24, 0x10	; 16
    296c:	89 27       	eor	r24, r25
    296e:	8c 93       	st	X, r24
    	TOGGLE_BIT(LED_BLUE_PORT,LED_BLUE_PIN_N);
    2970:	ab e3       	ldi	r26, 0x3B	; 59
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	eb e3       	ldi	r30, 0x3B	; 59
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	90 81       	ld	r25, Z
    297a:	80 e2       	ldi	r24, 0x20	; 32
    297c:	89 27       	eor	r24, r25
    297e:	8c 93       	st	X, r24
    	TOGGLE_BIT(LED_YELLOW_PORT,LED_YELLOW_PIN_N);
    2980:	ab e3       	ldi	r26, 0x3B	; 59
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	eb e3       	ldi	r30, 0x3B	; 59
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	90 81       	ld	r25, Z
    298a:	80 e4       	ldi	r24, 0x40	; 64
    298c:	89 27       	eor	r24, r25
    298e:	8c 93       	st	X, r24
    	TOGGLE_BIT(LED_RED_PORT,LED_RED_PIN_N);
    2990:	a8 e3       	ldi	r26, 0x38	; 56
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	e8 e3       	ldi	r30, 0x38	; 56
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	90 81       	ld	r25, Z
    299a:	80 e8       	ldi	r24, 0x80	; 128
    299c:	89 27       	eor	r24, r25
    299e:	8c 93       	st	X, r24
    	break;

   }
}
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	08 95       	ret

000029ac <SEVENSEG_init>:
#include "BIT_MATH.h"
#include "std_types.h"
#include <util/delay.h>

void SEVENSEG_init()
{
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRB,0);
    29b4:	a7 e3       	ldi	r26, 0x37	; 55
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	e7 e3       	ldi	r30, 0x37	; 55
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	81 60       	ori	r24, 0x01	; 1
    29c0:	8c 93       	st	X, r24
	SET_BIT(DDRB,1);
    29c2:	a7 e3       	ldi	r26, 0x37	; 55
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e7 e3       	ldi	r30, 0x37	; 55
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	82 60       	ori	r24, 0x02	; 2
    29ce:	8c 93       	st	X, r24
	SET_BIT(DDRB,2);
    29d0:	a7 e3       	ldi	r26, 0x37	; 55
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e7 e3       	ldi	r30, 0x37	; 55
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	84 60       	ori	r24, 0x04	; 4
    29dc:	8c 93       	st	X, r24
	SET_BIT(DDRB,4);
    29de:	a7 e3       	ldi	r26, 0x37	; 55
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e7 e3       	ldi	r30, 0x37	; 55
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	80 61       	ori	r24, 0x10	; 16
    29ea:	8c 93       	st	X, r24
	PORTB &= 0b11101000;
    29ec:	a8 e3       	ldi	r26, 0x38	; 56
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	e8 e3       	ldi	r30, 0x38	; 56
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	88 7e       	andi	r24, 0xE8	; 232
    29f8:	8c 93       	st	X, r24


	SET_BIT(DDRB,6);
    29fa:	a7 e3       	ldi	r26, 0x37	; 55
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e7 e3       	ldi	r30, 0x37	; 55
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	80 64       	ori	r24, 0x40	; 64
    2a06:	8c 93       	st	X, r24
	SET_BIT(DDRB,5);
    2a08:	a7 e3       	ldi	r26, 0x37	; 55
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e7 e3       	ldi	r30, 0x37	; 55
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	80 62       	ori	r24, 0x20	; 32
    2a14:	8c 93       	st	X, r24
	SET_BIT(DDRA,2);
    2a16:	aa e3       	ldi	r26, 0x3A	; 58
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	ea e3       	ldi	r30, 0x3A	; 58
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	84 60       	ori	r24, 0x04	; 4
    2a22:	8c 93       	st	X, r24
	SET_BIT(DDRA,3);
    2a24:	aa e3       	ldi	r26, 0x3A	; 58
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	ea e3       	ldi	r30, 0x3A	; 58
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	88 60       	ori	r24, 0x08	; 8
    2a30:	8c 93       	st	X, r24


}
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <SEVENSEG_display>:



void SEVENSEG_display(int num)
{
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <SEVENSEG_display+0x6>
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	9a 83       	std	Y+2, r25	; 0x02
    2a44:	89 83       	std	Y+1, r24	; 0x01

	PORTB &= 0b11101000;
    2a46:	a8 e3       	ldi	r26, 0x38	; 56
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e8 e3       	ldi	r30, 0x38	; 56
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	88 7e       	andi	r24, 0xE8	; 232
    2a52:	8c 93       	st	X, r24
	PORTB |= (((num & 0b00001000)<<1)|(num & 0b00000111));
    2a54:	a8 e3       	ldi	r26, 0x38	; 56
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	e8 e3       	ldi	r30, 0x38	; 56
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	28 2f       	mov	r18, r24
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	9a 81       	ldd	r25, Y+2	; 0x02
    2a64:	88 70       	andi	r24, 0x08	; 8
    2a66:	90 70       	andi	r25, 0x00	; 0
    2a68:	88 0f       	add	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	98 2f       	mov	r25, r24
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	87 70       	andi	r24, 0x07	; 7
    2a72:	89 2b       	or	r24, r25
    2a74:	82 2b       	or	r24, r18
    2a76:	8c 93       	st	X, r24


}
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <disply_number>:
void disply_number(int number)
{
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	c4 54       	subi	r28, 0x44	; 68
    2a8c:	d0 40       	sbci	r29, 0x00	; 0
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	fe 01       	movw	r30, r28
    2a9a:	ed 5b       	subi	r30, 0xBD	; 189
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	91 83       	std	Z+1, r25	; 0x01
    2aa0:	80 83       	st	Z, r24
	int digit4 = ( number / 1000) % 10;
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	ed 5b       	subi	r30, 0xBD	; 189
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	80 81       	ld	r24, Z
    2aaa:	91 81       	ldd	r25, Z+1	; 0x01
    2aac:	28 ee       	ldi	r18, 0xE8	; 232
    2aae:	33 e0       	ldi	r19, 0x03	; 3
    2ab0:	b9 01       	movw	r22, r18
    2ab2:	0e 94 02 1c 	call	0x3804	; 0x3804 <__divmodhi4>
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	fe 01       	movw	r30, r28
    2aba:	ef 5b       	subi	r30, 0xBF	; 191
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	2a e0       	ldi	r18, 0x0A	; 10
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	b9 01       	movw	r22, r18
    2ac4:	0e 94 02 1c 	call	0x3804	; 0x3804 <__divmodhi4>
    2ac8:	91 83       	std	Z+1, r25	; 0x01
    2aca:	80 83       	st	Z, r24
	int digit3 = ( number / 100) % 10;
    2acc:	fe 01       	movw	r30, r28
    2ace:	ed 5b       	subi	r30, 0xBD	; 189
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	80 81       	ld	r24, Z
    2ad4:	91 81       	ldd	r25, Z+1	; 0x01
    2ad6:	24 e6       	ldi	r18, 0x64	; 100
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	b9 01       	movw	r22, r18
    2adc:	0e 94 02 1c 	call	0x3804	; 0x3804 <__divmodhi4>
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	2a e0       	ldi	r18, 0x0A	; 10
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	b9 01       	movw	r22, r18
    2ae8:	0e 94 02 1c 	call	0x3804	; 0x3804 <__divmodhi4>
    2aec:	fe 01       	movw	r30, r28
    2aee:	ff 96       	adiw	r30, 0x3f	; 63
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	80 83       	st	Z, r24
	int digit2 = ( number / 10) % 10;
    2af4:	fe 01       	movw	r30, r28
    2af6:	ed 5b       	subi	r30, 0xBD	; 189
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	80 81       	ld	r24, Z
    2afc:	91 81       	ldd	r25, Z+1	; 0x01
    2afe:	2a e0       	ldi	r18, 0x0A	; 10
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	b9 01       	movw	r22, r18
    2b04:	0e 94 02 1c 	call	0x3804	; 0x3804 <__divmodhi4>
    2b08:	cb 01       	movw	r24, r22
    2b0a:	2a e0       	ldi	r18, 0x0A	; 10
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	b9 01       	movw	r22, r18
    2b10:	0e 94 02 1c 	call	0x3804	; 0x3804 <__divmodhi4>
    2b14:	9e af       	std	Y+62, r25	; 0x3e
    2b16:	8d af       	std	Y+61, r24	; 0x3d
	int digit1 =  (number/ 1 ) % 10;
    2b18:	fe 01       	movw	r30, r28
    2b1a:	ed 5b       	subi	r30, 0xBD	; 189
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	80 81       	ld	r24, Z
    2b20:	91 81       	ldd	r25, Z+1	; 0x01
    2b22:	2a e0       	ldi	r18, 0x0A	; 10
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	b9 01       	movw	r22, r18
    2b28:	0e 94 02 1c 	call	0x3804	; 0x3804 <__divmodhi4>
    2b2c:	9c af       	std	Y+60, r25	; 0x3c
    2b2e:	8b af       	std	Y+59, r24	; 0x3b

	// Display the digits on the four-digit seven-segment display
	uint16_t start_time = 0;
    2b30:	1a ae       	std	Y+58, r1	; 0x3a
    2b32:	19 ae       	std	Y+57, r1	; 0x39
    2b34:	02 c2       	rjmp	.+1028   	; 0x2f3a <disply_number+0x4b8>
	while (start_time < 1000) // Delay for 1 seconds
	{

		SEVENSEG_display(digit4);
    2b36:	fe 01       	movw	r30, r28
    2b38:	ef 5b       	subi	r30, 0xBF	; 191
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	80 81       	ld	r24, Z
    2b3e:	91 81       	ldd	r25, Z+1	; 0x01
    2b40:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <SEVENSEG_display>
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	a0 e0       	ldi	r26, 0x00	; 0
    2b4a:	b0 e4       	ldi	r27, 0x40	; 64
    2b4c:	8d ab       	std	Y+53, r24	; 0x35
    2b4e:	9e ab       	std	Y+54, r25	; 0x36
    2b50:	af ab       	std	Y+55, r26	; 0x37
    2b52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b54:	6d a9       	ldd	r22, Y+53	; 0x35
    2b56:	7e a9       	ldd	r23, Y+54	; 0x36
    2b58:	8f a9       	ldd	r24, Y+55	; 0x37
    2b5a:	98 ad       	ldd	r25, Y+56	; 0x38
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	4a e7       	ldi	r20, 0x7A	; 122
    2b62:	55 e4       	ldi	r21, 0x45	; 69
    2b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	89 ab       	std	Y+49, r24	; 0x31
    2b6e:	9a ab       	std	Y+50, r25	; 0x32
    2b70:	ab ab       	std	Y+51, r26	; 0x33
    2b72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b74:	69 a9       	ldd	r22, Y+49	; 0x31
    2b76:	7a a9       	ldd	r23, Y+50	; 0x32
    2b78:	8b a9       	ldd	r24, Y+51	; 0x33
    2b7a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e8       	ldi	r20, 0x80	; 128
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b88:	88 23       	and	r24, r24
    2b8a:	2c f4       	brge	.+10     	; 0x2b96 <disply_number+0x114>
		__ticks = 1;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	98 ab       	std	Y+48, r25	; 0x30
    2b92:	8f a7       	std	Y+47, r24	; 0x2f
    2b94:	3f c0       	rjmp	.+126    	; 0x2c14 <disply_number+0x192>
	else if (__tmp > 65535)
    2b96:	69 a9       	ldd	r22, Y+49	; 0x31
    2b98:	7a a9       	ldd	r23, Y+50	; 0x32
    2b9a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b9c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	3f ef       	ldi	r19, 0xFF	; 255
    2ba2:	4f e7       	ldi	r20, 0x7F	; 127
    2ba4:	57 e4       	ldi	r21, 0x47	; 71
    2ba6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2baa:	18 16       	cp	r1, r24
    2bac:	4c f5       	brge	.+82     	; 0x2c00 <disply_number+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bae:	6d a9       	ldd	r22, Y+53	; 0x35
    2bb0:	7e a9       	ldd	r23, Y+54	; 0x36
    2bb2:	8f a9       	ldd	r24, Y+55	; 0x37
    2bb4:	98 ad       	ldd	r25, Y+56	; 0x38
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e2       	ldi	r20, 0x20	; 32
    2bbc:	51 e4       	ldi	r21, 0x41	; 65
    2bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	98 ab       	std	Y+48, r25	; 0x30
    2bd4:	8f a7       	std	Y+47, r24	; 0x2f
    2bd6:	0f c0       	rjmp	.+30     	; 0x2bf6 <disply_number+0x174>
    2bd8:	80 e9       	ldi	r24, 0x90	; 144
    2bda:	91 e0       	ldi	r25, 0x01	; 1
    2bdc:	9e a7       	std	Y+46, r25	; 0x2e
    2bde:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2be0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2be2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <disply_number+0x162>
    2be8:	9e a7       	std	Y+46, r25	; 0x2e
    2bea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bec:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bee:	98 a9       	ldd	r25, Y+48	; 0x30
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	98 ab       	std	Y+48, r25	; 0x30
    2bf4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bf8:	98 a9       	ldd	r25, Y+48	; 0x30
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	69 f7       	brne	.-38     	; 0x2bd8 <disply_number+0x156>
    2bfe:	14 c0       	rjmp	.+40     	; 0x2c28 <disply_number+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c00:	69 a9       	ldd	r22, Y+49	; 0x31
    2c02:	7a a9       	ldd	r23, Y+50	; 0x32
    2c04:	8b a9       	ldd	r24, Y+51	; 0x33
    2c06:	9c a9       	ldd	r25, Y+52	; 0x34
    2c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	98 ab       	std	Y+48, r25	; 0x30
    2c12:	8f a7       	std	Y+47, r24	; 0x2f
    2c14:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c16:	98 a9       	ldd	r25, Y+48	; 0x30
    2c18:	9c a7       	std	Y+44, r25	; 0x2c
    2c1a:	8b a7       	std	Y+43, r24	; 0x2b
    2c1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <disply_number+0x19e>
    2c24:	9c a7       	std	Y+44, r25	; 0x2c
    2c26:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		TOGGLE_BIT(PORTB,6);
    2c28:	a8 e3       	ldi	r26, 0x38	; 56
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	e8 e3       	ldi	r30, 0x38	; 56
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	90 81       	ld	r25, Z
    2c32:	80 e4       	ldi	r24, 0x40	; 64
    2c34:	89 27       	eor	r24, r25
    2c36:	8c 93       	st	X, r24
		SEVENSEG_display(digit3);
    2c38:	fe 01       	movw	r30, r28
    2c3a:	ff 96       	adiw	r30, 0x3f	; 63
    2c3c:	80 81       	ld	r24, Z
    2c3e:	91 81       	ldd	r25, Z+1	; 0x01
    2c40:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <SEVENSEG_display>
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	a0 e0       	ldi	r26, 0x00	; 0
    2c4a:	b0 e4       	ldi	r27, 0x40	; 64
    2c4c:	8f a3       	std	Y+39, r24	; 0x27
    2c4e:	98 a7       	std	Y+40, r25	; 0x28
    2c50:	a9 a7       	std	Y+41, r26	; 0x29
    2c52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c54:	6f a1       	ldd	r22, Y+39	; 0x27
    2c56:	78 a5       	ldd	r23, Y+40	; 0x28
    2c58:	89 a5       	ldd	r24, Y+41	; 0x29
    2c5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	4a e7       	ldi	r20, 0x7A	; 122
    2c62:	55 e4       	ldi	r21, 0x45	; 69
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	8b a3       	std	Y+35, r24	; 0x23
    2c6e:	9c a3       	std	Y+36, r25	; 0x24
    2c70:	ad a3       	std	Y+37, r26	; 0x25
    2c72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c74:	6b a1       	ldd	r22, Y+35	; 0x23
    2c76:	7c a1       	ldd	r23, Y+36	; 0x24
    2c78:	8d a1       	ldd	r24, Y+37	; 0x25
    2c7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e8       	ldi	r20, 0x80	; 128
    2c82:	5f e3       	ldi	r21, 0x3F	; 63
    2c84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c88:	88 23       	and	r24, r24
    2c8a:	2c f4       	brge	.+10     	; 0x2c96 <disply_number+0x214>
		__ticks = 1;
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	9a a3       	std	Y+34, r25	; 0x22
    2c92:	89 a3       	std	Y+33, r24	; 0x21
    2c94:	3f c0       	rjmp	.+126    	; 0x2d14 <disply_number+0x292>
	else if (__tmp > 65535)
    2c96:	6b a1       	ldd	r22, Y+35	; 0x23
    2c98:	7c a1       	ldd	r23, Y+36	; 0x24
    2c9a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c9c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	3f ef       	ldi	r19, 0xFF	; 255
    2ca2:	4f e7       	ldi	r20, 0x7F	; 127
    2ca4:	57 e4       	ldi	r21, 0x47	; 71
    2ca6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2caa:	18 16       	cp	r1, r24
    2cac:	4c f5       	brge	.+82     	; 0x2d00 <disply_number+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cae:	6f a1       	ldd	r22, Y+39	; 0x27
    2cb0:	78 a5       	ldd	r23, Y+40	; 0x28
    2cb2:	89 a5       	ldd	r24, Y+41	; 0x29
    2cb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 e2       	ldi	r20, 0x20	; 32
    2cbc:	51 e4       	ldi	r21, 0x41	; 65
    2cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	9a a3       	std	Y+34, r25	; 0x22
    2cd4:	89 a3       	std	Y+33, r24	; 0x21
    2cd6:	0f c0       	rjmp	.+30     	; 0x2cf6 <disply_number+0x274>
    2cd8:	80 e9       	ldi	r24, 0x90	; 144
    2cda:	91 e0       	ldi	r25, 0x01	; 1
    2cdc:	98 a3       	std	Y+32, r25	; 0x20
    2cde:	8f 8f       	std	Y+31, r24	; 0x1f
    2ce0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ce2:	98 a1       	ldd	r25, Y+32	; 0x20
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <disply_number+0x262>
    2ce8:	98 a3       	std	Y+32, r25	; 0x20
    2cea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cec:	89 a1       	ldd	r24, Y+33	; 0x21
    2cee:	9a a1       	ldd	r25, Y+34	; 0x22
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	9a a3       	std	Y+34, r25	; 0x22
    2cf4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf6:	89 a1       	ldd	r24, Y+33	; 0x21
    2cf8:	9a a1       	ldd	r25, Y+34	; 0x22
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	69 f7       	brne	.-38     	; 0x2cd8 <disply_number+0x256>
    2cfe:	14 c0       	rjmp	.+40     	; 0x2d28 <disply_number+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d00:	6b a1       	ldd	r22, Y+35	; 0x23
    2d02:	7c a1       	ldd	r23, Y+36	; 0x24
    2d04:	8d a1       	ldd	r24, Y+37	; 0x25
    2d06:	9e a1       	ldd	r25, Y+38	; 0x26
    2d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	9a a3       	std	Y+34, r25	; 0x22
    2d12:	89 a3       	std	Y+33, r24	; 0x21
    2d14:	89 a1       	ldd	r24, Y+33	; 0x21
    2d16:	9a a1       	ldd	r25, Y+34	; 0x22
    2d18:	9e 8f       	std	Y+30, r25	; 0x1e
    2d1a:	8d 8f       	std	Y+29, r24	; 0x1d
    2d1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	f1 f7       	brne	.-4      	; 0x2d20 <disply_number+0x29e>
    2d24:	9e 8f       	std	Y+30, r25	; 0x1e
    2d26:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);
		TOGGLE_BIT(PORTB,5);
    2d28:	a8 e3       	ldi	r26, 0x38	; 56
    2d2a:	b0 e0       	ldi	r27, 0x00	; 0
    2d2c:	e8 e3       	ldi	r30, 0x38	; 56
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	90 81       	ld	r25, Z
    2d32:	80 e2       	ldi	r24, 0x20	; 32
    2d34:	89 27       	eor	r24, r25
    2d36:	8c 93       	st	X, r24
		SEVENSEG_display(digit2);
    2d38:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d3c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <SEVENSEG_display>
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	a0 e0       	ldi	r26, 0x00	; 0
    2d46:	b0 e4       	ldi	r27, 0x40	; 64
    2d48:	89 8f       	std	Y+25, r24	; 0x19
    2d4a:	9a 8f       	std	Y+26, r25	; 0x1a
    2d4c:	ab 8f       	std	Y+27, r26	; 0x1b
    2d4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d50:	69 8d       	ldd	r22, Y+25	; 0x19
    2d52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	4a e7       	ldi	r20, 0x7A	; 122
    2d5e:	55 e4       	ldi	r21, 0x45	; 69
    2d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	8d 8b       	std	Y+21, r24	; 0x15
    2d6a:	9e 8b       	std	Y+22, r25	; 0x16
    2d6c:	af 8b       	std	Y+23, r26	; 0x17
    2d6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d70:	6d 89       	ldd	r22, Y+21	; 0x15
    2d72:	7e 89       	ldd	r23, Y+22	; 0x16
    2d74:	8f 89       	ldd	r24, Y+23	; 0x17
    2d76:	98 8d       	ldd	r25, Y+24	; 0x18
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	40 e8       	ldi	r20, 0x80	; 128
    2d7e:	5f e3       	ldi	r21, 0x3F	; 63
    2d80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d84:	88 23       	and	r24, r24
    2d86:	2c f4       	brge	.+10     	; 0x2d92 <disply_number+0x310>
		__ticks = 1;
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	9c 8b       	std	Y+20, r25	; 0x14
    2d8e:	8b 8b       	std	Y+19, r24	; 0x13
    2d90:	3f c0       	rjmp	.+126    	; 0x2e10 <disply_number+0x38e>
	else if (__tmp > 65535)
    2d92:	6d 89       	ldd	r22, Y+21	; 0x15
    2d94:	7e 89       	ldd	r23, Y+22	; 0x16
    2d96:	8f 89       	ldd	r24, Y+23	; 0x17
    2d98:	98 8d       	ldd	r25, Y+24	; 0x18
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	3f ef       	ldi	r19, 0xFF	; 255
    2d9e:	4f e7       	ldi	r20, 0x7F	; 127
    2da0:	57 e4       	ldi	r21, 0x47	; 71
    2da2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2da6:	18 16       	cp	r1, r24
    2da8:	4c f5       	brge	.+82     	; 0x2dfc <disply_number+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2daa:	69 8d       	ldd	r22, Y+25	; 0x19
    2dac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2db0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e2       	ldi	r20, 0x20	; 32
    2db8:	51 e4       	ldi	r21, 0x41	; 65
    2dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	bc 01       	movw	r22, r24
    2dc4:	cd 01       	movw	r24, r26
    2dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	9c 8b       	std	Y+20, r25	; 0x14
    2dd0:	8b 8b       	std	Y+19, r24	; 0x13
    2dd2:	0f c0       	rjmp	.+30     	; 0x2df2 <disply_number+0x370>
    2dd4:	80 e9       	ldi	r24, 0x90	; 144
    2dd6:	91 e0       	ldi	r25, 0x01	; 1
    2dd8:	9a 8b       	std	Y+18, r25	; 0x12
    2dda:	89 8b       	std	Y+17, r24	; 0x11
    2ddc:	89 89       	ldd	r24, Y+17	; 0x11
    2dde:	9a 89       	ldd	r25, Y+18	; 0x12
    2de0:	01 97       	sbiw	r24, 0x01	; 1
    2de2:	f1 f7       	brne	.-4      	; 0x2de0 <disply_number+0x35e>
    2de4:	9a 8b       	std	Y+18, r25	; 0x12
    2de6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dea:	9c 89       	ldd	r25, Y+20	; 0x14
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	9c 8b       	std	Y+20, r25	; 0x14
    2df0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df2:	8b 89       	ldd	r24, Y+19	; 0x13
    2df4:	9c 89       	ldd	r25, Y+20	; 0x14
    2df6:	00 97       	sbiw	r24, 0x00	; 0
    2df8:	69 f7       	brne	.-38     	; 0x2dd4 <disply_number+0x352>
    2dfa:	14 c0       	rjmp	.+40     	; 0x2e24 <disply_number+0x3a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dfe:	7e 89       	ldd	r23, Y+22	; 0x16
    2e00:	8f 89       	ldd	r24, Y+23	; 0x17
    2e02:	98 8d       	ldd	r25, Y+24	; 0x18
    2e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	9c 8b       	std	Y+20, r25	; 0x14
    2e0e:	8b 8b       	std	Y+19, r24	; 0x13
    2e10:	8b 89       	ldd	r24, Y+19	; 0x13
    2e12:	9c 89       	ldd	r25, Y+20	; 0x14
    2e14:	98 8b       	std	Y+16, r25	; 0x10
    2e16:	8f 87       	std	Y+15, r24	; 0x0f
    2e18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e1a:	98 89       	ldd	r25, Y+16	; 0x10
    2e1c:	01 97       	sbiw	r24, 0x01	; 1
    2e1e:	f1 f7       	brne	.-4      	; 0x2e1c <disply_number+0x39a>
    2e20:	98 8b       	std	Y+16, r25	; 0x10
    2e22:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		TOGGLE_BIT(PORTA,2);
    2e24:	ab e3       	ldi	r26, 0x3B	; 59
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	eb e3       	ldi	r30, 0x3B	; 59
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	90 81       	ld	r25, Z
    2e2e:	84 e0       	ldi	r24, 0x04	; 4
    2e30:	89 27       	eor	r24, r25
    2e32:	8c 93       	st	X, r24
		SEVENSEG_display(digit1);
    2e34:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e36:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e38:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <SEVENSEG_display>
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	a0 e0       	ldi	r26, 0x00	; 0
    2e42:	b0 e4       	ldi	r27, 0x40	; 64
    2e44:	8b 87       	std	Y+11, r24	; 0x0b
    2e46:	9c 87       	std	Y+12, r25	; 0x0c
    2e48:	ad 87       	std	Y+13, r26	; 0x0d
    2e4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	4a e7       	ldi	r20, 0x7A	; 122
    2e5a:	55 e4       	ldi	r21, 0x45	; 69
    2e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	8f 83       	std	Y+7, r24	; 0x07
    2e66:	98 87       	std	Y+8, r25	; 0x08
    2e68:	a9 87       	std	Y+9, r26	; 0x09
    2e6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6e:	78 85       	ldd	r23, Y+8	; 0x08
    2e70:	89 85       	ldd	r24, Y+9	; 0x09
    2e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e8       	ldi	r20, 0x80	; 128
    2e7a:	5f e3       	ldi	r21, 0x3F	; 63
    2e7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e80:	88 23       	and	r24, r24
    2e82:	2c f4       	brge	.+10     	; 0x2e8e <disply_number+0x40c>
		__ticks = 1;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	9e 83       	std	Y+6, r25	; 0x06
    2e8a:	8d 83       	std	Y+5, r24	; 0x05
    2e8c:	3f c0       	rjmp	.+126    	; 0x2f0c <disply_number+0x48a>
	else if (__tmp > 65535)
    2e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e90:	78 85       	ldd	r23, Y+8	; 0x08
    2e92:	89 85       	ldd	r24, Y+9	; 0x09
    2e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	3f ef       	ldi	r19, 0xFF	; 255
    2e9a:	4f e7       	ldi	r20, 0x7F	; 127
    2e9c:	57 e4       	ldi	r21, 0x47	; 71
    2e9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ea2:	18 16       	cp	r1, r24
    2ea4:	4c f5       	brge	.+82     	; 0x2ef8 <disply_number+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e2       	ldi	r20, 0x20	; 32
    2eb4:	51 e4       	ldi	r21, 0x41	; 65
    2eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	bc 01       	movw	r22, r24
    2ec0:	cd 01       	movw	r24, r26
    2ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	9e 83       	std	Y+6, r25	; 0x06
    2ecc:	8d 83       	std	Y+5, r24	; 0x05
    2ece:	0f c0       	rjmp	.+30     	; 0x2eee <disply_number+0x46c>
    2ed0:	80 e9       	ldi	r24, 0x90	; 144
    2ed2:	91 e0       	ldi	r25, 0x01	; 1
    2ed4:	9c 83       	std	Y+4, r25	; 0x04
    2ed6:	8b 83       	std	Y+3, r24	; 0x03
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eda:	9c 81       	ldd	r25, Y+4	; 0x04
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <disply_number+0x45a>
    2ee0:	9c 83       	std	Y+4, r25	; 0x04
    2ee2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	9e 83       	std	Y+6, r25	; 0x06
    2eec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eee:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef2:	00 97       	sbiw	r24, 0x00	; 0
    2ef4:	69 f7       	brne	.-38     	; 0x2ed0 <disply_number+0x44e>
    2ef6:	14 c0       	rjmp	.+40     	; 0x2f20 <disply_number+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    2efa:	78 85       	ldd	r23, Y+8	; 0x08
    2efc:	89 85       	ldd	r24, Y+9	; 0x09
    2efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	9e 83       	std	Y+6, r25	; 0x06
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
    2f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f10:	9a 83       	std	Y+2, r25	; 0x02
    2f12:	89 83       	std	Y+1, r24	; 0x01
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	9a 81       	ldd	r25, Y+2	; 0x02
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	f1 f7       	brne	.-4      	; 0x2f18 <disply_number+0x496>
    2f1c:	9a 83       	std	Y+2, r25	; 0x02
    2f1e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		TOGGLE_BIT(PORTA,3);
    2f20:	ab e3       	ldi	r26, 0x3B	; 59
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	eb e3       	ldi	r30, 0x3B	; 59
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	90 81       	ld	r25, Z
    2f2a:	88 e0       	ldi	r24, 0x08	; 8
    2f2c:	89 27       	eor	r24, r25
    2f2e:	8c 93       	st	X, r24

		start_time += 5;
    2f30:	89 ad       	ldd	r24, Y+57	; 0x39
    2f32:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f34:	05 96       	adiw	r24, 0x05	; 5
    2f36:	9a af       	std	Y+58, r25	; 0x3a
    2f38:	89 af       	std	Y+57, r24	; 0x39
	int digit2 = ( number / 10) % 10;
	int digit1 =  (number/ 1 ) % 10;

	// Display the digits on the four-digit seven-segment display
	uint16_t start_time = 0;
	while (start_time < 1000) // Delay for 1 seconds
    2f3a:	89 ad       	ldd	r24, Y+57	; 0x39
    2f3c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f3e:	23 e0       	ldi	r18, 0x03	; 3
    2f40:	88 3e       	cpi	r24, 0xE8	; 232
    2f42:	92 07       	cpc	r25, r18
    2f44:	08 f4       	brcc	.+2      	; 0x2f48 <disply_number+0x4c6>
    2f46:	f7 cd       	rjmp	.-1042   	; 0x2b36 <disply_number+0xb4>
		start_time += 5;


	}
	
}
    2f48:	cc 5b       	subi	r28, 0xBC	; 188
    2f4a:	df 4f       	sbci	r29, 0xFF	; 255
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	de bf       	out	0x3e, r29	; 62
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	cd bf       	out	0x3d, r28	; 61
    2f56:	cf 91       	pop	r28
    2f58:	df 91       	pop	r29
    2f5a:	08 95       	ret

00002f5c <CLR_SEV_SEG>:
void CLR_SEV_SEG()
{
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTB,6);
    2f64:	a8 e3       	ldi	r26, 0x38	; 56
    2f66:	b0 e0       	ldi	r27, 0x00	; 0
    2f68:	e8 e3       	ldi	r30, 0x38	; 56
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	80 81       	ld	r24, Z
    2f6e:	80 64       	ori	r24, 0x40	; 64
    2f70:	8c 93       	st	X, r24
	SET_BIT(PORTB,5);
    2f72:	a8 e3       	ldi	r26, 0x38	; 56
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	e8 e3       	ldi	r30, 0x38	; 56
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	80 62       	ori	r24, 0x20	; 32
    2f7e:	8c 93       	st	X, r24
	SET_BIT(PORTA,2);
    2f80:	ab e3       	ldi	r26, 0x3B	; 59
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	eb e3       	ldi	r30, 0x3B	; 59
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	84 60       	ori	r24, 0x04	; 4
    2f8c:	8c 93       	st	X, r24
	SET_BIT(PORTA,3);
    2f8e:	ab e3       	ldi	r26, 0x3B	; 59
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	eb e3       	ldi	r30, 0x3B	; 59
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	88 60       	ori	r24, 0x08	; 8
    2f9a:	8c 93       	st	X, r24

}
    2f9c:	cf 91       	pop	r28
    2f9e:	df 91       	pop	r29
    2fa0:	08 95       	ret

00002fa2 <__vector_11>:

#define I_BIT 7

void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER0_OVF_vect){
    2fa2:	1f 92       	push	r1
    2fa4:	0f 92       	push	r0
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	0f 92       	push	r0
    2faa:	11 24       	eor	r1, r1
    2fac:	2f 93       	push	r18
    2fae:	3f 93       	push	r19
    2fb0:	4f 93       	push	r20
    2fb2:	5f 93       	push	r21
    2fb4:	6f 93       	push	r22
    2fb6:	7f 93       	push	r23
    2fb8:	8f 93       	push	r24
    2fba:	9f 93       	push	r25
    2fbc:	af 93       	push	r26
    2fbe:	bf 93       	push	r27
    2fc0:	ef 93       	push	r30
    2fc2:	ff 93       	push	r31
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR){
    2fcc:	80 91 9c 00 	lds	r24, 0x009C
    2fd0:	90 91 9d 00 	lds	r25, 0x009D
    2fd4:	00 97       	sbiw	r24, 0x00	; 0
    2fd6:	29 f0       	breq	.+10     	; 0x2fe2 <__vector_11+0x40>
		(*g_callBackPtr)();
    2fd8:	e0 91 9c 00 	lds	r30, 0x009C
    2fdc:	f0 91 9d 00 	lds	r31, 0x009D
    2fe0:	09 95       	icall
	}
}
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	ff 91       	pop	r31
    2fe8:	ef 91       	pop	r30
    2fea:	bf 91       	pop	r27
    2fec:	af 91       	pop	r26
    2fee:	9f 91       	pop	r25
    2ff0:	8f 91       	pop	r24
    2ff2:	7f 91       	pop	r23
    2ff4:	6f 91       	pop	r22
    2ff6:	5f 91       	pop	r21
    2ff8:	4f 91       	pop	r20
    2ffa:	3f 91       	pop	r19
    2ffc:	2f 91       	pop	r18
    2ffe:	0f 90       	pop	r0
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	0f 90       	pop	r0
    3004:	1f 90       	pop	r1
    3006:	18 95       	reti

00003008 <timer0_init>:

void timer0_init(void){
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
	TCNT0=0;
    3010:	e2 e5       	ldi	r30, 0x52	; 82
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	10 82       	st	Z, r1
	SET_BIT(TIMSK,TOIE0);//ENABLE TIMER OVERFLOE FLAG
    3016:	a9 e5       	ldi	r26, 0x59	; 89
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	e9 e5       	ldi	r30, 0x59	; 89
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	81 60       	ori	r24, 0x01	; 1
    3022:	8c 93       	st	X, r24
	TCCR0=(1<<FOC0)|(1<<CS02)|(1<<CS00);//chose timer0 normall mode
    3024:	e3 e5       	ldi	r30, 0x53	; 83
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	85 e8       	ldi	r24, 0x85	; 133
    302a:	80 83       	st	Z, r24
	SET_BIT(SREG,I_BIT);//ENABLE GLOBAL INT
    302c:	af e5       	ldi	r26, 0x5F	; 95
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	ef e5       	ldi	r30, 0x5F	; 95
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	80 68       	ori	r24, 0x80	; 128
    3038:	8c 93       	st	X, r24
}
    303a:	cf 91       	pop	r28
    303c:	df 91       	pop	r29
    303e:	08 95       	ret

00003040 <timer0_setCallBack>:

void timer0_setCallBack(void(*a_ptr)(void)){
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	00 d0       	rcall	.+0      	; 0x3046 <timer0_setCallBack+0x6>
    3046:	cd b7       	in	r28, 0x3d	; 61
    3048:	de b7       	in	r29, 0x3e	; 62
    304a:	9a 83       	std	Y+2, r25	; 0x02
    304c:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	9a 81       	ldd	r25, Y+2	; 0x02
    3052:	90 93 9d 00 	sts	0x009D, r25
    3056:	80 93 9c 00 	sts	0x009C, r24
}
    305a:	0f 90       	pop	r0
    305c:	0f 90       	pop	r0
    305e:	cf 91       	pop	r28
    3060:	df 91       	pop	r29
    3062:	08 95       	ret

00003064 <get_ascii_of_number>:
uint8 tick=0;
uint8 is_sorted=0;
uint16 arr2[10]={0};
uint8 num=0;
uint8 counter_num=0;
uint8 get_ascii_of_number(uint8 num) {
    3064:	df 93       	push	r29
    3066:	cf 93       	push	r28
    3068:	0f 92       	push	r0
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	89 83       	std	Y+1, r24	; 0x01
    return (uint8) (num + '0');
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	80 5d       	subi	r24, 0xD0	; 208
}                          // 22 27  500 ---------->  
    3074:	0f 90       	pop	r0
    3076:	cf 91       	pop	r28
    3078:	df 91       	pop	r29
    307a:	08 95       	ret

0000307c <DisplaySortedNum>:

void DisplaySortedNum(uint16 arr[], uint8 n) {        
    307c:	df 93       	push	r29
    307e:	cf 93       	push	r28
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	a2 97       	sbiw	r28, 0x22	; 34
    3086:	0f b6       	in	r0, 0x3f	; 63
    3088:	f8 94       	cli
    308a:	de bf       	out	0x3e, r29	; 62
    308c:	0f be       	out	0x3f, r0	; 63
    308e:	cd bf       	out	0x3d, r28	; 61
    3090:	99 8f       	std	Y+25, r25	; 0x19
    3092:	88 8f       	std	Y+24, r24	; 0x18
    3094:	6a 8f       	std	Y+26, r22	; 0x1a
		
        charArr[idx-1] = '\0';
		LCD_String(charArr);

	     
}
    3096:	2d b7       	in	r18, 0x3d	; 61
    3098:	3e b7       	in	r19, 0x3e	; 62
    309a:	3a a3       	std	Y+34, r19	; 0x22
    309c:	29 a3       	std	Y+33, r18	; 0x21
uint8 counter_num=0;
uint8 get_ascii_of_number(uint8 num) {
    return (uint8) (num + '0');
}                          // 22 27  500 ---------->  

void DisplaySortedNum(uint16 arr[], uint8 n) {        
    309e:	8d b7       	in	r24, 0x3d	; 61
    30a0:	9e b7       	in	r25, 0x3e	; 62
    30a2:	9c 8f       	std	Y+28, r25	; 0x1c
    30a4:	8b 8f       	std	Y+27, r24	; 0x1b
    uint16 arr2[n][4];
    30a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30a8:	88 2f       	mov	r24, r24
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	88 0f       	add	r24, r24
    30ae:	99 1f       	adc	r25, r25
    30b0:	88 0f       	add	r24, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	88 0f       	add	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	2d b7       	in	r18, 0x3d	; 61
    30ba:	3e b7       	in	r19, 0x3e	; 62
    30bc:	28 1b       	sub	r18, r24
    30be:	39 0b       	sbc	r19, r25
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	3e bf       	out	0x3e, r19	; 62
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	2d bf       	out	0x3d, r18	; 61
    30ca:	8d b7       	in	r24, 0x3d	; 61
    30cc:	9e b7       	in	r25, 0x3e	; 62
    30ce:	01 96       	adiw	r24, 0x01	; 1
    30d0:	98 a3       	std	Y+32, r25	; 0x20
    30d2:	8f 8f       	std	Y+31, r24	; 0x1f
    30d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30d6:	98 a1       	ldd	r25, Y+32	; 0x20
    30d8:	00 96       	adiw	r24, 0x00	; 0
    30da:	98 a3       	std	Y+32, r25	; 0x20
    30dc:	8f 8f       	std	Y+31, r24	; 0x1f
    30de:	2f 8d       	ldd	r18, Y+31	; 0x1f
    30e0:	38 a1       	ldd	r19, Y+32	; 0x20
    30e2:	3f 8b       	std	Y+23, r19	; 0x17
    30e4:	2e 8b       	std	Y+22, r18	; 0x16
 
        for (uint16 i = 0; i < n; ++i) {     
    30e6:	18 8a       	std	Y+16, r1	; 0x10
    30e8:	1f 86       	std	Y+15, r1	; 0x0f
    30ea:	27 c0       	rjmp	.+78     	; 0x313a <DisplaySortedNum+0xbe>
            for (uint16 j = 0; j < 4; ++j) {
    30ec:	1e 86       	std	Y+14, r1	; 0x0e
    30ee:	1d 86       	std	Y+13, r1	; 0x0d
    30f0:	1a c0       	rjmp	.+52     	; 0x3126 <DisplaySortedNum+0xaa>
                arr2[i][j] = 10;
    30f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    30f4:	98 89       	ldd	r25, Y+16	; 0x10
    30f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    30f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    30fa:	4e 89       	ldd	r20, Y+22	; 0x16
    30fc:	5f 89       	ldd	r21, Y+23	; 0x17
    30fe:	88 0f       	add	r24, r24
    3100:	99 1f       	adc	r25, r25
    3102:	88 0f       	add	r24, r24
    3104:	99 1f       	adc	r25, r25
    3106:	82 0f       	add	r24, r18
    3108:	93 1f       	adc	r25, r19
    310a:	88 0f       	add	r24, r24
    310c:	99 1f       	adc	r25, r25
    310e:	fa 01       	movw	r30, r20
    3110:	e8 0f       	add	r30, r24
    3112:	f9 1f       	adc	r31, r25
    3114:	8a e0       	ldi	r24, 0x0A	; 10
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	91 83       	std	Z+1, r25	; 0x01
    311a:	80 83       	st	Z, r24

void DisplaySortedNum(uint16 arr[], uint8 n) {        
    uint16 arr2[n][4];
 
        for (uint16 i = 0; i < n; ++i) {     
            for (uint16 j = 0; j < 4; ++j) {
    311c:	8d 85       	ldd	r24, Y+13	; 0x0d
    311e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3120:	01 96       	adiw	r24, 0x01	; 1
    3122:	9e 87       	std	Y+14, r25	; 0x0e
    3124:	8d 87       	std	Y+13, r24	; 0x0d
    3126:	8d 85       	ldd	r24, Y+13	; 0x0d
    3128:	9e 85       	ldd	r25, Y+14	; 0x0e
    312a:	84 30       	cpi	r24, 0x04	; 4
    312c:	91 05       	cpc	r25, r1
    312e:	08 f3       	brcs	.-62     	; 0x30f2 <DisplaySortedNum+0x76>
}                          // 22 27  500 ---------->  

void DisplaySortedNum(uint16 arr[], uint8 n) {        
    uint16 arr2[n][4];
 
        for (uint16 i = 0; i < n; ++i) {     
    3130:	8f 85       	ldd	r24, Y+15	; 0x0f
    3132:	98 89       	ldd	r25, Y+16	; 0x10
    3134:	01 96       	adiw	r24, 0x01	; 1
    3136:	98 8b       	std	Y+16, r25	; 0x10
    3138:	8f 87       	std	Y+15, r24	; 0x0f
    313a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    313c:	28 2f       	mov	r18, r24
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	8f 85       	ldd	r24, Y+15	; 0x0f
    3142:	98 89       	ldd	r25, Y+16	; 0x10
    3144:	82 17       	cp	r24, r18
    3146:	93 07       	cpc	r25, r19
    3148:	88 f2       	brcs	.-94     	; 0x30ec <DisplaySortedNum+0x70>
                arr2[i][j] = 10;
            }
        }
      
 
        for (uint16 i = 0;i<n;i++) {
    314a:	1c 86       	std	Y+12, r1	; 0x0c
    314c:	1b 86       	std	Y+11, r1	; 0x0b
    314e:	49 c0       	rjmp	.+146    	; 0x31e2 <DisplaySortedNum+0x166>
            uint16 curr = arr[i];
    3150:	8b 85       	ldd	r24, Y+11	; 0x0b
    3152:	9c 85       	ldd	r25, Y+12	; 0x0c
    3154:	9c 01       	movw	r18, r24
    3156:	22 0f       	add	r18, r18
    3158:	33 1f       	adc	r19, r19
    315a:	88 8d       	ldd	r24, Y+24	; 0x18
    315c:	99 8d       	ldd	r25, Y+25	; 0x19
    315e:	fc 01       	movw	r30, r24
    3160:	e2 0f       	add	r30, r18
    3162:	f3 1f       	adc	r31, r19
    3164:	80 81       	ld	r24, Z
    3166:	91 81       	ldd	r25, Z+1	; 0x01
    3168:	9a 87       	std	Y+10, r25	; 0x0a
    316a:	89 87       	std	Y+9, r24	; 0x09
            uint16 dig = 0;
    316c:	18 86       	std	Y+8, r1	; 0x08
    316e:	1f 82       	std	Y+7, r1	; 0x07
            uint16 idx = 0;
    3170:	1e 82       	std	Y+6, r1	; 0x06
    3172:	1d 82       	std	Y+5, r1	; 0x05
    3174:	2d c0       	rjmp	.+90     	; 0x31d0 <DisplaySortedNum+0x154>
 
            while (curr > 0) {
                dig = curr % 10;
    3176:	89 85       	ldd	r24, Y+9	; 0x09
    3178:	9a 85       	ldd	r25, Y+10	; 0x0a
    317a:	2a e0       	ldi	r18, 0x0A	; 10
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	b9 01       	movw	r22, r18
    3180:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__udivmodhi4>
    3184:	98 87       	std	Y+8, r25	; 0x08
    3186:	8f 83       	std	Y+7, r24	; 0x07
                curr /= 10;
    3188:	89 85       	ldd	r24, Y+9	; 0x09
    318a:	9a 85       	ldd	r25, Y+10	; 0x0a
    318c:	2a e0       	ldi	r18, 0x0A	; 10
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	b9 01       	movw	r22, r18
    3192:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__udivmodhi4>
    3196:	cb 01       	movw	r24, r22
    3198:	9a 87       	std	Y+10, r25	; 0x0a
    319a:	89 87       	std	Y+9, r24	; 0x09
                arr2[i][idx] = dig;
    319c:	8b 85       	ldd	r24, Y+11	; 0x0b
    319e:	9c 85       	ldd	r25, Y+12	; 0x0c
    31a0:	2d 81       	ldd	r18, Y+5	; 0x05
    31a2:	3e 81       	ldd	r19, Y+6	; 0x06
    31a4:	4e 89       	ldd	r20, Y+22	; 0x16
    31a6:	5f 89       	ldd	r21, Y+23	; 0x17
    31a8:	88 0f       	add	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	88 0f       	add	r24, r24
    31ae:	99 1f       	adc	r25, r25
    31b0:	82 0f       	add	r24, r18
    31b2:	93 1f       	adc	r25, r19
    31b4:	88 0f       	add	r24, r24
    31b6:	99 1f       	adc	r25, r25
    31b8:	fa 01       	movw	r30, r20
    31ba:	e8 0f       	add	r30, r24
    31bc:	f9 1f       	adc	r31, r25
    31be:	8f 81       	ldd	r24, Y+7	; 0x07
    31c0:	98 85       	ldd	r25, Y+8	; 0x08
    31c2:	91 83       	std	Z+1, r25	; 0x01
    31c4:	80 83       	st	Z, r24
                idx++;
    31c6:	8d 81       	ldd	r24, Y+5	; 0x05
    31c8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ca:	01 96       	adiw	r24, 0x01	; 1
    31cc:	9e 83       	std	Y+6, r25	; 0x06
    31ce:	8d 83       	std	Y+5, r24	; 0x05
        for (uint16 i = 0;i<n;i++) {
            uint16 curr = arr[i];
            uint16 dig = 0;
            uint16 idx = 0;
 
            while (curr > 0) {
    31d0:	89 85       	ldd	r24, Y+9	; 0x09
    31d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	79 f6       	brne	.-98     	; 0x3176 <DisplaySortedNum+0xfa>
                arr2[i][j] = 10;
            }
        }
      
 
        for (uint16 i = 0;i<n;i++) {
    31d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    31da:	9c 85       	ldd	r25, Y+12	; 0x0c
    31dc:	01 96       	adiw	r24, 0x01	; 1
    31de:	9c 87       	std	Y+12, r25	; 0x0c
    31e0:	8b 87       	std	Y+11, r24	; 0x0b
    31e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31e4:	28 2f       	mov	r18, r24
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    31ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    31ec:	82 17       	cp	r24, r18
    31ee:	93 07       	cpc	r25, r19
    31f0:	08 f4       	brcc	.+2      	; 0x31f4 <DisplaySortedNum+0x178>
    31f2:	ae cf       	rjmp	.-164    	; 0x3150 <DisplaySortedNum+0xd4>
                arr2[i][idx] = dig;
                idx++;
            }
        }
 
        const uint8 charsize=n*4;
    31f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31f6:	88 2f       	mov	r24, r24
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	88 0f       	add	r24, r24
    31fc:	99 1f       	adc	r25, r25
    31fe:	88 0f       	add	r24, r24
    3200:	99 1f       	adc	r25, r25
    3202:	8b 8b       	std	Y+19, r24	; 0x13
        uint8 charArr[charsize];
    3204:	8b 89       	ldd	r24, Y+19	; 0x13
    3206:	88 2f       	mov	r24, r24
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	2d b7       	in	r18, 0x3d	; 61
    320c:	3e b7       	in	r19, 0x3e	; 62
    320e:	28 1b       	sub	r18, r24
    3210:	39 0b       	sbc	r19, r25
    3212:	0f b6       	in	r0, 0x3f	; 63
    3214:	f8 94       	cli
    3216:	3e bf       	out	0x3e, r19	; 62
    3218:	0f be       	out	0x3f, r0	; 63
    321a:	2d bf       	out	0x3d, r18	; 61
    321c:	8d b7       	in	r24, 0x3d	; 61
    321e:	9e b7       	in	r25, 0x3e	; 62
    3220:	01 96       	adiw	r24, 0x01	; 1
    3222:	9e 8f       	std	Y+30, r25	; 0x1e
    3224:	8d 8f       	std	Y+29, r24	; 0x1d
    3226:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3228:	9e 8d       	ldd	r25, Y+30	; 0x1e
    322a:	00 96       	adiw	r24, 0x00	; 0
    322c:	9e 8f       	std	Y+30, r25	; 0x1e
    322e:	8d 8f       	std	Y+29, r24	; 0x1d
    3230:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3232:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3234:	3d 8b       	std	Y+21, r19	; 0x15
    3236:	2c 8b       	std	Y+20, r18	; 0x14
        uint16 idx = 0;
    3238:	1a 8a       	std	Y+18, r1	; 0x12
    323a:	19 8a       	std	Y+17, r1	; 0x11
        for (uint16 i = 0; i < n; ++i) {
    323c:	1c 82       	std	Y+4, r1	; 0x04
    323e:	1b 82       	std	Y+3, r1	; 0x03
    3240:	5b c0       	rjmp	.+182    	; 0x32f8 <DisplaySortedNum+0x27c>
            for (uint16 j = 3; j <=3; --j) {
    3242:	83 e0       	ldi	r24, 0x03	; 3
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	9a 83       	std	Y+2, r25	; 0x02
    3248:	89 83       	std	Y+1, r24	; 0x01
    324a:	3d c0       	rjmp	.+122    	; 0x32c6 <DisplaySortedNum+0x24a>
                if(arr2[i][j] != 10){
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
    324e:	9c 81       	ldd	r25, Y+4	; 0x04
    3250:	29 81       	ldd	r18, Y+1	; 0x01
    3252:	3a 81       	ldd	r19, Y+2	; 0x02
    3254:	4e 89       	ldd	r20, Y+22	; 0x16
    3256:	5f 89       	ldd	r21, Y+23	; 0x17
    3258:	88 0f       	add	r24, r24
    325a:	99 1f       	adc	r25, r25
    325c:	88 0f       	add	r24, r24
    325e:	99 1f       	adc	r25, r25
    3260:	82 0f       	add	r24, r18
    3262:	93 1f       	adc	r25, r19
    3264:	88 0f       	add	r24, r24
    3266:	99 1f       	adc	r25, r25
    3268:	fa 01       	movw	r30, r20
    326a:	e8 0f       	add	r30, r24
    326c:	f9 1f       	adc	r31, r25
    326e:	80 81       	ld	r24, Z
    3270:	91 81       	ldd	r25, Z+1	; 0x01
    3272:	8a 30       	cpi	r24, 0x0A	; 10
    3274:	91 05       	cpc	r25, r1
    3276:	11 f1       	breq	.+68     	; 0x32bc <DisplaySortedNum+0x240>
                  charArr[idx] = (uint8*)(arr2[i][j] + '0');
    3278:	69 89       	ldd	r22, Y+17	; 0x11
    327a:	7a 89       	ldd	r23, Y+18	; 0x12
    327c:	8b 81       	ldd	r24, Y+3	; 0x03
    327e:	9c 81       	ldd	r25, Y+4	; 0x04
    3280:	29 81       	ldd	r18, Y+1	; 0x01
    3282:	3a 81       	ldd	r19, Y+2	; 0x02
    3284:	4e 89       	ldd	r20, Y+22	; 0x16
    3286:	5f 89       	ldd	r21, Y+23	; 0x17
    3288:	88 0f       	add	r24, r24
    328a:	99 1f       	adc	r25, r25
    328c:	88 0f       	add	r24, r24
    328e:	99 1f       	adc	r25, r25
    3290:	82 0f       	add	r24, r18
    3292:	93 1f       	adc	r25, r19
    3294:	88 0f       	add	r24, r24
    3296:	99 1f       	adc	r25, r25
    3298:	fa 01       	movw	r30, r20
    329a:	e8 0f       	add	r30, r24
    329c:	f9 1f       	adc	r31, r25
    329e:	80 81       	ld	r24, Z
    32a0:	91 81       	ldd	r25, Z+1	; 0x01
    32a2:	c0 96       	adiw	r24, 0x30	; 48
    32a4:	28 2f       	mov	r18, r24
    32a6:	8c 89       	ldd	r24, Y+20	; 0x14
    32a8:	9d 89       	ldd	r25, Y+21	; 0x15
    32aa:	fc 01       	movw	r30, r24
    32ac:	e6 0f       	add	r30, r22
    32ae:	f7 1f       	adc	r31, r23
    32b0:	20 83       	st	Z, r18
                  idx++;
    32b2:	89 89       	ldd	r24, Y+17	; 0x11
    32b4:	9a 89       	ldd	r25, Y+18	; 0x12
    32b6:	01 96       	adiw	r24, 0x01	; 1
    32b8:	9a 8b       	std	Y+18, r25	; 0x12
    32ba:	89 8b       	std	Y+17, r24	; 0x11
 
        const uint8 charsize=n*4;
        uint8 charArr[charsize];
        uint16 idx = 0;
        for (uint16 i = 0; i < n; ++i) {
            for (uint16 j = 3; j <=3; --j) {
    32bc:	89 81       	ldd	r24, Y+1	; 0x01
    32be:	9a 81       	ldd	r25, Y+2	; 0x02
    32c0:	01 97       	sbiw	r24, 0x01	; 1
    32c2:	9a 83       	std	Y+2, r25	; 0x02
    32c4:	89 83       	std	Y+1, r24	; 0x01
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ca:	84 30       	cpi	r24, 0x04	; 4
    32cc:	91 05       	cpc	r25, r1
    32ce:	08 f4       	brcc	.+2      	; 0x32d2 <DisplaySortedNum+0x256>
    32d0:	bd cf       	rjmp	.-134    	; 0x324c <DisplaySortedNum+0x1d0>
                if(arr2[i][j] != 10){
                  charArr[idx] = (uint8*)(arr2[i][j] + '0');
                  idx++;
                }
			}
            charArr[idx] = '-';
    32d2:	29 89       	ldd	r18, Y+17	; 0x11
    32d4:	3a 89       	ldd	r19, Y+18	; 0x12
    32d6:	8c 89       	ldd	r24, Y+20	; 0x14
    32d8:	9d 89       	ldd	r25, Y+21	; 0x15
    32da:	fc 01       	movw	r30, r24
    32dc:	e2 0f       	add	r30, r18
    32de:	f3 1f       	adc	r31, r19
    32e0:	8d e2       	ldi	r24, 0x2D	; 45
    32e2:	80 83       	st	Z, r24

            idx++;
    32e4:	89 89       	ldd	r24, Y+17	; 0x11
    32e6:	9a 89       	ldd	r25, Y+18	; 0x12
    32e8:	01 96       	adiw	r24, 0x01	; 1
    32ea:	9a 8b       	std	Y+18, r25	; 0x12
    32ec:	89 8b       	std	Y+17, r24	; 0x11
        }
 
        const uint8 charsize=n*4;
        uint8 charArr[charsize];
        uint16 idx = 0;
        for (uint16 i = 0; i < n; ++i) {
    32ee:	8b 81       	ldd	r24, Y+3	; 0x03
    32f0:	9c 81       	ldd	r25, Y+4	; 0x04
    32f2:	01 96       	adiw	r24, 0x01	; 1
    32f4:	9c 83       	std	Y+4, r25	; 0x04
    32f6:	8b 83       	std	Y+3, r24	; 0x03
    32f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32fa:	28 2f       	mov	r18, r24
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3300:	9c 81       	ldd	r25, Y+4	; 0x04
    3302:	82 17       	cp	r24, r18
    3304:	93 07       	cpc	r25, r19
    3306:	08 f4       	brcc	.+2      	; 0x330a <DisplaySortedNum+0x28e>
    3308:	9c cf       	rjmp	.-200    	; 0x3242 <DisplaySortedNum+0x1c6>
            charArr[idx] = '-';

            idx++;
        }
		
        charArr[idx-1] = '\0';
    330a:	89 89       	ldd	r24, Y+17	; 0x11
    330c:	9a 89       	ldd	r25, Y+18	; 0x12
    330e:	9c 01       	movw	r18, r24
    3310:	21 50       	subi	r18, 0x01	; 1
    3312:	30 40       	sbci	r19, 0x00	; 0
    3314:	8c 89       	ldd	r24, Y+20	; 0x14
    3316:	9d 89       	ldd	r25, Y+21	; 0x15
    3318:	fc 01       	movw	r30, r24
    331a:	e2 0f       	add	r30, r18
    331c:	f3 1f       	adc	r31, r19
    331e:	10 82       	st	Z, r1
		LCD_String(charArr);
    3320:	8c 89       	ldd	r24, Y+20	; 0x14
    3322:	9d 89       	ldd	r25, Y+21	; 0x15
    3324:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_String>
    3328:	8b 8d       	ldd	r24, Y+27	; 0x1b
    332a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    332c:	0f b6       	in	r0, 0x3f	; 63
    332e:	f8 94       	cli
    3330:	9e bf       	out	0x3e, r25	; 62
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	8d bf       	out	0x3d, r24	; 61

	     
}
    3336:	29 a1       	ldd	r18, Y+33	; 0x21
    3338:	3a a1       	ldd	r19, Y+34	; 0x22
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	3e bf       	out	0x3e, r19	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	2d bf       	out	0x3d, r18	; 61
    3344:	a2 96       	adiw	r28, 0x22	; 34
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	f8 94       	cli
    334a:	de bf       	out	0x3e, r29	; 62
    334c:	0f be       	out	0x3f, r0	; 63
    334e:	cd bf       	out	0x3d, r28	; 61
    3350:	cf 91       	pop	r28
    3352:	df 91       	pop	r29
    3354:	08 95       	ret

00003356 <selection_sort>:


void selection_sort(uint16 arr[], uint8 n) {
    3356:	df 93       	push	r29
    3358:	cf 93       	push	r28
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
    335e:	28 97       	sbiw	r28, 0x08	; 8
    3360:	0f b6       	in	r0, 0x3f	; 63
    3362:	f8 94       	cli
    3364:	de bf       	out	0x3e, r29	; 62
    3366:	0f be       	out	0x3f, r0	; 63
    3368:	cd bf       	out	0x3d, r28	; 61
    336a:	9f 83       	std	Y+7, r25	; 0x07
    336c:	8e 83       	std	Y+6, r24	; 0x06
    336e:	68 87       	std	Y+8, r22	; 0x08
    uint8 i, j, min_idx;
    
    // One by one move boundary of unsorted subarray
    for (i = 0; i < n - 1; i++) {
    3370:	1d 82       	std	Y+5, r1	; 0x05
    3372:	68 c0       	rjmp	.+208    	; 0x3444 <selection_sort+0xee>
        // Find the minimum element in unsorted array
        min_idx = i;
    3374:	8d 81       	ldd	r24, Y+5	; 0x05
    3376:	8b 83       	std	Y+3, r24	; 0x03
        for (j = i + 1; j < n; j++) {
    3378:	8d 81       	ldd	r24, Y+5	; 0x05
    337a:	8f 5f       	subi	r24, 0xFF	; 255
    337c:	8c 83       	std	Y+4, r24	; 0x04
    337e:	22 c0       	rjmp	.+68     	; 0x33c4 <selection_sort+0x6e>
            if (arr[j] < arr[min_idx]) {
    3380:	8c 81       	ldd	r24, Y+4	; 0x04
    3382:	88 2f       	mov	r24, r24
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	9c 01       	movw	r18, r24
    3388:	22 0f       	add	r18, r18
    338a:	33 1f       	adc	r19, r19
    338c:	8e 81       	ldd	r24, Y+6	; 0x06
    338e:	9f 81       	ldd	r25, Y+7	; 0x07
    3390:	fc 01       	movw	r30, r24
    3392:	e2 0f       	add	r30, r18
    3394:	f3 1f       	adc	r31, r19
    3396:	40 81       	ld	r20, Z
    3398:	51 81       	ldd	r21, Z+1	; 0x01
    339a:	8b 81       	ldd	r24, Y+3	; 0x03
    339c:	88 2f       	mov	r24, r24
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	9c 01       	movw	r18, r24
    33a2:	22 0f       	add	r18, r18
    33a4:	33 1f       	adc	r19, r19
    33a6:	8e 81       	ldd	r24, Y+6	; 0x06
    33a8:	9f 81       	ldd	r25, Y+7	; 0x07
    33aa:	fc 01       	movw	r30, r24
    33ac:	e2 0f       	add	r30, r18
    33ae:	f3 1f       	adc	r31, r19
    33b0:	80 81       	ld	r24, Z
    33b2:	91 81       	ldd	r25, Z+1	; 0x01
    33b4:	48 17       	cp	r20, r24
    33b6:	59 07       	cpc	r21, r25
    33b8:	10 f4       	brcc	.+4      	; 0x33be <selection_sort+0x68>
                min_idx = j;
    33ba:	8c 81       	ldd	r24, Y+4	; 0x04
    33bc:	8b 83       	std	Y+3, r24	; 0x03
    
    // One by one move boundary of unsorted subarray
    for (i = 0; i < n - 1; i++) {
        // Find the minimum element in unsorted array
        min_idx = i;
        for (j = i + 1; j < n; j++) {
    33be:	8c 81       	ldd	r24, Y+4	; 0x04
    33c0:	8f 5f       	subi	r24, 0xFF	; 255
    33c2:	8c 83       	std	Y+4, r24	; 0x04
    33c4:	9c 81       	ldd	r25, Y+4	; 0x04
    33c6:	88 85       	ldd	r24, Y+8	; 0x08
    33c8:	98 17       	cp	r25, r24
    33ca:	d0 f2       	brcs	.-76     	; 0x3380 <selection_sort+0x2a>
                min_idx = j;
            }
        }
        
        // Swap the found minimum element with the first element
        uint16 temp = arr[min_idx];
    33cc:	8b 81       	ldd	r24, Y+3	; 0x03
    33ce:	88 2f       	mov	r24, r24
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	9c 01       	movw	r18, r24
    33d4:	22 0f       	add	r18, r18
    33d6:	33 1f       	adc	r19, r19
    33d8:	8e 81       	ldd	r24, Y+6	; 0x06
    33da:	9f 81       	ldd	r25, Y+7	; 0x07
    33dc:	fc 01       	movw	r30, r24
    33de:	e2 0f       	add	r30, r18
    33e0:	f3 1f       	adc	r31, r19
    33e2:	80 81       	ld	r24, Z
    33e4:	91 81       	ldd	r25, Z+1	; 0x01
    33e6:	9a 83       	std	Y+2, r25	; 0x02
    33e8:	89 83       	std	Y+1, r24	; 0x01
        arr[min_idx] = arr[i];
    33ea:	8b 81       	ldd	r24, Y+3	; 0x03
    33ec:	88 2f       	mov	r24, r24
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	9c 01       	movw	r18, r24
    33f2:	22 0f       	add	r18, r18
    33f4:	33 1f       	adc	r19, r19
    33f6:	8e 81       	ldd	r24, Y+6	; 0x06
    33f8:	9f 81       	ldd	r25, Y+7	; 0x07
    33fa:	dc 01       	movw	r26, r24
    33fc:	a2 0f       	add	r26, r18
    33fe:	b3 1f       	adc	r27, r19
    3400:	8d 81       	ldd	r24, Y+5	; 0x05
    3402:	88 2f       	mov	r24, r24
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	9c 01       	movw	r18, r24
    3408:	22 0f       	add	r18, r18
    340a:	33 1f       	adc	r19, r19
    340c:	8e 81       	ldd	r24, Y+6	; 0x06
    340e:	9f 81       	ldd	r25, Y+7	; 0x07
    3410:	fc 01       	movw	r30, r24
    3412:	e2 0f       	add	r30, r18
    3414:	f3 1f       	adc	r31, r19
    3416:	80 81       	ld	r24, Z
    3418:	91 81       	ldd	r25, Z+1	; 0x01
    341a:	11 96       	adiw	r26, 0x01	; 1
    341c:	9c 93       	st	X, r25
    341e:	8e 93       	st	-X, r24
        arr[i] = temp;
    3420:	8d 81       	ldd	r24, Y+5	; 0x05
    3422:	88 2f       	mov	r24, r24
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	9c 01       	movw	r18, r24
    3428:	22 0f       	add	r18, r18
    342a:	33 1f       	adc	r19, r19
    342c:	8e 81       	ldd	r24, Y+6	; 0x06
    342e:	9f 81       	ldd	r25, Y+7	; 0x07
    3430:	fc 01       	movw	r30, r24
    3432:	e2 0f       	add	r30, r18
    3434:	f3 1f       	adc	r31, r19
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	9a 81       	ldd	r25, Y+2	; 0x02
    343a:	91 83       	std	Z+1, r25	; 0x01
    343c:	80 83       	st	Z, r24

void selection_sort(uint16 arr[], uint8 n) {
    uint8 i, j, min_idx;
    
    // One by one move boundary of unsorted subarray
    for (i = 0; i < n - 1; i++) {
    343e:	8d 81       	ldd	r24, Y+5	; 0x05
    3440:	8f 5f       	subi	r24, 0xFF	; 255
    3442:	8d 83       	std	Y+5, r24	; 0x05
    3444:	8d 81       	ldd	r24, Y+5	; 0x05
    3446:	28 2f       	mov	r18, r24
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	88 85       	ldd	r24, Y+8	; 0x08
    344c:	88 2f       	mov	r24, r24
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	28 17       	cp	r18, r24
    3454:	39 07       	cpc	r19, r25
    3456:	0c f4       	brge	.+2      	; 0x345a <selection_sort+0x104>
    3458:	8d cf       	rjmp	.-230    	; 0x3374 <selection_sort+0x1e>
        // Swap the found minimum element with the first element
        uint16 temp = arr[min_idx];
        arr[min_idx] = arr[i];
        arr[i] = temp;
    }                                                  
}
    345a:	28 96       	adiw	r28, 0x08	; 8
    345c:	0f b6       	in	r0, 0x3f	; 63
    345e:	f8 94       	cli
    3460:	de bf       	out	0x3e, r29	; 62
    3462:	0f be       	out	0x3f, r0	; 63
    3464:	cd bf       	out	0x3d, r28	; 61
    3466:	cf 91       	pop	r28
    3468:	df 91       	pop	r29
    346a:	08 95       	ret

0000346c <DisplaySortSSD>:
	
	// Null-terminate the string
	buffer[i-1] = '\0';
}*/

void DisplaySortSSD(){
    346c:	df 93       	push	r29
    346e:	cf 93       	push	r28
    3470:	cd b7       	in	r28, 0x3d	; 61
    3472:	de b7       	in	r29, 0x3e	; 62
    tick++;
    3474:	80 91 9e 00 	lds	r24, 0x009E
    3478:	8f 5f       	subi	r24, 0xFF	; 255
    347a:	80 93 9e 00 	sts	0x009E, r24
	if(tick==NUMBER_OF_OVERFLOW && is_sorted==1){
    347e:	80 91 9e 00 	lds	r24, 0x009E
    3482:	8e 33       	cpi	r24, 0x3E	; 62
    3484:	f9 f4       	brne	.+62     	; 0x34c4 <DisplaySortSSD+0x58>
    3486:	80 91 9f 00 	lds	r24, 0x009F
    348a:	81 30       	cpi	r24, 0x01	; 1
    348c:	d9 f4       	brne	.+54     	; 0x34c4 <DisplaySortSSD+0x58>
	LCD_Clear();
    348e:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_Clear>
    if(counter_num >= 0){
	disply_number(arr2[num]);
    3492:	80 91 b4 00 	lds	r24, 0x00B4
    3496:	88 2f       	mov	r24, r24
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	fc 01       	movw	r30, r24
    34a0:	e0 56       	subi	r30, 0x60	; 96
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 81       	ld	r24, Z
    34a6:	91 81       	ldd	r25, Z+1	; 0x01
    34a8:	0e 94 41 15 	call	0x2a82	; 0x2a82 <disply_number>
	num++;
    34ac:	80 91 b4 00 	lds	r24, 0x00B4
    34b0:	8f 5f       	subi	r24, 0xFF	; 255
    34b2:	80 93 b4 00 	sts	0x00B4, r24
	tick=0;
    34b6:	10 92 9e 00 	sts	0x009E, r1
	counter_num--;
    34ba:	80 91 b5 00 	lds	r24, 0x00B5
    34be:	81 50       	subi	r24, 0x01	; 1
    34c0:	80 93 b5 00 	sts	0x00B5, r24
	 } 
	 }
	
}
    34c4:	cf 91       	pop	r28
    34c6:	df 91       	pop	r29
    34c8:	08 95       	ret

000034ca <main>:

int main(void)
{
    34ca:	df 93       	push	r29
    34cc:	cf 93       	push	r28
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	2a 97       	sbiw	r28, 0x0a	; 10
    34d4:	0f b6       	in	r0, 0x3f	; 63
    34d6:	f8 94       	cli
    34d8:	de bf       	out	0x3e, r29	; 62
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	cd bf       	out	0x3d, r28	; 61
	uint8 counter_digit=0;
    34de:	1e 82       	std	Y+6, r1	; 0x06
	uint16 digit=0;
    34e0:	1d 82       	std	Y+5, r1	; 0x05
    34e2:	1c 82       	std	Y+4, r1	; 0x04
	uint16 temp_num=0;
    34e4:	1b 82       	std	Y+3, r1	; 0x03
    34e6:	1a 82       	std	Y+2, r1	; 0x02
	uint8 value;

	
	keypad_init();
    34e8:	0e 94 4f 09 	call	0x129e	; 0x129e <keypad_init>
	LCD_Init ();
    34ec:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_Init>
	SEVENSEG_init();
    34f0:	0e 94 d6 14 	call	0x29ac	; 0x29ac <SEVENSEG_init>
	timer0_init();
    34f4:	0e 94 04 18 	call	0x3008	; 0x3008 <timer0_init>
	timer0_setCallBack(&DisplaySortSSD);
    34f8:	86 e3       	ldi	r24, 0x36	; 54
    34fa:	9a e1       	ldi	r25, 0x1A	; 26
    34fc:	0e 94 20 18 	call	0x3040	; 0x3040 <timer0_setCallBack>
	LCD_String("     HELLO !!!!");
    3500:	80 e6       	ldi	r24, 0x60	; 96
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_String>
	LCD_goToRowCol(2 , 1);
    3508:	82 e0       	ldi	r24, 0x02	; 2
    350a:	61 e0       	ldi	r22, 0x01	; 1
    350c:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_goToRowCol>
	LCD_String("  ENTER YOUR LIST");
    3510:	80 e7       	ldi	r24, 0x70	; 112
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <LCD_String>
    while(1){
        CLR_SEV_SEG();
    3518:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <CLR_SEV_SEG>
       	value=keypad_get_value();
    351c:	0e 94 aa 09 	call	0x1354	; 0x1354 <keypad_get_value>
    3520:	89 83       	std	Y+1, r24	; 0x01
       if(value != INVALID_KEYPAD_PRESS){
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	8f 3f       	cpi	r24, 0xFF	; 255
    3526:	c1 f3       	breq	.-16     	; 0x3518 <main+0x4e>
		if(counter_digit<4 && value!=12 && value!=14 && value!=15){
    3528:	8e 81       	ldd	r24, Y+6	; 0x06
    352a:	84 30       	cpi	r24, 0x04	; 4
    352c:	08 f0       	brcs	.+2      	; 0x3530 <main+0x66>
    352e:	1c c1       	rjmp	.+568    	; 0x3768 <main+0x29e>
    3530:	89 81       	ldd	r24, Y+1	; 0x01
    3532:	8c 30       	cpi	r24, 0x0C	; 12
    3534:	09 f4       	brne	.+2      	; 0x3538 <main+0x6e>
    3536:	18 c1       	rjmp	.+560    	; 0x3768 <main+0x29e>
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	8e 30       	cpi	r24, 0x0E	; 14
    353c:	09 f4       	brne	.+2      	; 0x3540 <main+0x76>
    353e:	14 c1       	rjmp	.+552    	; 0x3768 <main+0x29e>
    3540:	89 81       	ldd	r24, Y+1	; 0x01
    3542:	8f 30       	cpi	r24, 0x0F	; 15
    3544:	09 f4       	brne	.+2      	; 0x3548 <main+0x7e>
    3546:	10 c1       	rjmp	.+544    	; 0x3768 <main+0x29e>
    	   switch(value){
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	28 2f       	mov	r18, r24
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	3a 87       	std	Y+10, r19	; 0x0a
    3550:	29 87       	std	Y+9, r18	; 0x09
    3552:	89 85       	ldd	r24, Y+9	; 0x09
    3554:	9a 85       	ldd	r25, Y+10	; 0x0a
    3556:	85 30       	cpi	r24, 0x05	; 5
    3558:	91 05       	cpc	r25, r1
    355a:	09 f4       	brne	.+2      	; 0x355e <main+0x94>
    355c:	65 c0       	rjmp	.+202    	; 0x3628 <main+0x15e>
    355e:	29 85       	ldd	r18, Y+9	; 0x09
    3560:	3a 85       	ldd	r19, Y+10	; 0x0a
    3562:	26 30       	cpi	r18, 0x06	; 6
    3564:	31 05       	cpc	r19, r1
    3566:	e4 f4       	brge	.+56     	; 0x35a0 <main+0xd6>
    3568:	89 85       	ldd	r24, Y+9	; 0x09
    356a:	9a 85       	ldd	r25, Y+10	; 0x0a
    356c:	81 30       	cpi	r24, 0x01	; 1
    356e:	91 05       	cpc	r25, r1
    3570:	09 f4       	brne	.+2      	; 0x3574 <main+0xaa>
    3572:	42 c0       	rjmp	.+132    	; 0x35f8 <main+0x12e>
    3574:	29 85       	ldd	r18, Y+9	; 0x09
    3576:	3a 85       	ldd	r19, Y+10	; 0x0a
    3578:	22 30       	cpi	r18, 0x02	; 2
    357a:	31 05       	cpc	r19, r1
    357c:	2c f4       	brge	.+10     	; 0x3588 <main+0xbe>
    357e:	89 85       	ldd	r24, Y+9	; 0x09
    3580:	9a 85       	ldd	r25, Y+10	; 0x0a
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	89 f1       	breq	.+98     	; 0x35e8 <main+0x11e>
    3586:	7d c0       	rjmp	.+250    	; 0x3682 <main+0x1b8>
    3588:	29 85       	ldd	r18, Y+9	; 0x09
    358a:	3a 85       	ldd	r19, Y+10	; 0x0a
    358c:	22 30       	cpi	r18, 0x02	; 2
    358e:	31 05       	cpc	r19, r1
    3590:	d9 f1       	breq	.+118    	; 0x3608 <main+0x13e>
    3592:	89 85       	ldd	r24, Y+9	; 0x09
    3594:	9a 85       	ldd	r25, Y+10	; 0x0a
    3596:	84 30       	cpi	r24, 0x04	; 4
    3598:	91 05       	cpc	r25, r1
    359a:	09 f4       	brne	.+2      	; 0x359e <main+0xd4>
    359c:	3d c0       	rjmp	.+122    	; 0x3618 <main+0x14e>
    359e:	71 c0       	rjmp	.+226    	; 0x3682 <main+0x1b8>
    35a0:	29 85       	ldd	r18, Y+9	; 0x09
    35a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    35a4:	29 30       	cpi	r18, 0x09	; 9
    35a6:	31 05       	cpc	r19, r1
    35a8:	09 f4       	brne	.+2      	; 0x35ac <main+0xe2>
    35aa:	56 c0       	rjmp	.+172    	; 0x3658 <main+0x18e>
    35ac:	89 85       	ldd	r24, Y+9	; 0x09
    35ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b0:	8a 30       	cpi	r24, 0x0A	; 10
    35b2:	91 05       	cpc	r25, r1
    35b4:	64 f4       	brge	.+24     	; 0x35ce <main+0x104>
    35b6:	29 85       	ldd	r18, Y+9	; 0x09
    35b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    35ba:	26 30       	cpi	r18, 0x06	; 6
    35bc:	31 05       	cpc	r19, r1
    35be:	e1 f1       	breq	.+120    	; 0x3638 <main+0x16e>
    35c0:	89 85       	ldd	r24, Y+9	; 0x09
    35c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c4:	88 30       	cpi	r24, 0x08	; 8
    35c6:	91 05       	cpc	r25, r1
    35c8:	09 f4       	brne	.+2      	; 0x35cc <main+0x102>
    35ca:	3e c0       	rjmp	.+124    	; 0x3648 <main+0x17e>
    35cc:	5a c0       	rjmp	.+180    	; 0x3682 <main+0x1b8>
    35ce:	29 85       	ldd	r18, Y+9	; 0x09
    35d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    35d2:	2a 30       	cpi	r18, 0x0A	; 10
    35d4:	31 05       	cpc	r19, r1
    35d6:	09 f4       	brne	.+2      	; 0x35da <main+0x110>
    35d8:	47 c0       	rjmp	.+142    	; 0x3668 <main+0x19e>
    35da:	89 85       	ldd	r24, Y+9	; 0x09
    35dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35de:	8d 30       	cpi	r24, 0x0D	; 13
    35e0:	91 05       	cpc	r25, r1
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <main+0x11c>
    35e4:	49 c0       	rjmp	.+146    	; 0x3678 <main+0x1ae>
    35e6:	4d c0       	rjmp	.+154    	; 0x3682 <main+0x1b8>
			case 0:
			 digit=7;
    35e8:	87 e0       	ldi	r24, 0x07	; 7
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	9d 83       	std	Y+5, r25	; 0x05
    35ee:	8c 83       	std	Y+4, r24	; 0x04
			 ++counter_digit;
    35f0:	8e 81       	ldd	r24, Y+6	; 0x06
    35f2:	8f 5f       	subi	r24, 0xFF	; 255
    35f4:	8e 83       	std	Y+6, r24	; 0x06
    35f6:	45 c0       	rjmp	.+138    	; 0x3682 <main+0x1b8>
    	     break;
			case 1:
			 digit=8;
    35f8:	88 e0       	ldi	r24, 0x08	; 8
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	9d 83       	std	Y+5, r25	; 0x05
    35fe:	8c 83       	std	Y+4, r24	; 0x04
			 ++counter_digit;
    3600:	8e 81       	ldd	r24, Y+6	; 0x06
    3602:	8f 5f       	subi	r24, 0xFF	; 255
    3604:	8e 83       	std	Y+6, r24	; 0x06
    3606:	3d c0       	rjmp	.+122    	; 0x3682 <main+0x1b8>
    	     break;
		    case 2:
			 digit=9;
    3608:	89 e0       	ldi	r24, 0x09	; 9
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	9d 83       	std	Y+5, r25	; 0x05
    360e:	8c 83       	std	Y+4, r24	; 0x04
			 ++counter_digit;
    3610:	8e 81       	ldd	r24, Y+6	; 0x06
    3612:	8f 5f       	subi	r24, 0xFF	; 255
    3614:	8e 83       	std	Y+6, r24	; 0x06
    3616:	35 c0       	rjmp	.+106    	; 0x3682 <main+0x1b8>
    	     break;
			case 4:
			 digit=4;
    3618:	84 e0       	ldi	r24, 0x04	; 4
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	9d 83       	std	Y+5, r25	; 0x05
    361e:	8c 83       	std	Y+4, r24	; 0x04
			 ++counter_digit;
    3620:	8e 81       	ldd	r24, Y+6	; 0x06
    3622:	8f 5f       	subi	r24, 0xFF	; 255
    3624:	8e 83       	std	Y+6, r24	; 0x06
    3626:	2d c0       	rjmp	.+90     	; 0x3682 <main+0x1b8>
    	     break;
			case 5:
			 digit=5;
    3628:	85 e0       	ldi	r24, 0x05	; 5
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	9d 83       	std	Y+5, r25	; 0x05
    362e:	8c 83       	std	Y+4, r24	; 0x04
			 ++counter_digit;
    3630:	8e 81       	ldd	r24, Y+6	; 0x06
    3632:	8f 5f       	subi	r24, 0xFF	; 255
    3634:	8e 83       	std	Y+6, r24	; 0x06
    3636:	25 c0       	rjmp	.+74     	; 0x3682 <main+0x1b8>
    	     break;
			case 6:
			 digit=6;
    3638:	86 e0       	ldi	r24, 0x06	; 6
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	9d 83       	std	Y+5, r25	; 0x05
    363e:	8c 83       	std	Y+4, r24	; 0x04
			 ++counter_digit;
    3640:	8e 81       	ldd	r24, Y+6	; 0x06
    3642:	8f 5f       	subi	r24, 0xFF	; 255
    3644:	8e 83       	std	Y+6, r24	; 0x06
    3646:	1d c0       	rjmp	.+58     	; 0x3682 <main+0x1b8>
    	     break;
			case 8:
			 digit=1;
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	9d 83       	std	Y+5, r25	; 0x05
    364e:	8c 83       	std	Y+4, r24	; 0x04
			 ++counter_digit;
    3650:	8e 81       	ldd	r24, Y+6	; 0x06
    3652:	8f 5f       	subi	r24, 0xFF	; 255
    3654:	8e 83       	std	Y+6, r24	; 0x06
    3656:	15 c0       	rjmp	.+42     	; 0x3682 <main+0x1b8>
    	     break;
			case 9:
			 digit=2;
    3658:	82 e0       	ldi	r24, 0x02	; 2
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	9d 83       	std	Y+5, r25	; 0x05
    365e:	8c 83       	std	Y+4, r24	; 0x04
			 ++counter_digit;
    3660:	8e 81       	ldd	r24, Y+6	; 0x06
    3662:	8f 5f       	subi	r24, 0xFF	; 255
    3664:	8e 83       	std	Y+6, r24	; 0x06
    3666:	0d c0       	rjmp	.+26     	; 0x3682 <main+0x1b8>
    	     break;
			case 10:
			 digit=3;
    3668:	83 e0       	ldi	r24, 0x03	; 3
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	9d 83       	std	Y+5, r25	; 0x05
    366e:	8c 83       	std	Y+4, r24	; 0x04
			 ++counter_digit;
    3670:	8e 81       	ldd	r24, Y+6	; 0x06
    3672:	8f 5f       	subi	r24, 0xFF	; 255
    3674:	8e 83       	std	Y+6, r24	; 0x06
    3676:	05 c0       	rjmp	.+10     	; 0x3682 <main+0x1b8>
    	     break;
			case 13:
			 digit=0;
    3678:	1d 82       	std	Y+5, r1	; 0x05
    367a:	1c 82       	std	Y+4, r1	; 0x04
			 ++counter_digit;
    367c:	8e 81       	ldd	r24, Y+6	; 0x06
    367e:	8f 5f       	subi	r24, 0xFF	; 255
    3680:	8e 83       	std	Y+6, r24	; 0x06
    	     break;           
          }
	    switch(counter_digit){        //29   503
    3682:	8e 81       	ldd	r24, Y+6	; 0x06
    3684:	28 2f       	mov	r18, r24
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	38 87       	std	Y+8, r19	; 0x08
    368a:	2f 83       	std	Y+7, r18	; 0x07
    368c:	8f 81       	ldd	r24, Y+7	; 0x07
    368e:	98 85       	ldd	r25, Y+8	; 0x08
    3690:	82 30       	cpi	r24, 0x02	; 2
    3692:	91 05       	cpc	r25, r1
    3694:	f9 f0       	breq	.+62     	; 0x36d4 <main+0x20a>
    3696:	2f 81       	ldd	r18, Y+7	; 0x07
    3698:	38 85       	ldd	r19, Y+8	; 0x08
    369a:	23 30       	cpi	r18, 0x03	; 3
    369c:	31 05       	cpc	r19, r1
    369e:	34 f4       	brge	.+12     	; 0x36ac <main+0x1e2>
    36a0:	8f 81       	ldd	r24, Y+7	; 0x07
    36a2:	98 85       	ldd	r25, Y+8	; 0x08
    36a4:	81 30       	cpi	r24, 0x01	; 1
    36a6:	91 05       	cpc	r25, r1
    36a8:	61 f0       	breq	.+24     	; 0x36c2 <main+0x1f8>
    36aa:	58 c0       	rjmp	.+176    	; 0x375c <main+0x292>
    36ac:	2f 81       	ldd	r18, Y+7	; 0x07
    36ae:	38 85       	ldd	r19, Y+8	; 0x08
    36b0:	23 30       	cpi	r18, 0x03	; 3
    36b2:	31 05       	cpc	r19, r1
    36b4:	31 f1       	breq	.+76     	; 0x3702 <main+0x238>
    36b6:	8f 81       	ldd	r24, Y+7	; 0x07
    36b8:	98 85       	ldd	r25, Y+8	; 0x08
    36ba:	84 30       	cpi	r24, 0x04	; 4
    36bc:	91 05       	cpc	r25, r1
    36be:	c1 f1       	breq	.+112    	; 0x3730 <main+0x266>
    36c0:	4d c0       	rjmp	.+154    	; 0x375c <main+0x292>
				case 1:
				temp_num+=digit;
    36c2:	8a 81       	ldd	r24, Y+2	; 0x02
    36c4:	9b 81       	ldd	r25, Y+3	; 0x03
    36c6:	2c 81       	ldd	r18, Y+4	; 0x04
    36c8:	3d 81       	ldd	r19, Y+5	; 0x05
    36ca:	82 0f       	add	r24, r18
    36cc:	93 1f       	adc	r25, r19
    36ce:	9b 83       	std	Y+3, r25	; 0x03
    36d0:	8a 83       	std	Y+2, r24	; 0x02
    36d2:	44 c0       	rjmp	.+136    	; 0x375c <main+0x292>
				break;
				case 2:
				temp_num*=10;
    36d4:	8a 81       	ldd	r24, Y+2	; 0x02
    36d6:	9b 81       	ldd	r25, Y+3	; 0x03
    36d8:	9c 01       	movw	r18, r24
    36da:	22 0f       	add	r18, r18
    36dc:	33 1f       	adc	r19, r19
    36de:	c9 01       	movw	r24, r18
    36e0:	88 0f       	add	r24, r24
    36e2:	99 1f       	adc	r25, r25
    36e4:	88 0f       	add	r24, r24
    36e6:	99 1f       	adc	r25, r25
    36e8:	82 0f       	add	r24, r18
    36ea:	93 1f       	adc	r25, r19
    36ec:	9b 83       	std	Y+3, r25	; 0x03
    36ee:	8a 83       	std	Y+2, r24	; 0x02
				temp_num+=digit;
    36f0:	2a 81       	ldd	r18, Y+2	; 0x02
    36f2:	3b 81       	ldd	r19, Y+3	; 0x03
    36f4:	8c 81       	ldd	r24, Y+4	; 0x04
    36f6:	9d 81       	ldd	r25, Y+5	; 0x05
    36f8:	82 0f       	add	r24, r18
    36fa:	93 1f       	adc	r25, r19
    36fc:	9b 83       	std	Y+3, r25	; 0x03
    36fe:	8a 83       	std	Y+2, r24	; 0x02
    3700:	2d c0       	rjmp	.+90     	; 0x375c <main+0x292>
				break;
				case 3:
				temp_num*=10;
    3702:	8a 81       	ldd	r24, Y+2	; 0x02
    3704:	9b 81       	ldd	r25, Y+3	; 0x03
    3706:	9c 01       	movw	r18, r24
    3708:	22 0f       	add	r18, r18
    370a:	33 1f       	adc	r19, r19
    370c:	c9 01       	movw	r24, r18
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	88 0f       	add	r24, r24
    3714:	99 1f       	adc	r25, r25
    3716:	82 0f       	add	r24, r18
    3718:	93 1f       	adc	r25, r19
    371a:	9b 83       	std	Y+3, r25	; 0x03
    371c:	8a 83       	std	Y+2, r24	; 0x02
				temp_num+=digit;
    371e:	2a 81       	ldd	r18, Y+2	; 0x02
    3720:	3b 81       	ldd	r19, Y+3	; 0x03
    3722:	8c 81       	ldd	r24, Y+4	; 0x04
    3724:	9d 81       	ldd	r25, Y+5	; 0x05
    3726:	82 0f       	add	r24, r18
    3728:	93 1f       	adc	r25, r19
    372a:	9b 83       	std	Y+3, r25	; 0x03
    372c:	8a 83       	std	Y+2, r24	; 0x02
    372e:	16 c0       	rjmp	.+44     	; 0x375c <main+0x292>
				break;
				case 4:
				temp_num*=10;
    3730:	8a 81       	ldd	r24, Y+2	; 0x02
    3732:	9b 81       	ldd	r25, Y+3	; 0x03
    3734:	9c 01       	movw	r18, r24
    3736:	22 0f       	add	r18, r18
    3738:	33 1f       	adc	r19, r19
    373a:	c9 01       	movw	r24, r18
    373c:	88 0f       	add	r24, r24
    373e:	99 1f       	adc	r25, r25
    3740:	88 0f       	add	r24, r24
    3742:	99 1f       	adc	r25, r25
    3744:	82 0f       	add	r24, r18
    3746:	93 1f       	adc	r25, r19
    3748:	9b 83       	std	Y+3, r25	; 0x03
    374a:	8a 83       	std	Y+2, r24	; 0x02
				temp_num+=digit;
    374c:	2a 81       	ldd	r18, Y+2	; 0x02
    374e:	3b 81       	ldd	r19, Y+3	; 0x03
    3750:	8c 81       	ldd	r24, Y+4	; 0x04
    3752:	9d 81       	ldd	r25, Y+5	; 0x05
    3754:	82 0f       	add	r24, r18
    3756:	93 1f       	adc	r25, r19
    3758:	9b 83       	std	Y+3, r25	; 0x03
    375a:	8a 83       	std	Y+2, r24	; 0x02
				break;
			 }

			 LCD_Char(get_ascii_of_number(digit));
    375c:	8c 81       	ldd	r24, Y+4	; 0x04
    375e:	0e 94 32 18 	call	0x3064	; 0x3064 <get_ascii_of_number>
    3762:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <LCD_Char>
    3766:	d8 ce       	rjmp	.-592    	; 0x3518 <main+0x4e>
	   }
        else if(value==12){     //on/c
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	8c 30       	cpi	r24, 0x0C	; 12
    376c:	c1 f4       	brne	.+48     	; 0x379e <main+0x2d4>
			LCD_Clear();                     
    376e:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_Clear>
			counter_digit=0;                
    3772:	1e 82       	std	Y+6, r1	; 0x06
			arr2[counter_num]=temp_num;
    3774:	80 91 b5 00 	lds	r24, 0x00B5
    3778:	88 2f       	mov	r24, r24
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	88 0f       	add	r24, r24
    377e:	99 1f       	adc	r25, r25
    3780:	fc 01       	movw	r30, r24
    3782:	e0 56       	subi	r30, 0x60	; 96
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	8a 81       	ldd	r24, Y+2	; 0x02
    3788:	9b 81       	ldd	r25, Y+3	; 0x03
    378a:	91 83       	std	Z+1, r25	; 0x01
    378c:	80 83       	st	Z, r24
			temp_num=0;
    378e:	1b 82       	std	Y+3, r1	; 0x03
    3790:	1a 82       	std	Y+2, r1	; 0x02
			counter_num++;
    3792:	80 91 b5 00 	lds	r24, 0x00B5
    3796:	8f 5f       	subi	r24, 0xFF	; 255
    3798:	80 93 b5 00 	sts	0x00B5, r24
    379c:	bd ce       	rjmp	.-646    	; 0x3518 <main+0x4e>
	   }
        else if(value==14){    //=
    379e:	89 81       	ldd	r24, Y+1	; 0x01
    37a0:	8e 30       	cpi	r24, 0x0E	; 14
    37a2:	a9 f4       	brne	.+42     	; 0x37ce <main+0x304>
		  selection_sort( arr2, counter_num);
    37a4:	20 91 b5 00 	lds	r18, 0x00B5
    37a8:	80 ea       	ldi	r24, 0xA0	; 160
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	62 2f       	mov	r22, r18
    37ae:	0e 94 ab 19 	call	0x3356	; 0x3356 <selection_sort>
          DisplaySortedNum(arr2, counter_num);
    37b2:	20 91 b5 00 	lds	r18, 0x00B5
    37b6:	80 ea       	ldi	r24, 0xA0	; 160
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	62 2f       	mov	r22, r18
    37bc:	0e 94 3e 18 	call	0x307c	; 0x307c <DisplaySortedNum>
					for (int j = 0; buffer[j] != '\0'; j++) 	
						LCD_Char(buffer[j]);
			  
					LCD_Char('-');
				}*/
          is_sorted=1;
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	80 93 9f 00 	sts	0x009F, r24
          tick=25;
    37c6:	89 e1       	ldi	r24, 0x19	; 25
    37c8:	80 93 9e 00 	sts	0x009E, r24
    37cc:	a5 ce       	rjmp	.-694    	; 0x3518 <main+0x4e>
	   }
	   else if(value==15){     //on/c
    37ce:	89 81       	ldd	r24, Y+1	; 0x01
    37d0:	8f 30       	cpi	r24, 0x0F	; 15
    37d2:	09 f0       	breq	.+2      	; 0x37d6 <main+0x30c>
    37d4:	a1 ce       	rjmp	.-702    	; 0x3518 <main+0x4e>
			LCD_Clear();                     
    37d6:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_Clear>
    37da:	9e ce       	rjmp	.-708    	; 0x3518 <main+0x4e>

000037dc <__udivmodhi4>:
    37dc:	aa 1b       	sub	r26, r26
    37de:	bb 1b       	sub	r27, r27
    37e0:	51 e1       	ldi	r21, 0x11	; 17
    37e2:	07 c0       	rjmp	.+14     	; 0x37f2 <__udivmodhi4_ep>

000037e4 <__udivmodhi4_loop>:
    37e4:	aa 1f       	adc	r26, r26
    37e6:	bb 1f       	adc	r27, r27
    37e8:	a6 17       	cp	r26, r22
    37ea:	b7 07       	cpc	r27, r23
    37ec:	10 f0       	brcs	.+4      	; 0x37f2 <__udivmodhi4_ep>
    37ee:	a6 1b       	sub	r26, r22
    37f0:	b7 0b       	sbc	r27, r23

000037f2 <__udivmodhi4_ep>:
    37f2:	88 1f       	adc	r24, r24
    37f4:	99 1f       	adc	r25, r25
    37f6:	5a 95       	dec	r21
    37f8:	a9 f7       	brne	.-22     	; 0x37e4 <__udivmodhi4_loop>
    37fa:	80 95       	com	r24
    37fc:	90 95       	com	r25
    37fe:	bc 01       	movw	r22, r24
    3800:	cd 01       	movw	r24, r26
    3802:	08 95       	ret

00003804 <__divmodhi4>:
    3804:	97 fb       	bst	r25, 7
    3806:	09 2e       	mov	r0, r25
    3808:	07 26       	eor	r0, r23
    380a:	0a d0       	rcall	.+20     	; 0x3820 <__divmodhi4_neg1>
    380c:	77 fd       	sbrc	r23, 7
    380e:	04 d0       	rcall	.+8      	; 0x3818 <__divmodhi4_neg2>
    3810:	e5 df       	rcall	.-54     	; 0x37dc <__udivmodhi4>
    3812:	06 d0       	rcall	.+12     	; 0x3820 <__divmodhi4_neg1>
    3814:	00 20       	and	r0, r0
    3816:	1a f4       	brpl	.+6      	; 0x381e <__divmodhi4_exit>

00003818 <__divmodhi4_neg2>:
    3818:	70 95       	com	r23
    381a:	61 95       	neg	r22
    381c:	7f 4f       	sbci	r23, 0xFF	; 255

0000381e <__divmodhi4_exit>:
    381e:	08 95       	ret

00003820 <__divmodhi4_neg1>:
    3820:	f6 f7       	brtc	.-4      	; 0x381e <__divmodhi4_exit>
    3822:	90 95       	com	r25
    3824:	81 95       	neg	r24
    3826:	9f 4f       	sbci	r25, 0xFF	; 255
    3828:	08 95       	ret

0000382a <__prologue_saves__>:
    382a:	2f 92       	push	r2
    382c:	3f 92       	push	r3
    382e:	4f 92       	push	r4
    3830:	5f 92       	push	r5
    3832:	6f 92       	push	r6
    3834:	7f 92       	push	r7
    3836:	8f 92       	push	r8
    3838:	9f 92       	push	r9
    383a:	af 92       	push	r10
    383c:	bf 92       	push	r11
    383e:	cf 92       	push	r12
    3840:	df 92       	push	r13
    3842:	ef 92       	push	r14
    3844:	ff 92       	push	r15
    3846:	0f 93       	push	r16
    3848:	1f 93       	push	r17
    384a:	cf 93       	push	r28
    384c:	df 93       	push	r29
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
    3852:	ca 1b       	sub	r28, r26
    3854:	db 0b       	sbc	r29, r27
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	f8 94       	cli
    385a:	de bf       	out	0x3e, r29	; 62
    385c:	0f be       	out	0x3f, r0	; 63
    385e:	cd bf       	out	0x3d, r28	; 61
    3860:	09 94       	ijmp

00003862 <__epilogue_restores__>:
    3862:	2a 88       	ldd	r2, Y+18	; 0x12
    3864:	39 88       	ldd	r3, Y+17	; 0x11
    3866:	48 88       	ldd	r4, Y+16	; 0x10
    3868:	5f 84       	ldd	r5, Y+15	; 0x0f
    386a:	6e 84       	ldd	r6, Y+14	; 0x0e
    386c:	7d 84       	ldd	r7, Y+13	; 0x0d
    386e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3870:	9b 84       	ldd	r9, Y+11	; 0x0b
    3872:	aa 84       	ldd	r10, Y+10	; 0x0a
    3874:	b9 84       	ldd	r11, Y+9	; 0x09
    3876:	c8 84       	ldd	r12, Y+8	; 0x08
    3878:	df 80       	ldd	r13, Y+7	; 0x07
    387a:	ee 80       	ldd	r14, Y+6	; 0x06
    387c:	fd 80       	ldd	r15, Y+5	; 0x05
    387e:	0c 81       	ldd	r16, Y+4	; 0x04
    3880:	1b 81       	ldd	r17, Y+3	; 0x03
    3882:	aa 81       	ldd	r26, Y+2	; 0x02
    3884:	b9 81       	ldd	r27, Y+1	; 0x01
    3886:	ce 0f       	add	r28, r30
    3888:	d1 1d       	adc	r29, r1
    388a:	0f b6       	in	r0, 0x3f	; 63
    388c:	f8 94       	cli
    388e:	de bf       	out	0x3e, r29	; 62
    3890:	0f be       	out	0x3f, r0	; 63
    3892:	cd bf       	out	0x3d, r28	; 61
    3894:	ed 01       	movw	r28, r26
    3896:	08 95       	ret

00003898 <_exit>:
    3898:	f8 94       	cli

0000389a <__stop_program>:
    389a:	ff cf       	rjmp	.-2      	; 0x389a <__stop_program>
